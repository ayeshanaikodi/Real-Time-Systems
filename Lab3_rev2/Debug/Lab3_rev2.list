
Lab3_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003ea4  20000070  08004d3c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003f14  08004d3c  00023f14  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000230f0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000444e  00000000  00000000  00043190  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bdc1  00000000  00000000  000475de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001060  00000000  00000000  000533a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014d8  00000000  00000000  00054400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009466  00000000  00000000  000558d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000669f  00000000  00000000  0005ed3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000653dd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000032b0  00000000  00000000  0006545c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a64 	.word	0x08004a64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004a64 	.word	0x08004a64

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b97a 	b.w	80005cc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	468c      	mov	ip, r1
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	9e08      	ldr	r6, [sp, #32]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d151      	bne.n	80003a4 <__udivmoddi4+0xb4>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d96d      	bls.n	80003e2 <__udivmoddi4+0xf2>
 8000306:	fab2 fe82 	clz	lr, r2
 800030a:	f1be 0f00 	cmp.w	lr, #0
 800030e:	d00b      	beq.n	8000328 <__udivmoddi4+0x38>
 8000310:	f1ce 0c20 	rsb	ip, lr, #32
 8000314:	fa01 f50e 	lsl.w	r5, r1, lr
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000320:	ea4c 0c05 	orr.w	ip, ip, r5
 8000324:	fa00 f40e 	lsl.w	r4, r0, lr
 8000328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	fbbc f8fa 	udiv	r8, ip, sl
 8000332:	fa1f f987 	uxth.w	r9, r7
 8000336:	fb0a cc18 	mls	ip, sl, r8, ip
 800033a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800033e:	fb08 f309 	mul.w	r3, r8, r9
 8000342:	42ab      	cmp	r3, r5
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x6c>
 8000346:	19ed      	adds	r5, r5, r7
 8000348:	f108 32ff 	add.w	r2, r8, #4294967295
 800034c:	f080 8123 	bcs.w	8000596 <__udivmoddi4+0x2a6>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f240 8120 	bls.w	8000596 <__udivmoddi4+0x2a6>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	443d      	add	r5, r7
 800035c:	1aed      	subs	r5, r5, r3
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb5 f0fa 	udiv	r0, r5, sl
 8000364:	fb0a 5510 	mls	r5, sl, r0, r5
 8000368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800036c:	fb00 f909 	mul.w	r9, r0, r9
 8000370:	45a1      	cmp	r9, r4
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x98>
 8000374:	19e4      	adds	r4, r4, r7
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	f080 810a 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800037e:	45a1      	cmp	r9, r4
 8000380:	f240 8107 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000384:	3802      	subs	r0, #2
 8000386:	443c      	add	r4, r7
 8000388:	eba4 0409 	sub.w	r4, r4, r9
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	2100      	movs	r1, #0
 8000392:	2e00      	cmp	r6, #0
 8000394:	d061      	beq.n	800045a <__udivmoddi4+0x16a>
 8000396:	fa24 f40e 	lsr.w	r4, r4, lr
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xc8>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d054      	beq.n	8000456 <__udivmoddi4+0x166>
 80003ac:	2100      	movs	r1, #0
 80003ae:	e886 0021 	stmia.w	r6, {r0, r5}
 80003b2:	4608      	mov	r0, r1
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	fab3 f183 	clz	r1, r3
 80003bc:	2900      	cmp	r1, #0
 80003be:	f040 808e 	bne.w	80004de <__udivmoddi4+0x1ee>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xdc>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80fa 	bhi.w	80005c0 <__udivmoddi4+0x2d0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb65 0503 	sbc.w	r5, r5, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	46ac      	mov	ip, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d03f      	beq.n	800045a <__udivmoddi4+0x16a>
 80003da:	e886 1010 	stmia.w	r6, {r4, ip}
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b912      	cbnz	r2, 80003ea <__udivmoddi4+0xfa>
 80003e4:	2701      	movs	r7, #1
 80003e6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ea:	fab7 fe87 	clz	lr, r7
 80003ee:	f1be 0f00 	cmp.w	lr, #0
 80003f2:	d134      	bne.n	800045e <__udivmoddi4+0x16e>
 80003f4:	1beb      	subs	r3, r5, r7
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	2101      	movs	r1, #1
 80003fe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000402:	0c25      	lsrs	r5, r4, #16
 8000404:	fb02 3318 	mls	r3, r2, r8, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb0c f308 	mul.w	r3, ip, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x134>
 8000414:	19ed      	adds	r5, r5, r7
 8000416:	f108 30ff 	add.w	r0, r8, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x132>
 800041c:	42ab      	cmp	r3, r5
 800041e:	f200 80d1 	bhi.w	80005c4 <__udivmoddi4+0x2d4>
 8000422:	4680      	mov	r8, r0
 8000424:	1aed      	subs	r5, r5, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb5 f0f2 	udiv	r0, r5, r2
 800042c:	fb02 5510 	mls	r5, r2, r0, r5
 8000430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000434:	fb0c fc00 	mul.w	ip, ip, r0
 8000438:	45a4      	cmp	ip, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x15c>
 800043c:	19e4      	adds	r4, r4, r7
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x15a>
 8000444:	45a4      	cmp	ip, r4
 8000446:	f200 80b8 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000454:	e79d      	b.n	8000392 <__udivmoddi4+0xa2>
 8000456:	4631      	mov	r1, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1ce 0420 	rsb	r4, lr, #32
 8000462:	fa05 f30e 	lsl.w	r3, r5, lr
 8000466:	fa07 f70e 	lsl.w	r7, r7, lr
 800046a:	fa20 f804 	lsr.w	r8, r0, r4
 800046e:	0c3a      	lsrs	r2, r7, #16
 8000470:	fa25 f404 	lsr.w	r4, r5, r4
 8000474:	ea48 0803 	orr.w	r8, r8, r3
 8000478:	fbb4 f1f2 	udiv	r1, r4, r2
 800047c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000480:	fb02 4411 	mls	r4, r2, r1, r4
 8000484:	fa1f fc87 	uxth.w	ip, r7
 8000488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800048c:	fb01 f30c 	mul.w	r3, r1, ip
 8000490:	42ab      	cmp	r3, r5
 8000492:	fa00 f40e 	lsl.w	r4, r0, lr
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x1bc>
 8000498:	19ed      	adds	r5, r5, r7
 800049a:	f101 30ff 	add.w	r0, r1, #4294967295
 800049e:	f080 808a 	bcs.w	80005b6 <__udivmoddi4+0x2c6>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	f240 8087 	bls.w	80005b6 <__udivmoddi4+0x2c6>
 80004a8:	3902      	subs	r1, #2
 80004aa:	443d      	add	r5, r7
 80004ac:	1aeb      	subs	r3, r5, r3
 80004ae:	fa1f f588 	uxth.w	r5, r8
 80004b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004b6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004be:	fb00 f30c 	mul.w	r3, r0, ip
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1e6>
 80004c6:	19ed      	adds	r5, r5, r7
 80004c8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004cc:	d26f      	bcs.n	80005ae <__udivmoddi4+0x2be>
 80004ce:	42ab      	cmp	r3, r5
 80004d0:	d96d      	bls.n	80005ae <__udivmoddi4+0x2be>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	1aeb      	subs	r3, r5, r3
 80004d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004dc:	e78f      	b.n	80003fe <__udivmoddi4+0x10e>
 80004de:	f1c1 0720 	rsb	r7, r1, #32
 80004e2:	fa22 f807 	lsr.w	r8, r2, r7
 80004e6:	408b      	lsls	r3, r1
 80004e8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ec:	ea48 0303 	orr.w	r3, r8, r3
 80004f0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004fe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000502:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000506:	fb0c 5519 	mls	r5, ip, r9, r5
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000512:	fb09 f408 	mul.w	r4, r9, r8
 8000516:	42ac      	cmp	r4, r5
 8000518:	fa02 f201 	lsl.w	r2, r2, r1
 800051c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x244>
 8000522:	18ed      	adds	r5, r5, r3
 8000524:	f109 30ff 	add.w	r0, r9, #4294967295
 8000528:	d243      	bcs.n	80005b2 <__udivmoddi4+0x2c2>
 800052a:	42ac      	cmp	r4, r5
 800052c:	d941      	bls.n	80005b2 <__udivmoddi4+0x2c2>
 800052e:	f1a9 0902 	sub.w	r9, r9, #2
 8000532:	441d      	add	r5, r3
 8000534:	1b2d      	subs	r5, r5, r4
 8000536:	fa1f fe8e 	uxth.w	lr, lr
 800053a:	fbb5 f0fc 	udiv	r0, r5, ip
 800053e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000546:	fb00 f808 	mul.w	r8, r0, r8
 800054a:	45a0      	cmp	r8, r4
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x26e>
 800054e:	18e4      	adds	r4, r4, r3
 8000550:	f100 35ff 	add.w	r5, r0, #4294967295
 8000554:	d229      	bcs.n	80005aa <__udivmoddi4+0x2ba>
 8000556:	45a0      	cmp	r8, r4
 8000558:	d927      	bls.n	80005aa <__udivmoddi4+0x2ba>
 800055a:	3802      	subs	r0, #2
 800055c:	441c      	add	r4, r3
 800055e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000562:	eba4 0408 	sub.w	r4, r4, r8
 8000566:	fba0 8902 	umull	r8, r9, r0, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	46c6      	mov	lr, r8
 800056e:	464d      	mov	r5, r9
 8000570:	d315      	bcc.n	800059e <__udivmoddi4+0x2ae>
 8000572:	d012      	beq.n	800059a <__udivmoddi4+0x2aa>
 8000574:	b156      	cbz	r6, 800058c <__udivmoddi4+0x29c>
 8000576:	ebba 030e 	subs.w	r3, sl, lr
 800057a:	eb64 0405 	sbc.w	r4, r4, r5
 800057e:	fa04 f707 	lsl.w	r7, r4, r7
 8000582:	40cb      	lsrs	r3, r1
 8000584:	431f      	orrs	r7, r3
 8000586:	40cc      	lsrs	r4, r1
 8000588:	6037      	str	r7, [r6, #0]
 800058a:	6074      	str	r4, [r6, #4]
 800058c:	2100      	movs	r1, #0
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	4618      	mov	r0, r3
 8000594:	e6f8      	b.n	8000388 <__udivmoddi4+0x98>
 8000596:	4690      	mov	r8, r2
 8000598:	e6e0      	b.n	800035c <__udivmoddi4+0x6c>
 800059a:	45c2      	cmp	sl, r8
 800059c:	d2ea      	bcs.n	8000574 <__udivmoddi4+0x284>
 800059e:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a2:	eb69 0503 	sbc.w	r5, r9, r3
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7e4      	b.n	8000574 <__udivmoddi4+0x284>
 80005aa:	4628      	mov	r0, r5
 80005ac:	e7d7      	b.n	800055e <__udivmoddi4+0x26e>
 80005ae:	4640      	mov	r0, r8
 80005b0:	e791      	b.n	80004d6 <__udivmoddi4+0x1e6>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e7be      	b.n	8000534 <__udivmoddi4+0x244>
 80005b6:	4601      	mov	r1, r0
 80005b8:	e778      	b.n	80004ac <__udivmoddi4+0x1bc>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e745      	b.n	800044c <__udivmoddi4+0x15c>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e708      	b.n	80003d6 <__udivmoddi4+0xe6>
 80005c4:	f1a8 0802 	sub.w	r8, r8, #2
 80005c8:	443d      	add	r5, r7
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x134>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x30>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005da:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005e2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 faa9 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f003 fd06 	bl	8004004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f8:	f003 fc84 	bl	8003f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005fc:	2000      	movs	r0, #0
 80005fe:	bd08      	pop	{r3, pc}
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_IncTick+0x10>)
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_IncTick+0x14>)
 8000608:	6811      	ldr	r1, [r2, #0]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	440b      	add	r3, r1
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20003de8 	.word	0x20003de8
 8000618:	20000000 	.word	0x20000000

0800061c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <HAL_GetTick+0x8>)
 800061e:	6818      	ldr	r0, [r3, #0]
}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20003de8 	.word	0x20003de8

08000628 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000628:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800062a:	4604      	mov	r4, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	f000 8099 	beq.w	8000764 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000632:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000634:	b923      	cbnz	r3, 8000640 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000636:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000638:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800063c:	f003 fc84 	bl	8003f48 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000642:	06db      	lsls	r3, r3, #27
 8000644:	f100 808c 	bmi.w	8000760 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800064a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800064e:	f023 0302 	bic.w	r3, r3, #2
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000658:	4b43      	ldr	r3, [pc, #268]	; (8000768 <HAL_ADC_Init+0x140>)
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000660:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	6861      	ldr	r1, [r4, #4]
 8000666:	430a      	orrs	r2, r1
 8000668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800066a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800066c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800067c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800067e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000680:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000682:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000686:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	430a      	orrs	r2, r1
 800068c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800068e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000690:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	430a      	orrs	r2, r1
 800069c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800069e:	4933      	ldr	r1, [pc, #204]	; (800076c <HAL_ADC_Init+0x144>)
 80006a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006a2:	428a      	cmp	r2, r1
 80006a4:	d050      	beq.n	8000748 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006a6:	6899      	ldr	r1, [r3, #8]
 80006a8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006ac:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006ae:	6899      	ldr	r1, [r3, #8]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006c2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006c4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006c6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006c8:	f022 0202 	bic.w	r2, r2, #2
 80006cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80006d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006d6:	6a22      	ldr	r2, [r4, #32]
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d03d      	beq.n	8000758 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006dc:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006de:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006e4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006ec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	3901      	subs	r1, #1
 80006f2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006fa:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000704:	3901      	subs	r1, #1
 8000706:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800070c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800070e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000710:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000716:	689a      	ldr	r2, [r3, #8]
 8000718:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800071c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800071e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000720:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000728:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800072a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800072c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000730:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000732:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000736:	f023 0303 	bic.w	r3, r3, #3
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000740:	2300      	movs	r3, #0
 8000742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000746:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800074e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000756:	e7b4      	b.n	80006c2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800075e:	e7ca      	b.n	80006f6 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000760:	2001      	movs	r0, #1
 8000762:	e7ed      	b.n	8000740 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000764:	2001      	movs	r0, #1
}
 8000766:	bd10      	pop	{r4, pc}
 8000768:	40012300 	.word	0x40012300
 800076c:	0f000001 	.word	0x0f000001

08000770 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000770:	6803      	ldr	r3, [r0, #0]
 8000772:	689a      	ldr	r2, [r3, #8]
{
 8000774:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000776:	0556      	lsls	r6, r2, #21
{
 8000778:	4604      	mov	r4, r0
 800077a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800077c:	d50b      	bpl.n	8000796 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800077e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000780:	05d8      	lsls	r0, r3, #23
 8000782:	d508      	bpl.n	8000796 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 800078c:	2300      	movs	r3, #0
 800078e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000792:	2001      	movs	r0, #1
 8000794:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8000796:	f7ff ff41 	bl	800061c <HAL_GetTick>
 800079a:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	0792      	lsls	r2, r2, #30
 80007a2:	d50c      	bpl.n	80007be <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007a4:	f06f 0212 	mvn.w	r2, #18
 80007a8:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007b0:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80007b8:	d013      	beq.n	80007e2 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80007ba:	2000      	movs	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80007be:	1c69      	adds	r1, r5, #1
 80007c0:	d0ed      	beq.n	800079e <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80007c2:	b945      	cbnz	r5, 80007d6 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80007c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80007cc:	2300      	movs	r3, #0
 80007ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80007d2:	2003      	movs	r0, #3
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80007d6:	f7ff ff21 	bl	800061c <HAL_GetTick>
 80007da:	1b80      	subs	r0, r0, r6
 80007dc:	4285      	cmp	r5, r0
 80007de:	d2dd      	bcs.n	800079c <HAL_ADC_PollForConversion+0x2c>
 80007e0:	e7f0      	b.n	80007c4 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007e2:	69a2      	ldr	r2, [r4, #24]
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d1e8      	bne.n	80007ba <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80007e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007ea:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80007ee:	d002      	beq.n	80007f6 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80007f0:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80007f2:	055b      	lsls	r3, r3, #21
 80007f4:	d4e1      	bmi.n	80007ba <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80007f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007fc:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000800:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000804:	d1d9      	bne.n	80007ba <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <HAL_ADC_Start_IT>:
{
 8000810:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000812:	2300      	movs	r3, #0
 8000814:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000816:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800081a:	2b01      	cmp	r3, #1
 800081c:	d054      	beq.n	80008c8 <HAL_ADC_Start_IT+0xb8>
 800081e:	2301      	movs	r3, #1
 8000820:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000824:	6803      	ldr	r3, [r0, #0]
 8000826:	689a      	ldr	r2, [r3, #8]
 8000828:	07d1      	lsls	r1, r2, #31
 800082a:	d505      	bpl.n	8000838 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	07d2      	lsls	r2, r2, #31
 8000830:	d414      	bmi.n	800085c <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 8000832:	2000      	movs	r0, #0
}
 8000834:	b002      	add	sp, #8
 8000836:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000838:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800083a:	4924      	ldr	r1, [pc, #144]	; (80008cc <HAL_ADC_Start_IT+0xbc>)
    __HAL_ADC_ENABLE(hadc);
 800083c:	f042 0201 	orr.w	r2, r2, #1
 8000840:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000842:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <HAL_ADC_Start_IT+0xc0>)
 8000844:	6812      	ldr	r2, [r2, #0]
 8000846:	fbb2 f2f1 	udiv	r2, r2, r1
 800084a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800084e:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000850:	9a01      	ldr	r2, [sp, #4]
 8000852:	2a00      	cmp	r2, #0
 8000854:	d0ea      	beq.n	800082c <HAL_ADC_Start_IT+0x1c>
      counter--;
 8000856:	9a01      	ldr	r2, [sp, #4]
 8000858:	3a01      	subs	r2, #1
 800085a:	e7f8      	b.n	800084e <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 800085c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800085e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000862:	f022 0201 	bic.w	r2, r2, #1
 8000866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800086a:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000870:	bf41      	itttt	mi
 8000872:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000874:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000878:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800087c:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800087e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000884:	bf1c      	itt	ne
 8000886:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000888:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800088c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800088e:	2200      	movs	r2, #0
 8000890:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000894:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000898:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80008a0:	f042 0220 	orr.w	r2, r2, #32
 80008a4:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <HAL_ADC_Start_IT+0xc4>)
 80008a8:	6852      	ldr	r2, [r2, #4]
 80008aa:	06d2      	lsls	r2, r2, #27
 80008ac:	d108      	bne.n	80008c0 <HAL_ADC_Start_IT+0xb0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008ae:	6898      	ldr	r0, [r3, #8]
 80008b0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80008b4:	d1bd      	bne.n	8000832 <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	e7b9      	b.n	8000834 <HAL_ADC_Start_IT+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <HAL_ADC_Start_IT+0xc8>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d1b5      	bne.n	8000832 <HAL_ADC_Start_IT+0x22>
 80008c6:	e7f2      	b.n	80008ae <HAL_ADC_Start_IT+0x9e>
  __HAL_LOCK(hadc);
 80008c8:	2002      	movs	r0, #2
 80008ca:	e7b3      	b.n	8000834 <HAL_ADC_Start_IT+0x24>
 80008cc:	000f4240 	.word	0x000f4240
 80008d0:	20000008 	.word	0x20000008
 80008d4:	40012300 	.word	0x40012300
 80008d8:	40012000 	.word	0x40012000

080008dc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80008dc:	6803      	ldr	r3, [r0, #0]
 80008de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80008e0:	4770      	bx	lr

080008e2 <HAL_ADC_ConvCpltCallback>:
 80008e2:	4770      	bx	lr

080008e4 <HAL_ADC_LevelOutOfWindowCallback>:
 80008e4:	4770      	bx	lr

080008e6 <HAL_ADC_ErrorCallback>:
{
 80008e6:	4770      	bx	lr

080008e8 <HAL_ADC_IRQHandler>:
{
 80008e8:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80008ea:	6803      	ldr	r3, [r0, #0]
 80008ec:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80008ee:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80008f0:	078d      	lsls	r5, r1, #30
{
 80008f2:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80008f4:	d52b      	bpl.n	800094e <HAL_ADC_IRQHandler+0x66>
 80008f6:	0690      	lsls	r0, r2, #26
 80008f8:	d529      	bpl.n	800094e <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008fc:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80008fe:	bf5e      	ittt	pl
 8000900:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000902:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000906:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800090e:	d117      	bne.n	8000940 <HAL_ADC_IRQHandler+0x58>
 8000910:	69a2      	ldr	r2, [r4, #24]
 8000912:	b9aa      	cbnz	r2, 8000940 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000916:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800091a:	d002      	beq.n	8000922 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800091c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800091e:	0552      	lsls	r2, r2, #21
 8000920:	d40e      	bmi.n	8000940 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	f022 0220 	bic.w	r2, r2, #32
 8000928:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800092a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800092c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000930:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000934:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000936:	bf5e      	ittt	pl
 8000938:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800093a:	f043 0301 	orrpl.w	r3, r3, #1
 800093e:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000940:	4620      	mov	r0, r4
 8000942:	f7ff ffce 	bl	80008e2 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000946:	6823      	ldr	r3, [r4, #0]
 8000948:	f06f 0212 	mvn.w	r2, #18
 800094c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000952:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000954:	074d      	lsls	r5, r1, #29
 8000956:	d532      	bpl.n	80009be <HAL_ADC_IRQHandler+0xd6>
 8000958:	0610      	lsls	r0, r2, #24
 800095a:	d530      	bpl.n	80009be <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800095c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800095e:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000960:	bf5e      	ittt	pl
 8000962:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000964:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000968:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000970:	d11e      	bne.n	80009b0 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000974:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000978:	d002      	beq.n	8000980 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800097a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800097c:	0552      	lsls	r2, r2, #21
 800097e:	d417      	bmi.n	80009b0 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000980:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000982:	0555      	lsls	r5, r2, #21
 8000984:	d414      	bmi.n	80009b0 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000986:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000988:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800098c:	d110      	bne.n	80009b0 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800098e:	69a2      	ldr	r2, [r4, #24]
 8000990:	b972      	cbnz	r2, 80009b0 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000998:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800099a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800099c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009a0:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80009a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009a4:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009a6:	bf5e      	ittt	pl
 80009a8:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80009aa:	f043 0301 	orrpl.w	r3, r3, #1
 80009ae:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80009b0:	4620      	mov	r0, r4
 80009b2:	f000 f8c5 	bl	8000b40 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	f06f 020c 	mvn.w	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80009c2:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80009c4:	07c9      	lsls	r1, r1, #31
 80009c6:	d50f      	bpl.n	80009e8 <HAL_ADC_IRQHandler+0x100>
 80009c8:	0655      	lsls	r5, r2, #25
 80009ca:	d50d      	bpl.n	80009e8 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	07d8      	lsls	r0, r3, #31
 80009d0:	d50a      	bpl.n	80009e8 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80009d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80009da:	4620      	mov	r0, r4
 80009dc:	f7ff ff82 	bl	80008e4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	f06f 0201 	mvn.w	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80009e8:	6823      	ldr	r3, [r4, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80009ec:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80009ee:	0689      	lsls	r1, r1, #26
 80009f0:	d50d      	bpl.n	8000a0e <HAL_ADC_IRQHandler+0x126>
 80009f2:	0152      	lsls	r2, r2, #5
 80009f4:	d50b      	bpl.n	8000a0e <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009f6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009f8:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009fc:	f042 0202 	orr.w	r2, r2, #2
 8000a00:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 8000a02:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000a04:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8000a06:	f7ff ff6e 	bl	80008e6 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	601d      	str	r5, [r3, #0]
 8000a0e:	bd38      	pop	{r3, r4, r5, pc}

08000a10 <HAL_ADC_ConfigChannel>:
{
 8000a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000a16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d06a      	beq.n	8000af4 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a1e:	680d      	ldr	r5, [r1, #0]
 8000a20:	6804      	ldr	r4, [r0, #0]
 8000a22:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000a24:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a26:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000a28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000a2c:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a2e:	d92a      	bls.n	8000a86 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a30:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000a34:	68e7      	ldr	r7, [r4, #12]
 8000a36:	3b1e      	subs	r3, #30
 8000a38:	f04f 0e07 	mov.w	lr, #7
 8000a3c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a40:	ea27 070e 	bic.w	r7, r7, lr
 8000a44:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a46:	68e7      	ldr	r7, [r4, #12]
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	433b      	orrs	r3, r7
 8000a4e:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000a50:	684a      	ldr	r2, [r1, #4]
 8000a52:	2a06      	cmp	r2, #6
 8000a54:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000a58:	d825      	bhi.n	8000aa6 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a5a:	4413      	add	r3, r2
 8000a5c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000a5e:	1f59      	subs	r1, r3, #5
 8000a60:	231f      	movs	r3, #31
 8000a62:	408b      	lsls	r3, r1
 8000a64:	ea27 0303 	bic.w	r3, r7, r3
 8000a68:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a6c:	fa06 f101 	lsl.w	r1, r6, r1
 8000a70:	4311      	orrs	r1, r2
 8000a72:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <HAL_ADC_ConfigChannel+0x11c>)
 8000a76:	429c      	cmp	r4, r3
 8000a78:	d034      	beq.n	8000ae4 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000a80:	4618      	mov	r0, r3
}
 8000a82:	b003      	add	sp, #12
 8000a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a86:	6927      	ldr	r7, [r4, #16]
 8000a88:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000a8c:	f04f 0e07 	mov.w	lr, #7
 8000a90:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a94:	ea27 070e 	bic.w	r7, r7, lr
 8000a98:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a9a:	6927      	ldr	r7, [r4, #16]
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	433b      	orrs	r3, r7
 8000aa2:	6123      	str	r3, [r4, #16]
 8000aa4:	e7d4      	b.n	8000a50 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000aa6:	2a0c      	cmp	r2, #12
 8000aa8:	d80e      	bhi.n	8000ac8 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000aaa:	4413      	add	r3, r2
 8000aac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000aae:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000ab2:	231f      	movs	r3, #31
 8000ab4:	4093      	lsls	r3, r2
 8000ab6:	ea21 0303 	bic.w	r3, r1, r3
 8000aba:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000abc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000abe:	fa06 f202 	lsl.w	r2, r6, r2
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	6322      	str	r2, [r4, #48]	; 0x30
 8000ac6:	e7d5      	b.n	8000a74 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ac8:	4413      	add	r3, r2
 8000aca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000acc:	3b41      	subs	r3, #65	; 0x41
 8000ace:	221f      	movs	r2, #31
 8000ad0:	409a      	lsls	r2, r3
 8000ad2:	ea21 0202 	bic.w	r2, r1, r2
 8000ad6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ad8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ada:	fa06 f103 	lsl.w	r1, r6, r3
 8000ade:	4311      	orrs	r1, r2
 8000ae0:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000ae2:	e7c7      	b.n	8000a74 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ae4:	2d12      	cmp	r5, #18
 8000ae6:	d107      	bne.n	8000af8 <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <HAL_ADC_ConfigChannel+0x120>)
 8000aea:	6853      	ldr	r3, [r2, #4]
 8000aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af0:	6053      	str	r3, [r2, #4]
 8000af2:	e7c2      	b.n	8000a7a <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000af4:	2002      	movs	r0, #2
 8000af6:	e7c4      	b.n	8000a82 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_ADC_ConfigChannel+0x124>)
 8000afa:	429d      	cmp	r5, r3
 8000afc:	d001      	beq.n	8000b02 <HAL_ADC_ConfigChannel+0xf2>
 8000afe:	2d11      	cmp	r5, #17
 8000b00:	d1bb      	bne.n	8000a7a <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b02:	490b      	ldr	r1, [pc, #44]	; (8000b30 <HAL_ADC_ConfigChannel+0x120>)
 8000b04:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b06:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b0c:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b0e:	d1b4      	bne.n	8000a7a <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_ADC_ConfigChannel+0x128>)
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_ADC_ConfigChannel+0x12c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b1a:	230a      	movs	r3, #10
 8000b1c:	4353      	muls	r3, r2
        counter--;
 8000b1e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000b20:	9b01      	ldr	r3, [sp, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0a9      	beq.n	8000a7a <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000b26:	9b01      	ldr	r3, [sp, #4]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	e7f8      	b.n	8000b1e <HAL_ADC_ConfigChannel+0x10e>
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	40012300 	.word	0x40012300
 8000b34:	10000012 	.word	0x10000012
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	000f4240 	.word	0x000f4240

08000b40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b40:	4770      	bx	lr
	...

08000b44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b4c:	041b      	lsls	r3, r3, #16
 8000b4e:	0c1b      	lsrs	r3, r3, #16
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b54:	0200      	lsls	r0, r0, #8
 8000b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b5e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b60:	60d3      	str	r3, [r2, #12]
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b530      	push	{r4, r5, lr}
 8000b6c:	68dc      	ldr	r4, [r3, #12]
 8000b6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	bf28      	it	cs
 8000b7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 0501 	mov.w	r5, #1
 8000b84:	fa05 f303 	lsl.w	r3, r5, r3
 8000b88:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8c:	bf8c      	ite	hi
 8000b8e:	3c03      	subhi	r4, #3
 8000b90:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b92:	4019      	ands	r1, r3
 8000b94:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b96:	fa05 f404 	lsl.w	r4, r5, r4
 8000b9a:	3c01      	subs	r4, #1
 8000b9c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b9e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	ea42 0201 	orr.w	r2, r2, r1
 8000ba4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	bfaf      	iteee	ge
 8000baa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	f000 000f 	andlt.w	r0, r0, #15
 8000bb2:	4b06      	ldrlt	r3, [pc, #24]	; (8000bcc <HAL_NVIC_SetPriority+0x64>)
 8000bb4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	bfa5      	ittet	ge
 8000bb8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000bbc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bc4:	bd30      	pop	{r4, r5, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	e000ed14 	.word	0xe000ed14

08000bd0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bd0:	0942      	lsrs	r2, r0, #5
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f000 001f 	and.w	r0, r0, #31
 8000bd8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bdc:	4b01      	ldr	r3, [pc, #4]	; (8000be4 <HAL_NVIC_EnableIRQ+0x14>)
 8000bde:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000be8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d003      	beq.n	8000bf8 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000bf8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000c00:	6813      	ldr	r3, [r2, #0]
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000c08:	2000      	movs	r0, #0
}
 8000c0a:	4770      	bx	lr

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c10:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c14:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000db8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c18:	4a65      	ldr	r2, [pc, #404]	; (8000db0 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c1a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000dbc <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c20:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000c22:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000c28:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000c30:	45b6      	cmp	lr, r6
 8000c32:	f040 80aa 	bne.w	8000d8a <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c36:	684c      	ldr	r4, [r1, #4]
 8000c38:	f024 0710 	bic.w	r7, r4, #16
 8000c3c:	2f02      	cmp	r7, #2
 8000c3e:	d116      	bne.n	8000c6e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000c40:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c44:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c48:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000c4c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c50:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c54:	f04f 0c0f 	mov.w	ip, #15
 8000c58:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c5c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c60:	690d      	ldr	r5, [r1, #16]
 8000c62:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c66:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000c6a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c6e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c72:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c74:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c78:	fa05 f50a 	lsl.w	r5, r5, sl
 8000c7c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c7e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c82:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c86:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c8c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c90:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000c92:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c96:	d811      	bhi.n	8000cbc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000c98:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9e:	68cf      	ldr	r7, [r1, #12]
 8000ca0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ca4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ca8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000caa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cb0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000cb4:	409f      	lsls	r7, r3
 8000cb6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cbc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cbe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc0:	688f      	ldr	r7, [r1, #8]
 8000cc2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000cc6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000cc8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cca:	00e5      	lsls	r5, r4, #3
 8000ccc:	d55d      	bpl.n	8000d8a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	f04f 0b00 	mov.w	fp, #0
 8000cd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8000cd6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cda:	4d36      	ldr	r5, [pc, #216]	; (8000db4 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ce0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ce4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ce8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000cec:	9703      	str	r7, [sp, #12]
 8000cee:	9f03      	ldr	r7, [sp, #12]
 8000cf0:	f023 0703 	bic.w	r7, r3, #3
 8000cf4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000cf8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cfc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d00:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d08:	f04f 0e0f 	mov.w	lr, #15
 8000d0c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d10:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d12:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d16:	d03f      	beq.n	8000d98 <HAL_GPIO_Init+0x18c>
 8000d18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d1c:	42a8      	cmp	r0, r5
 8000d1e:	d03d      	beq.n	8000d9c <HAL_GPIO_Init+0x190>
 8000d20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d24:	42a8      	cmp	r0, r5
 8000d26:	d03b      	beq.n	8000da0 <HAL_GPIO_Init+0x194>
 8000d28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	d039      	beq.n	8000da4 <HAL_GPIO_Init+0x198>
 8000d30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d34:	42a8      	cmp	r0, r5
 8000d36:	d037      	beq.n	8000da8 <HAL_GPIO_Init+0x19c>
 8000d38:	4548      	cmp	r0, r9
 8000d3a:	d037      	beq.n	8000dac <HAL_GPIO_Init+0x1a0>
 8000d3c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000d40:	42a8      	cmp	r0, r5
 8000d42:	bf14      	ite	ne
 8000d44:	2507      	movne	r5, #7
 8000d46:	2506      	moveq	r5, #6
 8000d48:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d4c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d50:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000d52:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d54:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d56:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d5a:	bf0c      	ite	eq
 8000d5c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d5e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000d60:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000d62:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d64:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d68:	bf0c      	ite	eq
 8000d6a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d6c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000d6e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d70:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d72:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d76:	bf0c      	ite	eq
 8000d78:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d7a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000d7c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000d7e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d80:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000d82:	bf54      	ite	pl
 8000d84:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d86:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d88:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	2b10      	cmp	r3, #16
 8000d8e:	f47f af48 	bne.w	8000c22 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000d92:	b005      	add	sp, #20
 8000d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d98:	465d      	mov	r5, fp
 8000d9a:	e7d5      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000d9c:	2501      	movs	r5, #1
 8000d9e:	e7d3      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000da0:	2502      	movs	r5, #2
 8000da2:	e7d1      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000da4:	2503      	movs	r5, #3
 8000da6:	e7cf      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000da8:	2504      	movs	r5, #4
 8000daa:	e7cd      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000dac:	2505      	movs	r5, #5
 8000dae:	e7cb      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000db0:	40013c00 	.word	0x40013c00
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40021400 	.word	0x40021400

08000dc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dc0:	6903      	ldr	r3, [r0, #16]
 8000dc2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000dc4:	bf14      	ite	ne
 8000dc6:	2001      	movne	r0, #1
 8000dc8:	2000      	moveq	r0, #0
 8000dca:	4770      	bx	lr

08000dcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dcc:	b10a      	cbz	r2, 8000dd2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dce:	6181      	str	r1, [r0, #24]
 8000dd0:	4770      	bx	lr
 8000dd2:	0409      	lsls	r1, r1, #16
 8000dd4:	e7fb      	b.n	8000dce <HAL_GPIO_WritePin+0x2>

08000dd6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000dd6:	6943      	ldr	r3, [r0, #20]
 8000dd8:	4059      	eors	r1, r3
 8000dda:	6141      	str	r1, [r0, #20]
 8000ddc:	4770      	bx	lr
	...

08000de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000de4:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000de6:	4604      	mov	r4, r0
 8000de8:	b910      	cbnz	r0, 8000df0 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000dea:	2001      	movs	r0, #1
 8000dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000df0:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <HAL_RCC_ClockConfig+0x124>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	f002 020f 	and.w	r2, r2, #15
 8000df8:	428a      	cmp	r2, r1
 8000dfa:	d328      	bcc.n	8000e4e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dfc:	6821      	ldr	r1, [r4, #0]
 8000dfe:	078f      	lsls	r7, r1, #30
 8000e00:	d42d      	bmi.n	8000e5e <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e02:	07c8      	lsls	r0, r1, #31
 8000e04:	d440      	bmi.n	8000e88 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <HAL_RCC_ClockConfig+0x124>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	f002 020f 	and.w	r2, r2, #15
 8000e0e:	4295      	cmp	r5, r2
 8000e10:	d366      	bcc.n	8000ee0 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	0751      	lsls	r1, r2, #29
 8000e16:	d46c      	bmi.n	8000ef2 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e18:	0713      	lsls	r3, r2, #28
 8000e1a:	d507      	bpl.n	8000e2c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e1c:	4a3a      	ldr	r2, [pc, #232]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000e1e:	6921      	ldr	r1, [r4, #16]
 8000e20:	6893      	ldr	r3, [r2, #8]
 8000e22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e2a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e2c:	f000 f8b0 	bl	8000f90 <HAL_RCC_GetSysClockFreq>
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000e32:	4a36      	ldr	r2, [pc, #216]	; (8000f0c <HAL_RCC_ClockConfig+0x12c>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e3a:	5cd3      	ldrb	r3, [r2, r3]
 8000e3c:	40d8      	lsrs	r0, r3
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <HAL_RCC_ClockConfig+0x130>)
 8000e40:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f003 f8de 	bl	8004004 <HAL_InitTick>

  return HAL_OK;
 8000e48:	2000      	movs	r0, #0
 8000e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d1c6      	bne.n	8000dea <HAL_RCC_ClockConfig+0xa>
 8000e5c:	e7ce      	b.n	8000dfc <HAL_RCC_ClockConfig+0x1c>
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e60:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e64:	bf1e      	ittt	ne
 8000e66:	689a      	ldrne	r2, [r3, #8]
 8000e68:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000e6c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e6e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e70:	bf42      	ittt	mi
 8000e72:	689a      	ldrmi	r2, [r3, #8]
 8000e74:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000e78:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	68a0      	ldr	r0, [r4, #8]
 8000e7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e82:	4302      	orrs	r2, r0
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	e7bc      	b.n	8000e02 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e88:	6862      	ldr	r2, [r4, #4]
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000e8c:	2a01      	cmp	r2, #1
 8000e8e:	d11d      	bne.n	8000ecc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e96:	d0a8      	beq.n	8000dea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e98:	4e1b      	ldr	r6, [pc, #108]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000e9a:	68b3      	ldr	r3, [r6, #8]
 8000e9c:	f023 0303 	bic.w	r3, r3, #3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ea4:	f7ff fbba 	bl	800061c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ea8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000eac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eae:	68b3      	ldr	r3, [r6, #8]
 8000eb0:	6862      	ldr	r2, [r4, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000eba:	d0a4      	beq.n	8000e06 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ebc:	f7ff fbae 	bl	800061c <HAL_GetTick>
 8000ec0:	1bc0      	subs	r0, r0, r7
 8000ec2:	4540      	cmp	r0, r8
 8000ec4:	d9f3      	bls.n	8000eae <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000ec6:	2003      	movs	r0, #3
}
 8000ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ecc:	1e91      	subs	r1, r2, #2
 8000ece:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ed2:	d802      	bhi.n	8000eda <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ed8:	e7dd      	b.n	8000e96 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eda:	f013 0f02 	tst.w	r3, #2
 8000ede:	e7da      	b.n	8000e96 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ee0:	b2ea      	uxtb	r2, r5
 8000ee2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	429d      	cmp	r5, r3
 8000eec:	f47f af7d 	bne.w	8000dea <HAL_RCC_ClockConfig+0xa>
 8000ef0:	e78f      	b.n	8000e12 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ef2:	4905      	ldr	r1, [pc, #20]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000ef4:	68e0      	ldr	r0, [r4, #12]
 8000ef6:	688b      	ldr	r3, [r1, #8]
 8000ef8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000efc:	4303      	orrs	r3, r0
 8000efe:	608b      	str	r3, [r1, #8]
 8000f00:	e78a      	b.n	8000e18 <HAL_RCC_ClockConfig+0x38>
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	08004c6f 	.word	0x08004c6f
 8000f10:	20000008 	.word	0x20000008

08000f14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f22:	6810      	ldr	r0, [r2, #0]
}
 8000f24:	40d8      	lsrs	r0, r3
 8000f26:	4770      	bx	lr
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	08004c7f 	.word	0x08004c7f
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f3e:	5cd3      	ldrb	r3, [r2, r3]
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f42:	6810      	ldr	r0, [r2, #0]
}
 8000f44:	40d8      	lsrs	r0, r3
 8000f46:	4770      	bx	lr
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	08004c7f 	.word	0x08004c7f
 8000f50:	20000008 	.word	0x20000008

08000f54 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f54:	230f      	movs	r3, #15
 8000f56:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_RCC_GetClockConfig+0x34>)
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	f002 0203 	and.w	r2, r2, #3
 8000f60:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000f68:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000f70:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f7a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_RCC_GetClockConfig+0x38>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	600b      	str	r3, [r1, #0]
 8000f86:	4770      	bx	lr
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f90:	4920      	ldr	r1, [pc, #128]	; (8001014 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000f92:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f94:	688b      	ldr	r3, [r1, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d007      	beq.n	8000fae <HAL_RCC_GetSysClockFreq+0x1e>
 8000f9e:	2b0c      	cmp	r3, #12
 8000fa0:	d020      	beq.n	8000fe4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fa2:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <HAL_RCC_GetSysClockFreq+0x88>)
 8000fa4:	481d      	ldr	r0, [pc, #116]	; (800101c <HAL_RCC_GetSysClockFreq+0x8c>)
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	4610      	movne	r0, r2
 8000fac:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fae:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fb0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fb2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fb4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fb8:	bf14      	ite	ne
 8000fba:	4818      	ldrne	r0, [pc, #96]	; (800101c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fbc:	4816      	ldreq	r0, [pc, #88]	; (8001018 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fbe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fc2:	bf18      	it	ne
 8000fc4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fc6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fca:	fba1 0100 	umull	r0, r1, r1, r0
 8000fce:	f7ff f977 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_RCC_GetSysClockFreq+0x84>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fda:	3301      	adds	r3, #1
 8000fdc:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000fde:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fe2:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fe4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fe6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fe8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fee:	bf14      	ite	ne
 8000ff0:	480a      	ldrne	r0, [pc, #40]	; (800101c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff2:	4809      	ldreq	r0, [pc, #36]	; (8001018 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ff8:	bf18      	it	ne
 8000ffa:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ffc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001000:	fba1 0100 	umull	r0, r1, r1, r0
 8001004:	f7ff f95c 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <HAL_RCC_GetSysClockFreq+0x84>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001010:	e7e5      	b.n	8000fde <HAL_RCC_GetSysClockFreq+0x4e>
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	00f42400 	.word	0x00f42400
 800101c:	007a1200 	.word	0x007a1200

08001020 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001020:	6803      	ldr	r3, [r0, #0]
{
 8001022:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	07df      	lsls	r7, r3, #31
{
 8001028:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	d410      	bmi.n	800104e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	079e      	lsls	r6, r3, #30
 8001030:	d467      	bmi.n	8001102 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	071a      	lsls	r2, r3, #28
 8001036:	f100 80b2 	bmi.w	800119e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	075b      	lsls	r3, r3, #29
 800103e:	f100 80d0 	bmi.w	80011e2 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001042:	69a2      	ldr	r2, [r4, #24]
 8001044:	2a00      	cmp	r2, #0
 8001046:	f040 8139 	bne.w	80012bc <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800104a:	2000      	movs	r0, #0
 800104c:	e01e      	b.n	800108c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800104e:	4b97      	ldr	r3, [pc, #604]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	f002 020c 	and.w	r2, r2, #12
 8001056:	2a04      	cmp	r2, #4
 8001058:	d010      	beq.n	800107c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001060:	2a08      	cmp	r2, #8
 8001062:	d102      	bne.n	800106a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	025d      	lsls	r5, r3, #9
 8001068:	d408      	bmi.n	800107c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106a:	4b90      	ldr	r3, [pc, #576]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001072:	2a0c      	cmp	r2, #12
 8001074:	d10d      	bne.n	8001092 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	0250      	lsls	r0, r2, #9
 800107a:	d50a      	bpl.n	8001092 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0399      	lsls	r1, r3, #14
 8001082:	d5d3      	bpl.n	800102c <HAL_RCC_OscConfig+0xc>
 8001084:	6863      	ldr	r3, [r4, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1d0      	bne.n	800102c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
}
 800108c:	b002      	add	sp, #8
 800108e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001092:	6862      	ldr	r2, [r4, #4]
 8001094:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001098:	d111      	bne.n	80010be <HAL_RCC_OscConfig+0x9e>
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010a2:	f7ff fabb 	bl	800061c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	4d81      	ldr	r5, [pc, #516]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80010a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	682b      	ldr	r3, [r5, #0]
 80010ac:	039a      	lsls	r2, r3, #14
 80010ae:	d4bd      	bmi.n	800102c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fab4 	bl	800061c <HAL_GetTick>
 80010b4:	1b80      	subs	r0, r0, r6
 80010b6:	2864      	cmp	r0, #100	; 0x64
 80010b8:	d9f7      	bls.n	80010aa <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80010ba:	2003      	movs	r0, #3
 80010bc:	e7e6      	b.n	800108c <HAL_RCC_OscConfig+0x6c>
 80010be:	4d7b      	ldr	r5, [pc, #492]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	d107      	bne.n	80010d8 <HAL_RCC_OscConfig+0xb8>
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	602b      	str	r3, [r5, #0]
 80010ce:	682b      	ldr	r3, [r5, #0]
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	602b      	str	r3, [r5, #0]
 80010d6:	e7e4      	b.n	80010a2 <HAL_RCC_OscConfig+0x82>
 80010d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010dc:	602b      	str	r3, [r5, #0]
 80010de:	682b      	ldr	r3, [r5, #0]
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e6:	2a00      	cmp	r2, #0
 80010e8:	d1db      	bne.n	80010a2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80010ea:	f7ff fa97 	bl	800061c <HAL_GetTick>
 80010ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	039b      	lsls	r3, r3, #14
 80010f4:	d59a      	bpl.n	800102c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f6:	f7ff fa91 	bl	800061c <HAL_GetTick>
 80010fa:	1b80      	subs	r0, r0, r6
 80010fc:	2864      	cmp	r0, #100	; 0x64
 80010fe:	d9f7      	bls.n	80010f0 <HAL_RCC_OscConfig+0xd0>
 8001100:	e7db      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001102:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	f012 0f0c 	tst.w	r2, #12
 800110a:	d010      	beq.n	800112e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001112:	2a08      	cmp	r2, #8
 8001114:	d102      	bne.n	800111c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	025f      	lsls	r7, r3, #9
 800111a:	d508      	bpl.n	800112e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111c:	4a63      	ldr	r2, [pc, #396]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 800111e:	6893      	ldr	r3, [r2, #8]
 8001120:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001124:	2b0c      	cmp	r3, #12
 8001126:	d111      	bne.n	800114c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001128:	6853      	ldr	r3, [r2, #4]
 800112a:	025e      	lsls	r6, r3, #9
 800112c:	d40e      	bmi.n	800114c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	0795      	lsls	r5, r2, #30
 8001134:	d502      	bpl.n	800113c <HAL_RCC_OscConfig+0x11c>
 8001136:	68e2      	ldr	r2, [r4, #12]
 8001138:	2a01      	cmp	r2, #1
 800113a:	d1a6      	bne.n	800108a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	6921      	ldr	r1, [r4, #16]
 8001140:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001144:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001148:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	e772      	b.n	8001032 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800114c:	68e2      	ldr	r2, [r4, #12]
 800114e:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <HAL_RCC_OscConfig+0x290>)
 8001150:	b1b2      	cbz	r2, 8001180 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001156:	f7ff fa61 	bl	800061c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	4d54      	ldr	r5, [pc, #336]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800115c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	0798      	lsls	r0, r3, #30
 8001162:	d507      	bpl.n	8001174 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	6922      	ldr	r2, [r4, #16]
 8001168:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800116c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001170:	602b      	str	r3, [r5, #0]
 8001172:	e75e      	b.n	8001032 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fa52 	bl	800061c <HAL_GetTick>
 8001178:	1b80      	subs	r0, r0, r6
 800117a:	2802      	cmp	r0, #2
 800117c:	d9ef      	bls.n	800115e <HAL_RCC_OscConfig+0x13e>
 800117e:	e79c      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001180:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001182:	f7ff fa4b 	bl	800061c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4d49      	ldr	r5, [pc, #292]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001188:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	0799      	lsls	r1, r3, #30
 800118e:	f57f af50 	bpl.w	8001032 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fa43 	bl	800061c <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	2802      	cmp	r0, #2
 800119a:	d9f6      	bls.n	800118a <HAL_RCC_OscConfig+0x16a>
 800119c:	e78d      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800119e:	6962      	ldr	r2, [r4, #20]
 80011a0:	4b44      	ldr	r3, [pc, #272]	; (80012b4 <HAL_RCC_OscConfig+0x294>)
 80011a2:	b17a      	cbz	r2, 80011c4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011a8:	f7ff fa38 	bl	800061c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ac:	4d3f      	ldr	r5, [pc, #252]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80011ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011b2:	079f      	lsls	r7, r3, #30
 80011b4:	f53f af41 	bmi.w	800103a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fa30 	bl	800061c <HAL_GetTick>
 80011bc:	1b80      	subs	r0, r0, r6
 80011be:	2802      	cmp	r0, #2
 80011c0:	d9f6      	bls.n	80011b0 <HAL_RCC_OscConfig+0x190>
 80011c2:	e77a      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80011c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011c6:	f7ff fa29 	bl	800061c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ca:	4d38      	ldr	r5, [pc, #224]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80011cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011d0:	0798      	lsls	r0, r3, #30
 80011d2:	f57f af32 	bpl.w	800103a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff fa21 	bl	800061c <HAL_GetTick>
 80011da:	1b80      	subs	r0, r0, r6
 80011dc:	2802      	cmp	r0, #2
 80011de:	d9f6      	bls.n	80011ce <HAL_RCC_OscConfig+0x1ae>
 80011e0:	e76b      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 80011e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80011ea:	d128      	bne.n	800123e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	9201      	str	r2, [sp, #4]
 80011ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001200:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	4d2d      	ldr	r5, [pc, #180]	; (80012b8 <HAL_RCC_OscConfig+0x298>)
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	05d9      	lsls	r1, r3, #23
 8001208:	d51b      	bpl.n	8001242 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120a:	68a3      	ldr	r3, [r4, #8]
 800120c:	4d27      	ldr	r5, [pc, #156]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 800120e:	2b01      	cmp	r3, #1
 8001210:	d127      	bne.n	8001262 <HAL_RCC_OscConfig+0x242>
 8001212:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800121a:	f7ff f9ff 	bl	800061c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121e:	4d23      	ldr	r5, [pc, #140]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001220:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001226:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001228:	079b      	lsls	r3, r3, #30
 800122a:	d539      	bpl.n	80012a0 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 800122c:	2e00      	cmp	r6, #0
 800122e:	f43f af08 	beq.w	8001042 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 8001234:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	e701      	b.n	8001042 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800123e:	2600      	movs	r6, #0
 8001240:	e7df      	b.n	8001202 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	682b      	ldr	r3, [r5, #0]
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800124a:	f7ff f9e7 	bl	800061c <HAL_GetTick>
 800124e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	05da      	lsls	r2, r3, #23
 8001254:	d4d9      	bmi.n	800120a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001256:	f7ff f9e1 	bl	800061c <HAL_GetTick>
 800125a:	1bc0      	subs	r0, r0, r7
 800125c:	2802      	cmp	r0, #2
 800125e:	d9f7      	bls.n	8001250 <HAL_RCC_OscConfig+0x230>
 8001260:	e72b      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001262:	2b05      	cmp	r3, #5
 8001264:	d104      	bne.n	8001270 <HAL_RCC_OscConfig+0x250>
 8001266:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	672b      	str	r3, [r5, #112]	; 0x70
 800126e:	e7d0      	b.n	8001212 <HAL_RCC_OscConfig+0x1f2>
 8001270:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	672a      	str	r2, [r5, #112]	; 0x70
 8001278:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800127a:	f022 0204 	bic.w	r2, r2, #4
 800127e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1ca      	bne.n	800121a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001284:	f7ff f9ca 	bl	800061c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800128c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001290:	0798      	lsls	r0, r3, #30
 8001292:	d5cb      	bpl.n	800122c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff f9c2 	bl	800061c <HAL_GetTick>
 8001298:	1bc0      	subs	r0, r0, r7
 800129a:	4540      	cmp	r0, r8
 800129c:	d9f7      	bls.n	800128e <HAL_RCC_OscConfig+0x26e>
 800129e:	e70c      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a0:	f7ff f9bc 	bl	800061c <HAL_GetTick>
 80012a4:	1bc0      	subs	r0, r0, r7
 80012a6:	4540      	cmp	r0, r8
 80012a8:	d9bd      	bls.n	8001226 <HAL_RCC_OscConfig+0x206>
 80012aa:	e706      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	42470000 	.word	0x42470000
 80012b4:	42470e80 	.word	0x42470e80
 80012b8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012bc:	4d23      	ldr	r5, [pc, #140]	; (800134c <HAL_RCC_OscConfig+0x32c>)
 80012be:	68ab      	ldr	r3, [r5, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	f43f aee0 	beq.w	800108a <HAL_RCC_OscConfig+0x6a>
 80012ca:	4e21      	ldr	r6, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x330>)
 80012cc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ce:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80012d0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d2:	d12d      	bne.n	8001330 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 80012d4:	f7ff f9a2 	bl	800061c <HAL_GetTick>
 80012d8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012da:	682b      	ldr	r3, [r5, #0]
 80012dc:	0199      	lsls	r1, r3, #6
 80012de:	d421      	bmi.n	8001324 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e0:	6a22      	ldr	r2, [r4, #32]
 80012e2:	69e3      	ldr	r3, [r4, #28]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80012f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fa:	4c14      	ldr	r4, [pc, #80]	; (800134c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fc:	0852      	lsrs	r2, r2, #1
 80012fe:	3a01      	subs	r2, #1
 8001300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001304:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001306:	2301      	movs	r3, #1
 8001308:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800130a:	f7ff f987 	bl	800061c <HAL_GetTick>
 800130e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	019a      	lsls	r2, r3, #6
 8001314:	f53f ae99 	bmi.w	800104a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff f980 	bl	800061c <HAL_GetTick>
 800131c:	1b40      	subs	r0, r0, r5
 800131e:	2802      	cmp	r0, #2
 8001320:	d9f6      	bls.n	8001310 <HAL_RCC_OscConfig+0x2f0>
 8001322:	e6ca      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff f97a 	bl	800061c <HAL_GetTick>
 8001328:	1bc0      	subs	r0, r0, r7
 800132a:	2802      	cmp	r0, #2
 800132c:	d9d5      	bls.n	80012da <HAL_RCC_OscConfig+0x2ba>
 800132e:	e6c4      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001330:	f7ff f974 	bl	800061c <HAL_GetTick>
 8001334:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	f57f ae86 	bpl.w	800104a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133e:	f7ff f96d 	bl	800061c <HAL_GetTick>
 8001342:	1b00      	subs	r0, r0, r4
 8001344:	2802      	cmp	r0, #2
 8001346:	d9f6      	bls.n	8001336 <HAL_RCC_OscConfig+0x316>
 8001348:	e6b7      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	42470060 	.word	0x42470060

08001354 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001354:	6a03      	ldr	r3, [r0, #32]
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800135c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800135e:	6842      	ldr	r2, [r0, #4]
{
 8001360:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001362:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001364:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001366:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800136a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800136c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800136e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001372:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001374:	4c0c      	ldr	r4, [pc, #48]	; (80013a8 <TIM_OC1_SetConfig+0x54>)
 8001376:	42a0      	cmp	r0, r4
 8001378:	d009      	beq.n	800138e <TIM_OC1_SetConfig+0x3a>
 800137a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800137e:	42a0      	cmp	r0, r4
 8001380:	d005      	beq.n	800138e <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001382:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001384:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001386:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001388:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800138a:	6203      	str	r3, [r0, #32]
} 
 800138c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800138e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001390:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001392:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001396:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001398:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800139a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800139e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80013a0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80013a4:	4322      	orrs	r2, r4
 80013a6:	e7ec      	b.n	8001382 <TIM_OC1_SetConfig+0x2e>
 80013a8:	40010000 	.word	0x40010000

080013ac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013ac:	6a03      	ldr	r3, [r0, #32]
 80013ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013b4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80013b6:	6842      	ldr	r2, [r0, #4]
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013ba:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80013be:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013c2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013c4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80013c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013ca:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80013ce:	4c0e      	ldr	r4, [pc, #56]	; (8001408 <TIM_OC3_SetConfig+0x5c>)
 80013d0:	42a0      	cmp	r0, r4
 80013d2:	d009      	beq.n	80013e8 <TIM_OC3_SetConfig+0x3c>
 80013d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013d8:	42a0      	cmp	r0, r4
 80013da:	d005      	beq.n	80013e8 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013dc:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80013de:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80013e0:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80013e2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013e4:	6203      	str	r3, [r0, #32]
}
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013e8:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013ea:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80013ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013f0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80013f4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80013f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013fa:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80013fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001400:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001404:	e7ea      	b.n	80013dc <TIM_OC3_SetConfig+0x30>
 8001406:	bf00      	nop
 8001408:	40010000 	.word	0x40010000

0800140c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800140c:	6a03      	ldr	r3, [r0, #32]
 800140e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001412:	6203      	str	r3, [r0, #32]
{
 8001414:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001416:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001418:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800141a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800141c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800141e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001422:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001426:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001428:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800142c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001430:	4d09      	ldr	r5, [pc, #36]	; (8001458 <TIM_OC4_SetConfig+0x4c>)
 8001432:	42a8      	cmp	r0, r5
 8001434:	d009      	beq.n	800144a <TIM_OC4_SetConfig+0x3e>
 8001436:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800143a:	42a8      	cmp	r0, r5
 800143c:	d005      	beq.n	800144a <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800143e:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001440:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001442:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001444:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001446:	6204      	str	r4, [r0, #32]
}
 8001448:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800144a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800144c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001450:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001454:	e7f3      	b.n	800143e <TIM_OC4_SetConfig+0x32>
 8001456:	bf00      	nop
 8001458:	40010000 	.word	0x40010000

0800145c <HAL_TIM_Base_MspInit>:
 800145c:	4770      	bx	lr

0800145e <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800145e:	6803      	ldr	r3, [r0, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	2000      	movs	r0, #0
 8001472:	4770      	bx	lr

08001474 <HAL_TIM_OC_MspInit>:
 8001474:	4770      	bx	lr

08001476 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001476:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800147a:	2b01      	cmp	r3, #1
{
 800147c:	b570      	push	{r4, r5, r6, lr}
 800147e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001482:	d01c      	beq.n	80014be <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001484:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001488:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800148a:	2201      	movs	r2, #1
 800148c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001490:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001492:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001496:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800149a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800149c:	680a      	ldr	r2, [r1, #0]
 800149e:	2a40      	cmp	r2, #64	; 0x40
 80014a0:	d079      	beq.n	8001596 <HAL_TIM_ConfigClockSource+0x120>
 80014a2:	d819      	bhi.n	80014d8 <HAL_TIM_ConfigClockSource+0x62>
 80014a4:	2a10      	cmp	r2, #16
 80014a6:	f000 8093 	beq.w	80015d0 <HAL_TIM_ConfigClockSource+0x15a>
 80014aa:	d80a      	bhi.n	80014c2 <HAL_TIM_ConfigClockSource+0x4c>
 80014ac:	2a00      	cmp	r2, #0
 80014ae:	f000 8089 	beq.w	80015c4 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80014b8:	2300      	movs	r3, #0
 80014ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80014be:	4618      	mov	r0, r3
}
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80014c2:	2a20      	cmp	r2, #32
 80014c4:	f000 808a 	beq.w	80015dc <HAL_TIM_ConfigClockSource+0x166>
 80014c8:	2a30      	cmp	r2, #48	; 0x30
 80014ca:	d1f2      	bne.n	80014b2 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80014cc:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80014ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80014d2:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80014d6:	e036      	b.n	8001546 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80014d8:	2a70      	cmp	r2, #112	; 0x70
 80014da:	d036      	beq.n	800154a <HAL_TIM_ConfigClockSource+0xd4>
 80014dc:	d81b      	bhi.n	8001516 <HAL_TIM_ConfigClockSource+0xa0>
 80014de:	2a50      	cmp	r2, #80	; 0x50
 80014e0:	d042      	beq.n	8001568 <HAL_TIM_ConfigClockSource+0xf2>
 80014e2:	2a60      	cmp	r2, #96	; 0x60
 80014e4:	d1e5      	bne.n	80014b2 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014e6:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80014e8:	684d      	ldr	r5, [r1, #4]
 80014ea:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014ec:	f024 0410 	bic.w	r4, r4, #16
 80014f0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014f2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80014f4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80014f6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80014fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80014fe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001502:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001506:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001508:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800150a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800150c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001510:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001514:	e017      	b.n	8001546 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001516:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800151a:	d011      	beq.n	8001540 <HAL_TIM_ConfigClockSource+0xca>
 800151c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001520:	d1c7      	bne.n	80014b2 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001522:	688a      	ldr	r2, [r1, #8]
 8001524:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001526:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001528:	68c9      	ldr	r1, [r1, #12]
 800152a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800152c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001530:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001534:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001536:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800153e:	e002      	b.n	8001546 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	e7b3      	b.n	80014b2 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800154a:	688a      	ldr	r2, [r1, #8]
 800154c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800154e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001550:	68c9      	ldr	r1, [r1, #12]
 8001552:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001554:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001558:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800155c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800155e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001560:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001562:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001566:	e7ee      	b.n	8001546 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001568:	684c      	ldr	r4, [r1, #4]
 800156a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800156c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800156e:	6a1d      	ldr	r5, [r3, #32]
 8001570:	f025 0501 	bic.w	r5, r5, #1
 8001574:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001576:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001578:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800157c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001580:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001584:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001588:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800158a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800158c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001590:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001594:	e7d7      	b.n	8001546 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001596:	684c      	ldr	r4, [r1, #4]
 8001598:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800159a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800159c:	6a1d      	ldr	r5, [r3, #32]
 800159e:	f025 0501 	bic.w	r5, r5, #1
 80015a2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80015a4:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015a6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80015ae:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80015b2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80015b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015b6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80015b8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015be:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80015c2:	e7c0      	b.n	8001546 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015c4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015ca:	f042 0207 	orr.w	r2, r2, #7
 80015ce:	e7ba      	b.n	8001546 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015d0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015d6:	f042 0217 	orr.w	r2, r2, #23
 80015da:	e7b4      	b.n	8001546 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015dc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015e2:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80015e6:	e7ae      	b.n	8001546 <HAL_TIM_ConfigClockSource+0xd0>

080015e8 <HAL_TIM_OC_DelayElapsedCallback>:
 80015e8:	4770      	bx	lr

080015ea <HAL_TIM_IC_CaptureCallback>:
 80015ea:	4770      	bx	lr

080015ec <HAL_TIM_PWM_PulseFinishedCallback>:
 80015ec:	4770      	bx	lr

080015ee <HAL_TIM_TriggerCallback>:
 80015ee:	4770      	bx	lr

080015f0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015f0:	6803      	ldr	r3, [r0, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	0791      	lsls	r1, r2, #30
{
 80015f6:	b510      	push	{r4, lr}
 80015f8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015fa:	d50e      	bpl.n	800161a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	0792      	lsls	r2, r2, #30
 8001600:	d50b      	bpl.n	800161a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001602:	f06f 0202 	mvn.w	r2, #2
 8001606:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001608:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800160a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800160c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800160e:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001610:	d077      	beq.n	8001702 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001612:	f7ff ffea 	bl	80015ea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001616:	2300      	movs	r3, #0
 8001618:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	0750      	lsls	r0, r2, #29
 8001620:	d510      	bpl.n	8001644 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	0751      	lsls	r1, r2, #29
 8001626:	d50d      	bpl.n	8001644 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001628:	f06f 0204 	mvn.w	r2, #4
 800162c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800162e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001630:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001632:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001636:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001638:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800163a:	d068      	beq.n	800170e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800163c:	f7ff ffd5 	bl	80015ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001640:	2300      	movs	r3, #0
 8001642:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	0712      	lsls	r2, r2, #28
 800164a:	d50f      	bpl.n	800166c <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	0710      	lsls	r0, r2, #28
 8001650:	d50c      	bpl.n	800166c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001652:	f06f 0208 	mvn.w	r2, #8
 8001656:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001658:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800165a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800165c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800165e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001660:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001662:	d05a      	beq.n	800171a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001664:	f7ff ffc1 	bl	80015ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001668:	2300      	movs	r3, #0
 800166a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	06d2      	lsls	r2, r2, #27
 8001672:	d510      	bpl.n	8001696 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	06d0      	lsls	r0, r2, #27
 8001678:	d50d      	bpl.n	8001696 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800167a:	f06f 0210 	mvn.w	r2, #16
 800167e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001680:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001682:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001684:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001688:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800168a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800168c:	d04b      	beq.n	8001726 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800168e:	f7ff ffac 	bl	80015ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001692:	2300      	movs	r3, #0
 8001694:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	07d1      	lsls	r1, r2, #31
 800169c:	d508      	bpl.n	80016b0 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	07d2      	lsls	r2, r2, #31
 80016a2:	d505      	bpl.n	80016b0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016a4:	f06f 0201 	mvn.w	r2, #1
 80016a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016aa:	4620      	mov	r0, r4
 80016ac:	f002 fc20 	bl	8003ef0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	0610      	lsls	r0, r2, #24
 80016b6:	d508      	bpl.n	80016ca <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	0611      	lsls	r1, r2, #24
 80016bc:	d505      	bpl.n	80016ca <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80016c4:	4620      	mov	r0, r4
 80016c6:	f000 f94e 	bl	8001966 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	0652      	lsls	r2, r2, #25
 80016d0:	d508      	bpl.n	80016e4 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	0650      	lsls	r0, r2, #25
 80016d6:	d505      	bpl.n	80016e4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff ff85 	bl	80015ee <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	0691      	lsls	r1, r2, #26
 80016ea:	d522      	bpl.n	8001732 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	0692      	lsls	r2, r2, #26
 80016f0:	d51f      	bpl.n	8001732 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016f2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016f8:	611a      	str	r2, [r3, #16]
}
 80016fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80016fe:	f000 b931 	b.w	8001964 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001702:	f7ff ff71 	bl	80015e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff ff70 	bl	80015ec <HAL_TIM_PWM_PulseFinishedCallback>
 800170c:	e783      	b.n	8001616 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170e:	f7ff ff6b 	bl	80015e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff ff6a 	bl	80015ec <HAL_TIM_PWM_PulseFinishedCallback>
 8001718:	e792      	b.n	8001640 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171a:	f7ff ff65 	bl	80015e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff ff64 	bl	80015ec <HAL_TIM_PWM_PulseFinishedCallback>
 8001724:	e7a0      	b.n	8001668 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001726:	f7ff ff5f 	bl	80015e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff ff5e 	bl	80015ec <HAL_TIM_PWM_PulseFinishedCallback>
 8001730:	e7af      	b.n	8001692 <HAL_TIM_IRQHandler+0xa2>
 8001732:	bd10      	pop	{r4, pc}

08001734 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001734:	4a2e      	ldr	r2, [pc, #184]	; (80017f0 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001736:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001738:	4290      	cmp	r0, r2
 800173a:	d012      	beq.n	8001762 <TIM_Base_SetConfig+0x2e>
 800173c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001740:	d00f      	beq.n	8001762 <TIM_Base_SetConfig+0x2e>
 8001742:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001746:	4290      	cmp	r0, r2
 8001748:	d00b      	beq.n	8001762 <TIM_Base_SetConfig+0x2e>
 800174a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800174e:	4290      	cmp	r0, r2
 8001750:	d007      	beq.n	8001762 <TIM_Base_SetConfig+0x2e>
 8001752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001756:	4290      	cmp	r0, r2
 8001758:	d003      	beq.n	8001762 <TIM_Base_SetConfig+0x2e>
 800175a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800175e:	4290      	cmp	r0, r2
 8001760:	d11d      	bne.n	800179e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001762:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001768:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800176a:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <TIM_Base_SetConfig+0xbc>)
 800176c:	4290      	cmp	r0, r2
 800176e:	d104      	bne.n	800177a <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001770:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001776:	4313      	orrs	r3, r2
 8001778:	e028      	b.n	80017cc <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800177a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800177e:	d0f7      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 8001780:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <TIM_Base_SetConfig+0xc0>)
 8001782:	4290      	cmp	r0, r2
 8001784:	d0f4      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 8001786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800178a:	4290      	cmp	r0, r2
 800178c:	d0f0      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 800178e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001792:	4290      	cmp	r0, r2
 8001794:	d0ec      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 8001796:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800179a:	4290      	cmp	r0, r2
 800179c:	d0e8      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 800179e:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <TIM_Base_SetConfig+0xc4>)
 80017a0:	4290      	cmp	r0, r2
 80017a2:	d0e5      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 80017a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017a8:	4290      	cmp	r0, r2
 80017aa:	d0e1      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 80017ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b0:	4290      	cmp	r0, r2
 80017b2:	d0dd      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 80017b4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017b8:	4290      	cmp	r0, r2
 80017ba:	d0d9      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 80017bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c0:	4290      	cmp	r0, r2
 80017c2:	d0d5      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
 80017c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c8:	4290      	cmp	r0, r2
 80017ca:	d0d1      	beq.n	8001770 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80017cc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ce:	688b      	ldr	r3, [r1, #8]
 80017d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017d2:	680b      	ldr	r3, [r1, #0]
 80017d4:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <TIM_Base_SetConfig+0xbc>)
 80017d8:	4298      	cmp	r0, r3
 80017da:	d006      	beq.n	80017ea <TIM_Base_SetConfig+0xb6>
 80017dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017e0:	4298      	cmp	r0, r3
 80017e2:	d002      	beq.n	80017ea <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80017e4:	2301      	movs	r3, #1
 80017e6:	6143      	str	r3, [r0, #20]
}
 80017e8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80017ea:	690b      	ldr	r3, [r1, #16]
 80017ec:	6303      	str	r3, [r0, #48]	; 0x30
 80017ee:	e7f9      	b.n	80017e4 <TIM_Base_SetConfig+0xb0>
 80017f0:	40010000 	.word	0x40010000
 80017f4:	40000400 	.word	0x40000400
 80017f8:	40014000 	.word	0x40014000

080017fc <HAL_TIM_Base_Init>:
{ 
 80017fc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017fe:	4604      	mov	r4, r0
 8001800:	b1a0      	cbz	r0, 800182c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001802:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001806:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800180a:	b91b      	cbnz	r3, 8001814 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800180c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001810:	f7ff fe24 	bl	800145c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001814:	2302      	movs	r3, #2
 8001816:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800181a:	6820      	ldr	r0, [r4, #0]
 800181c:	1d21      	adds	r1, r4, #4
 800181e:	f7ff ff89 	bl	8001734 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001822:	2301      	movs	r3, #1
 8001824:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001828:	2000      	movs	r0, #0
 800182a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
}
 800182e:	bd10      	pop	{r4, pc}

08001830 <HAL_TIM_OC_Init>:
{
 8001830:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001832:	4604      	mov	r4, r0
 8001834:	b1a0      	cbz	r0, 8001860 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001836:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800183a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800183e:	b91b      	cbnz	r3, 8001848 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001840:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8001844:	f7ff fe16 	bl	8001474 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001848:	2302      	movs	r3, #2
 800184a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800184e:	6820      	ldr	r0, [r4, #0]
 8001850:	1d21      	adds	r1, r4, #4
 8001852:	f7ff ff6f 	bl	8001734 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001856:	2301      	movs	r3, #1
 8001858:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800185c:	2000      	movs	r0, #0
 800185e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001860:	2001      	movs	r0, #1
}
 8001862:	bd10      	pop	{r4, pc}

08001864 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001864:	6a03      	ldr	r3, [r0, #32]
 8001866:	f023 0310 	bic.w	r3, r3, #16
 800186a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800186c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800186e:	6842      	ldr	r2, [r0, #4]
{
 8001870:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001872:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001874:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001876:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800187a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800187e:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001880:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001884:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001888:	4c0d      	ldr	r4, [pc, #52]	; (80018c0 <TIM_OC2_SetConfig+0x5c>)
 800188a:	42a0      	cmp	r0, r4
 800188c:	d009      	beq.n	80018a2 <TIM_OC2_SetConfig+0x3e>
 800188e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001892:	42a0      	cmp	r0, r4
 8001894:	d005      	beq.n	80018a2 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001896:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001898:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800189a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800189c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800189e:	6203      	str	r3, [r0, #32]
}
 80018a0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80018a2:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80018a4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80018a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80018aa:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80018ae:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80018b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80018b4:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80018b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80018ba:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80018be:	e7ea      	b.n	8001896 <TIM_OC2_SetConfig+0x32>
 80018c0:	40010000 	.word	0x40010000

080018c4 <HAL_TIM_OC_ConfigChannel>:
{
 80018c4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 80018c6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018ca:	2b01      	cmp	r3, #1
{
 80018cc:	4604      	mov	r4, r0
 80018ce:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 80018d2:	d018      	beq.n	8001906 <HAL_TIM_OC_ConfigChannel+0x42>
 80018d4:	2301      	movs	r3, #1
 80018d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80018da:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 80018de:	461d      	mov	r5, r3
  switch (Channel)
 80018e0:	2a0c      	cmp	r2, #12
 80018e2:	d80b      	bhi.n	80018fc <HAL_TIM_OC_ConfigChannel+0x38>
 80018e4:	e8df f002 	tbb	[pc, r2]
 80018e8:	0a0a0a07 	.word	0x0a0a0a07
 80018ec:	0a0a0a10 	.word	0x0a0a0a10
 80018f0:	0a0a0a14 	.word	0x0a0a0a14
 80018f4:	18          	.byte	0x18
 80018f5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	f7ff fd2c 	bl	8001354 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 80018fc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80018fe:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 8001902:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001906:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001908:	6820      	ldr	r0, [r4, #0]
 800190a:	f7ff ffab 	bl	8001864 <TIM_OC2_SetConfig>
    break;
 800190e:	e7f5      	b.n	80018fc <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001910:	6820      	ldr	r0, [r4, #0]
 8001912:	f7ff fd4b 	bl	80013ac <TIM_OC3_SetConfig>
    break;
 8001916:	e7f1      	b.n	80018fc <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001918:	6820      	ldr	r0, [r4, #0]
 800191a:	f7ff fd77 	bl	800140c <TIM_OC4_SetConfig>
    break;
 800191e:	e7ed      	b.n	80018fc <HAL_TIM_OC_ConfigChannel+0x38>

08001920 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001920:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001924:	2b01      	cmp	r3, #1
{
 8001926:	b510      	push	{r4, lr}
 8001928:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800192c:	d018      	beq.n	8001960 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800192e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001932:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001934:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001936:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001938:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800193a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800193e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4322      	orrs	r2, r4
 8001944:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800194c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	430a      	orrs	r2, r1
 8001952:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001954:	2301      	movs	r3, #1
 8001956:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800195a:	2300      	movs	r3, #0
 800195c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001960:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001962:	bd10      	pop	{r4, pc}

08001964 <HAL_TIMEx_CommutationCallback>:
 8001964:	4770      	bx	lr

08001966 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001966:	4770      	bx	lr

08001968 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001968:	6803      	ldr	r3, [r0, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001970:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800197a:	2320      	movs	r3, #32
 800197c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001980:	4770      	bx	lr
	...

08001984 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001988:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800198a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 800198c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800198e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001990:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001994:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001996:	6133      	str	r3, [r6, #16]
{
 8001998:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800199a:	6883      	ldr	r3, [r0, #8]
 800199c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800199e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019a0:	4303      	orrs	r3, r0
 80019a2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019a4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019a8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019aa:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019ae:	430b      	orrs	r3, r1
 80019b0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80019b2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80019b4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80019b6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80019b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80019bc:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019be:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80019c2:	6173      	str	r3, [r6, #20]
 80019c4:	4b7a      	ldr	r3, [pc, #488]	; (8001bb0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019c6:	d17c      	bne.n	8001ac2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80019c8:	429e      	cmp	r6, r3
 80019ca:	d003      	beq.n	80019d4 <UART_SetConfig+0x50>
 80019cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d0:	429e      	cmp	r6, r3
 80019d2:	d144      	bne.n	8001a5e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80019d4:	f7ff faae 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 80019d8:	2519      	movs	r5, #25
 80019da:	fb05 f300 	mul.w	r3, r5, r0
 80019de:	6860      	ldr	r0, [r4, #4]
 80019e0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019e4:	0040      	lsls	r0, r0, #1
 80019e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80019ea:	fbb3 f3f9 	udiv	r3, r3, r9
 80019ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80019f2:	f7ff fa9f 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	4368      	muls	r0, r5
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a00:	f7ff fa98 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001a04:	6863      	ldr	r3, [r4, #4]
 8001a06:	4368      	muls	r0, r5
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a12:	fb09 7313 	mls	r3, r9, r3, r7
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	3332      	adds	r3, #50	; 0x32
 8001a1a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001a24:	f7ff fa86 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001a28:	6862      	ldr	r2, [r4, #4]
 8001a2a:	4368      	muls	r0, r5
 8001a2c:	0052      	lsls	r2, r2, #1
 8001a2e:	fbb0 faf2 	udiv	sl, r0, r2
 8001a32:	f7ff fa7f 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a36:	6863      	ldr	r3, [r4, #4]
 8001a38:	4368      	muls	r0, r5
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a40:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a44:	fb09 a313 	mls	r3, r9, r3, sl
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	3332      	adds	r3, #50	; 0x32
 8001a4c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a56:	443b      	add	r3, r7
 8001a58:	60b3      	str	r3, [r6, #8]
 8001a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a5e:	f7ff fa59 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001a62:	2519      	movs	r5, #25
 8001a64:	fb05 f300 	mul.w	r3, r5, r0
 8001a68:	6860      	ldr	r0, [r4, #4]
 8001a6a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a6e:	0040      	lsls	r0, r0, #1
 8001a70:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a74:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a7c:	f7ff fa4a 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001a80:	6863      	ldr	r3, [r4, #4]
 8001a82:	4368      	muls	r0, r5
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a8a:	f7ff fa43 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001a8e:	6863      	ldr	r3, [r4, #4]
 8001a90:	4368      	muls	r0, r5
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a98:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a9c:	fb09 7313 	mls	r3, r9, r3, r7
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	3332      	adds	r3, #50	; 0x32
 8001aa4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001aae:	f7ff fa31 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001ab2:	6862      	ldr	r2, [r4, #4]
 8001ab4:	4368      	muls	r0, r5
 8001ab6:	0052      	lsls	r2, r2, #1
 8001ab8:	fbb0 faf2 	udiv	sl, r0, r2
 8001abc:	f7ff fa2a 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001ac0:	e7b9      	b.n	8001a36 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ac2:	429e      	cmp	r6, r3
 8001ac4:	d002      	beq.n	8001acc <UART_SetConfig+0x148>
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <UART_SetConfig+0x230>)
 8001ac8:	429e      	cmp	r6, r3
 8001aca:	d140      	bne.n	8001b4e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001acc:	f7ff fa32 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001ad0:	6867      	ldr	r7, [r4, #4]
 8001ad2:	2519      	movs	r5, #25
 8001ad4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ad8:	fb05 f300 	mul.w	r3, r5, r0
 8001adc:	00bf      	lsls	r7, r7, #2
 8001ade:	fbb3 f3f7 	udiv	r3, r3, r7
 8001ae2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ae6:	011f      	lsls	r7, r3, #4
 8001ae8:	f7ff fa24 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001aec:	6863      	ldr	r3, [r4, #4]
 8001aee:	4368      	muls	r0, r5
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	fbb0 f8f3 	udiv	r8, r0, r3
 8001af6:	f7ff fa1d 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001afa:	6863      	ldr	r3, [r4, #4]
 8001afc:	4368      	muls	r0, r5
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b04:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b08:	fb09 8313 	mls	r3, r9, r3, r8
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	3332      	adds	r3, #50	; 0x32
 8001b10:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b14:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001b18:	f7ff fa0c 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001b1c:	6862      	ldr	r2, [r4, #4]
 8001b1e:	4368      	muls	r0, r5
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	fbb0 faf2 	udiv	sl, r0, r2
 8001b26:	f7ff fa05 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b2a:	6863      	ldr	r3, [r4, #4]
 8001b2c:	4368      	muls	r0, r5
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b34:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b38:	fb09 a313 	mls	r3, r9, r3, sl
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	3332      	adds	r3, #50	; 0x32
 8001b40:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	ea43 0308 	orr.w	r3, r3, r8
 8001b4c:	e783      	b.n	8001a56 <UART_SetConfig+0xd2>
 8001b4e:	f7ff f9e1 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001b52:	6867      	ldr	r7, [r4, #4]
 8001b54:	2519      	movs	r5, #25
 8001b56:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b5a:	fb05 f300 	mul.w	r3, r5, r0
 8001b5e:	00bf      	lsls	r7, r7, #2
 8001b60:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b64:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b68:	011f      	lsls	r7, r3, #4
 8001b6a:	f7ff f9d3 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	4368      	muls	r0, r5
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b78:	f7ff f9cc 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001b7c:	6863      	ldr	r3, [r4, #4]
 8001b7e:	4368      	muls	r0, r5
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b8a:	fb09 8313 	mls	r3, r9, r3, r8
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	3332      	adds	r3, #50	; 0x32
 8001b92:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b96:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001b9a:	f7ff f9bb 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001b9e:	6862      	ldr	r2, [r4, #4]
 8001ba0:	4368      	muls	r0, r5
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	fbb0 faf2 	udiv	sl, r0, r2
 8001ba8:	f7ff f9b4 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001bac:	e7bd      	b.n	8001b2a <UART_SetConfig+0x1a6>
 8001bae:	bf00      	nop
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40011400 	.word	0x40011400

08001bb8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	4604      	mov	r4, r0
 8001bbc:	460e      	mov	r6, r1
 8001bbe:	4617      	mov	r7, r2
 8001bc0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001bc2:	6821      	ldr	r1, [r4, #0]
 8001bc4:	680b      	ldr	r3, [r1, #0]
 8001bc6:	ea36 0303 	bics.w	r3, r6, r3
 8001bca:	d101      	bne.n	8001bd0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001bcc:	2000      	movs	r0, #0
}
 8001bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001bd0:	1c6b      	adds	r3, r5, #1
 8001bd2:	d0f7      	beq.n	8001bc4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001bd4:	b995      	cbnz	r5, 8001bfc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bde:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001be8:	2320      	movs	r3, #32
 8001bea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001bee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001bfc:	f7fe fd0e 	bl	800061c <HAL_GetTick>
 8001c00:	1bc0      	subs	r0, r0, r7
 8001c02:	4285      	cmp	r5, r0
 8001c04:	d2dd      	bcs.n	8001bc2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001c06:	e7e6      	b.n	8001bd6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001c08 <HAL_UART_Init>:
{
 8001c08:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	b340      	cbz	r0, 8001c60 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c0e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c16:	b91b      	cbnz	r3, 8001c20 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c18:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001c1c:	f002 f9b2 	bl	8003f84 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001c20:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c22:	2324      	movs	r3, #36	; 0x24
 8001c24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c28:	68d3      	ldr	r3, [r2, #12]
 8001c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c2e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff fea7 	bl	8001984 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c46:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c4e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c50:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001c52:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c54:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001c56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001c5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001c5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c60:	2001      	movs	r0, #1
}
 8001c62:	bd10      	pop	{r4, pc}

08001c64 <HAL_UART_Transmit>:
{
 8001c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c68:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001c6a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c6e:	2b20      	cmp	r3, #32
{
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001c76:	d14f      	bne.n	8001d18 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001c78:	2900      	cmp	r1, #0
 8001c7a:	d04a      	beq.n	8001d12 <HAL_UART_Transmit+0xae>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d048      	beq.n	8001d12 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001c80:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d047      	beq.n	8001d18 <HAL_UART_Transmit+0xb4>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c92:	2321      	movs	r3, #33	; 0x21
 8001c94:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001c98:	f7fe fcc0 	bl	800061c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001c9c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001ca0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001ca2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001ca6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b96b      	cbnz	r3, 8001cc8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	4632      	mov	r2, r6
 8001cb0:	2140      	movs	r1, #64	; 0x40
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff ff80 	bl	8001bb8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001cb8:	b9b0      	cbnz	r0, 8001ce8 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001cc0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001cc8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cd0:	68a3      	ldr	r3, [r4, #8]
 8001cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cd6:	4632      	mov	r2, r6
 8001cd8:	463b      	mov	r3, r7
 8001cda:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001cde:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ce0:	d10e      	bne.n	8001d00 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce2:	f7ff ff69 	bl	8001bb8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ce6:	b110      	cbz	r0, 8001cee <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001cee:	882b      	ldrh	r3, [r5, #0]
 8001cf0:	6822      	ldr	r2, [r4, #0]
 8001cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf6:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001cf8:	6923      	ldr	r3, [r4, #16]
 8001cfa:	b943      	cbnz	r3, 8001d0e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001cfc:	3502      	adds	r5, #2
 8001cfe:	e7d2      	b.n	8001ca6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d00:	f7ff ff5a 	bl	8001bb8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d1ef      	bne.n	8001ce8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	782a      	ldrb	r2, [r5, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	3501      	adds	r5, #1
 8001d10:	e7c9      	b.n	8001ca6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001d12:	2001      	movs	r0, #1
 8001d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001d18:	2002      	movs	r0, #2
}
 8001d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d1e <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8001d1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	d118      	bne.n	8001d58 <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL ) || (Size == 0)) 
 8001d26:	b1a9      	cbz	r1, 8001d54 <HAL_UART_Transmit_IT+0x36>
 8001d28:	b1a2      	cbz	r2, 8001d54 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001d2a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d012      	beq.n	8001d58 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001d32:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 8001d34:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001d36:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d38:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d3a:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d3e:	2221      	movs	r2, #33	; 0x21
 8001d40:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d44:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8001d46:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d4e:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001d50:	4618      	mov	r0, r3
 8001d52:	4770      	bx	lr
      return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
 8001d56:	4770      	bx	lr
    return HAL_BUSY;   
 8001d58:	2002      	movs	r0, #2
}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d5c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d11c      	bne.n	8001d9e <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 8001d64:	b1c9      	cbz	r1, 8001d9a <HAL_UART_Receive_IT+0x3e>
 8001d66:	b1c2      	cbz	r2, 8001d9a <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8001d68:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d016      	beq.n	8001d9e <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 8001d70:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001d72:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d74:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d76:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d78:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d7a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d7e:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001d80:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d82:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 8001d84:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d88:	f041 0101 	orr.w	r1, r1, #1
 8001d8c:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001d8e:	68d1      	ldr	r1, [r2, #12]
 8001d90:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001d94:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001d96:	4618      	mov	r0, r3
 8001d98:	4770      	bx	lr
      return HAL_ERROR;
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	4770      	bx	lr
    return HAL_BUSY; 
 8001d9e:	2002      	movs	r0, #2
}
 8001da0:	4770      	bx	lr

08001da2 <HAL_UART_TxCpltCallback>:
 8001da2:	4770      	bx	lr

08001da4 <HAL_UART_RxCpltCallback>:
 8001da4:	4770      	bx	lr

08001da6 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001da6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001daa:	2b22      	cmp	r3, #34	; 0x22
{
 8001dac:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001dae:	d132      	bne.n	8001e16 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001db0:	6883      	ldr	r3, [r0, #8]
 8001db2:	6901      	ldr	r1, [r0, #16]
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001dbc:	d11f      	bne.n	8001dfe <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001dbe:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001dc0:	b9c9      	cbnz	r1, 8001df6 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001dc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dc6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001dca:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001dcc:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001dce:	3c01      	subs	r4, #1
 8001dd0:	b2a4      	uxth	r4, r4
 8001dd2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001dd4:	b96c      	cbnz	r4, 8001df2 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dd6:	6803      	ldr	r3, [r0, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001dde:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001de8:	2320      	movs	r3, #32
 8001dea:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001dee:	f7ff ffd9 	bl	8001da4 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001df2:	2000      	movs	r0, #0
}
 8001df4:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f823 2b01 	strh.w	r2, [r3], #1
 8001dfc:	e7e5      	b.n	8001dca <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001dfe:	b921      	cbnz	r1, 8001e0a <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e00:	1c59      	adds	r1, r3, #1
 8001e02:	6852      	ldr	r2, [r2, #4]
 8001e04:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e7e0      	b.n	8001dcc <UART_Receive_IT+0x26>
 8001e0a:	6852      	ldr	r2, [r2, #4]
 8001e0c:	1c59      	adds	r1, r3, #1
 8001e0e:	6281      	str	r1, [r0, #40]	; 0x28
 8001e10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e14:	e7f7      	b.n	8001e06 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001e16:	2002      	movs	r0, #2
 8001e18:	bd10      	pop	{r4, pc}

08001e1a <HAL_UART_ErrorCallback>:
 8001e1a:	4770      	bx	lr

08001e1c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e1c:	6803      	ldr	r3, [r0, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e20:	68d9      	ldr	r1, [r3, #12]
{
 8001e22:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001e24:	0716      	lsls	r6, r2, #28
{
 8001e26:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e28:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001e2a:	d107      	bne.n	8001e3c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e2c:	0696      	lsls	r6, r2, #26
 8001e2e:	d55a      	bpl.n	8001ee6 <HAL_UART_IRQHandler+0xca>
 8001e30:	068d      	lsls	r5, r1, #26
 8001e32:	d558      	bpl.n	8001ee6 <HAL_UART_IRQHandler+0xca>
}
 8001e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001e38:	f7ff bfb5 	b.w	8001da6 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e3c:	f015 0501 	ands.w	r5, r5, #1
 8001e40:	d102      	bne.n	8001e48 <HAL_UART_IRQHandler+0x2c>
 8001e42:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001e46:	d04e      	beq.n	8001ee6 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e48:	07d3      	lsls	r3, r2, #31
 8001e4a:	d505      	bpl.n	8001e58 <HAL_UART_IRQHandler+0x3c>
 8001e4c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e4e:	bf42      	ittt	mi
 8001e50:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001e52:	f043 0301 	orrmi.w	r3, r3, #1
 8001e56:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e58:	0750      	lsls	r0, r2, #29
 8001e5a:	d504      	bpl.n	8001e66 <HAL_UART_IRQHandler+0x4a>
 8001e5c:	b11d      	cbz	r5, 8001e66 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e66:	0793      	lsls	r3, r2, #30
 8001e68:	d504      	bpl.n	8001e74 <HAL_UART_IRQHandler+0x58>
 8001e6a:	b11d      	cbz	r5, 8001e74 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e74:	0716      	lsls	r6, r2, #28
 8001e76:	d504      	bpl.n	8001e82 <HAL_UART_IRQHandler+0x66>
 8001e78:	b11d      	cbz	r5, 8001e82 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d066      	beq.n	8001f56 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e88:	0695      	lsls	r5, r2, #26
 8001e8a:	d504      	bpl.n	8001e96 <HAL_UART_IRQHandler+0x7a>
 8001e8c:	0688      	lsls	r0, r1, #26
 8001e8e:	d502      	bpl.n	8001e96 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7ff ff88 	bl	8001da6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e9c:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001e9e:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ea0:	d402      	bmi.n	8001ea8 <HAL_UART_IRQHandler+0x8c>
 8001ea2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001ea6:	d01a      	beq.n	8001ede <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001ea8:	f7ff fd5e 	bl	8001968 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	0652      	lsls	r2, r2, #25
 8001eb2:	d510      	bpl.n	8001ed6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eb4:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001eb6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ebc:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001ebe:	b150      	cbz	r0, 8001ed6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_UART_IRQHandler+0x13c>)
 8001ec2:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ec4:	f7fe fe90 	bl	8000be8 <HAL_DMA_Abort_IT>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d044      	beq.n	8001f56 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ecc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ed2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ed4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f7ff ff9f 	bl	8001e1a <HAL_UART_ErrorCallback>
 8001edc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001ede:	f7ff ff9c 	bl	8001e1a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee2:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ee6:	0616      	lsls	r6, r2, #24
 8001ee8:	d527      	bpl.n	8001f3a <HAL_UART_IRQHandler+0x11e>
 8001eea:	060d      	lsls	r5, r1, #24
 8001eec:	d525      	bpl.n	8001f3a <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001eee:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001ef2:	2a21      	cmp	r2, #33	; 0x21
 8001ef4:	d12f      	bne.n	8001f56 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ef6:	68a2      	ldr	r2, [r4, #8]
 8001ef8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001efc:	6a22      	ldr	r2, [r4, #32]
 8001efe:	d117      	bne.n	8001f30 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f00:	8811      	ldrh	r1, [r2, #0]
 8001f02:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f06:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f08:	6921      	ldr	r1, [r4, #16]
 8001f0a:	b979      	cbnz	r1, 8001f2c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001f0c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001f0e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001f10:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001f12:	3a01      	subs	r2, #1
 8001f14:	b292      	uxth	r2, r2
 8001f16:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001f18:	b9ea      	cbnz	r2, 8001f56 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f20:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001f2c:	3201      	adds	r2, #1
 8001f2e:	e7ee      	b.n	8001f0e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f30:	1c51      	adds	r1, r2, #1
 8001f32:	6221      	str	r1, [r4, #32]
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	e7ea      	b.n	8001f10 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f3a:	0650      	lsls	r0, r2, #25
 8001f3c:	d50b      	bpl.n	8001f56 <HAL_UART_IRQHandler+0x13a>
 8001f3e:	064a      	lsls	r2, r1, #25
 8001f40:	d509      	bpl.n	8001f56 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f48:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001f50:	4620      	mov	r0, r4
 8001f52:	f7ff ff26 	bl	8001da2 <HAL_UART_TxCpltCallback>
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
 8001f58:	08001f5d 	.word	0x08001f5d

08001f5c <UART_DMAAbortOnError>:
{
 8001f5c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001f64:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001f66:	f7ff ff58 	bl	8001e1a <HAL_UART_ErrorCallback>
 8001f6a:	bd08      	pop	{r3, pc}

08001f6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f6c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001f6e:	f000 feff 	bl	8002d70 <vTaskStartScheduler>
  
  return osOK;
}
 8001f72:	2000      	movs	r0, #0
 8001f74:	bd08      	pop	{r3, pc}

08001f76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f76:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f78:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001f7c:	8a02      	ldrh	r2, [r0, #16]
{
 8001f7e:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f80:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001f84:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001f86:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001f88:	bf14      	ite	ne
 8001f8a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f8c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f8e:	a803      	add	r0, sp, #12
 8001f90:	9001      	str	r0, [sp, #4]
 8001f92:	9400      	str	r4, [sp, #0]
 8001f94:	4628      	mov	r0, r5
 8001f96:	f000 fd99 	bl	8002acc <xTaskCreate>
 8001f9a:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f9c:	bf0c      	ite	eq
 8001f9e:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001fa0:	2000      	movne	r0, #0
}
 8001fa2:	b005      	add	sp, #20
 8001fa4:	bd30      	pop	{r4, r5, pc}

08001fa6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001fa6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	bf08      	it	eq
 8001fac:	2001      	moveq	r0, #1
 8001fae:	f001 f835 	bl	800301c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	bd08      	pop	{r3, pc}

08001fb6 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f000 bc28 	b.w	800280c <xQueueCreateMutex>

08001fbc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fbc:	f100 0308 	add.w	r3, r0, #8
 8001fc0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fc2:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fc6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fc8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fca:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fcc:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fce:	6003      	str	r3, [r0, #0]
 8001fd0:	4770      	bx	lr

08001fd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	6103      	str	r3, [r0, #16]
 8001fd6:	4770      	bx	lr

08001fd8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fd8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fda:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fe4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001fe6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fe8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001fea:	3301      	adds	r3, #1
 8001fec:	6003      	str	r3, [r0, #0]
 8001fee:	4770      	bx	lr

08001ff0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ff0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ff2:	1c53      	adds	r3, r2, #1
{
 8001ff4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001ff6:	d10a      	bne.n	800200e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ff8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ffe:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002000:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002002:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002004:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002006:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002008:	3301      	adds	r3, #1
 800200a:	6003      	str	r3, [r0, #0]
 800200c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800200e:	f100 0308 	add.w	r3, r0, #8
 8002012:	685c      	ldr	r4, [r3, #4]
 8002014:	6825      	ldr	r5, [r4, #0]
 8002016:	42aa      	cmp	r2, r5
 8002018:	d3ef      	bcc.n	8001ffa <vListInsert+0xa>
 800201a:	4623      	mov	r3, r4
 800201c:	e7f9      	b.n	8002012 <vListInsert+0x22>

0800201e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800201e:	6841      	ldr	r1, [r0, #4]
 8002020:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002022:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002024:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002026:	6882      	ldr	r2, [r0, #8]
 8002028:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800202e:	bf08      	it	eq
 8002030:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002032:	2200      	movs	r2, #0
 8002034:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	3801      	subs	r0, #1
 800203a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800203c:	4770      	bx	lr
	...

08002040 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <prvTaskExitError+0x2c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	d008      	beq.n	800205a <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	e7fe      	b.n	8002058 <prvTaskExitError+0x18>
 800205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	e7fe      	b.n	800206a <prvTaskExitError+0x2a>
 800206c:	20000004 	.word	0x20000004

08002070 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002070:	4806      	ldr	r0, [pc, #24]	; (800208c <prvPortStartFirstTask+0x1c>)
 8002072:	6800      	ldr	r0, [r0, #0]
 8002074:	6800      	ldr	r0, [r0, #0]
 8002076:	f380 8808 	msr	MSP, r0
 800207a:	b662      	cpsie	i
 800207c:	b661      	cpsie	f
 800207e:	f3bf 8f4f 	dsb	sy
 8002082:	f3bf 8f6f 	isb	sy
 8002086:	df00      	svc	0
 8002088:	bf00      	nop
 800208a:	0000      	.short	0x0000
 800208c:	e000ed08 	.word	0xe000ed08

08002090 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002090:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80020a0 <vPortEnableVFP+0x10>
 8002094:	6801      	ldr	r1, [r0, #0]
 8002096:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800209a:	6001      	str	r1, [r0, #0]
 800209c:	4770      	bx	lr
 800209e:	0000      	.short	0x0000
 80020a0:	e000ed88 	.word	0xe000ed88

080020a4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80020a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <pxPortInitialiseStack+0x28>)
 80020ae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80020b2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80020b6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80020ba:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80020be:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80020c2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80020c6:	3844      	subs	r0, #68	; 0x44
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	08002041 	.word	0x08002041

080020d0 <SVC_Handler>:
	__asm volatile (
 80020d0:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <pxCurrentTCBConst2>)
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	6808      	ldr	r0, [r1, #0]
 80020d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020da:	f380 8809 	msr	PSP, r0
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f04f 0000 	mov.w	r0, #0
 80020e6:	f380 8811 	msr	BASEPRI, r0
 80020ea:	4770      	bx	lr
 80020ec:	f3af 8000 	nop.w

080020f0 <pxCurrentTCBConst2>:
 80020f0:	20003cac 	.word	0x20003cac

080020f4 <vPortEnterCritical>:
 80020f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f8:	f383 8811 	msr	BASEPRI, r3
 80020fc:	f3bf 8f6f 	isb	sy
 8002100:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <vPortEnterCritical+0x3c>)
 8002106:	6813      	ldr	r3, [r2, #0]
 8002108:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800210a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800210c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800210e:	d10d      	bne.n	800212c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <vPortEnterCritical+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002118:	d008      	beq.n	800212c <vPortEnterCritical+0x38>
 800211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	e7fe      	b.n	800212a <vPortEnterCritical+0x36>
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000004 	.word	0x20000004
 8002134:	e000ed04 	.word	0xe000ed04

08002138 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002138:	4a08      	ldr	r2, [pc, #32]	; (800215c <vPortExitCritical+0x24>)
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	b943      	cbnz	r3, 8002150 <vPortExitCritical+0x18>
 800213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	e7fe      	b.n	800214e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002150:	3b01      	subs	r3, #1
 8002152:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002154:	b90b      	cbnz	r3, 800215a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	4770      	bx	lr
 800215c:	20000004 	.word	0x20000004

08002160 <PendSV_Handler>:
	__asm volatile
 8002160:	f3ef 8009 	mrs	r0, PSP
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <pxCurrentTCBConst>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	f01e 0f10 	tst.w	lr, #16
 8002170:	bf08      	it	eq
 8002172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217a:	6010      	str	r0, [r2, #0]
 800217c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002184:	f380 8811 	msr	BASEPRI, r0
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f000 ffa2 	bl	80030d8 <vTaskSwitchContext>
 8002194:	f04f 0000 	mov.w	r0, #0
 8002198:	f380 8811 	msr	BASEPRI, r0
 800219c:	bc08      	pop	{r3}
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	6808      	ldr	r0, [r1, #0]
 80021a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a6:	f01e 0f10 	tst.w	lr, #16
 80021aa:	bf08      	it	eq
 80021ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80021b0:	f380 8809 	msr	PSP, r0
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	f3af 8000 	nop.w

080021c0 <pxCurrentTCBConst>:
 80021c0:	20003cac 	.word	0x20003cac

080021c4 <SysTick_Handler>:
{
 80021c4:	b508      	push	{r3, lr}
	__asm volatile
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80021d6:	f000 fe17 	bl	8002e08 <xTaskIncrementTick>
 80021da:	b118      	cbz	r0, 80021e4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <SysTick_Handler+0x28>)
 80021de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80021e4:	2300      	movs	r3, #0
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	bd08      	pop	{r3, pc}
 80021ec:	e000ed04 	.word	0xe000ed04

080021f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <vPortSetupTimerInterrupt+0x1c>)
 80021f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <vPortSetupTimerInterrupt+0x20>)
 80021fe:	3b01      	subs	r3, #1
 8002200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <vPortSetupTimerInterrupt+0x24>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000008 	.word	0x20000008
 8002210:	e000e014 	.word	0xe000e014
 8002214:	e000e010 	.word	0xe000e010

08002218 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002218:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <xPortStartScheduler+0xc8>)
 800221a:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <xPortStartScheduler+0xcc>)
{
 800221c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	4291      	cmp	r1, r2
 8002222:	d108      	bne.n	8002236 <xPortStartScheduler+0x1e>
	__asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	e7fe      	b.n	8002234 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <xPortStartScheduler+0xd0>)
 800223a:	429a      	cmp	r2, r3
 800223c:	d108      	bne.n	8002250 <xPortStartScheduler+0x38>
 800223e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	e7fe      	b.n	800224e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002250:	4b26      	ldr	r3, [pc, #152]	; (80022ec <xPortStartScheduler+0xd4>)
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800225c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002266:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800226a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800226e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <xPortStartScheduler+0xdc>)
 8002272:	2207      	movs	r2, #7
 8002274:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002276:	2100      	movs	r1, #0
 8002278:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800227c:	0600      	lsls	r0, r0, #24
 800227e:	f102 34ff 	add.w	r4, r2, #4294967295
 8002282:	d423      	bmi.n	80022cc <xPortStartScheduler+0xb4>
 8002284:	b101      	cbz	r1, 8002288 <xPortStartScheduler+0x70>
 8002286:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800228c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002290:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002292:	9b01      	ldr	r3, [sp, #4]
 8002294:	4a15      	ldr	r2, [pc, #84]	; (80022ec <xPortStartScheduler+0xd4>)
 8002296:	b2db      	uxtb	r3, r3
 8002298:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <xPortStartScheduler+0xe0>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80022a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80022aa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80022ac:	f7ff ffa0 	bl	80021f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <xPortStartScheduler+0xe4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80022b6:	f7ff feeb 	bl	8002090 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80022ba:	4a11      	ldr	r2, [pc, #68]	; (8002300 <xPortStartScheduler+0xe8>)
 80022bc:	6813      	ldr	r3, [r2, #0]
 80022be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80022c2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80022c4:	f7ff fed4 	bl	8002070 <prvPortStartFirstTask>
	prvTaskExitError();
 80022c8:	f7ff feba 	bl	8002040 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80022cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80022d0:	0052      	lsls	r2, r2, #1
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f88d 2003 	strb.w	r2, [sp, #3]
 80022d8:	2101      	movs	r1, #1
 80022da:	4622      	mov	r2, r4
 80022dc:	e7cc      	b.n	8002278 <xPortStartScheduler+0x60>
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00
 80022e4:	410fc271 	.word	0x410fc271
 80022e8:	410fc270 	.word	0x410fc270
 80022ec:	e000e400 	.word	0xe000e400
 80022f0:	2000008c 	.word	0x2000008c
 80022f4:	20000090 	.word	0x20000090
 80022f8:	e000ed20 	.word	0xe000ed20
 80022fc:	20000004 	.word	0x20000004
 8002300:	e000ef34 	.word	0xe000ef34

08002304 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002304:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <prvInsertBlockIntoFreeList+0x40>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4282      	cmp	r2, r0
 800230c:	d318      	bcc.n	8002340 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800230e:	685c      	ldr	r4, [r3, #4]
 8002310:	1919      	adds	r1, r3, r4
 8002312:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002314:	bf01      	itttt	eq
 8002316:	6841      	ldreq	r1, [r0, #4]
 8002318:	4618      	moveq	r0, r3
 800231a:	1909      	addeq	r1, r1, r4
 800231c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800231e:	6844      	ldr	r4, [r0, #4]
 8002320:	1901      	adds	r1, r0, r4
 8002322:	428a      	cmp	r2, r1
 8002324:	d107      	bne.n	8002336 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002326:	4908      	ldr	r1, [pc, #32]	; (8002348 <prvInsertBlockIntoFreeList+0x44>)
 8002328:	6809      	ldr	r1, [r1, #0]
 800232a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800232c:	bf1f      	itttt	ne
 800232e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002330:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002332:	1909      	addne	r1, r1, r4
 8002334:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002336:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002338:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800233a:	bf18      	it	ne
 800233c:	6018      	strne	r0, [r3, #0]
 800233e:	bd10      	pop	{r4, pc}
 8002340:	4613      	mov	r3, r2
 8002342:	e7e1      	b.n	8002308 <prvInsertBlockIntoFreeList+0x4>
 8002344:	20003ca4 	.word	0x20003ca4
 8002348:	20000094 	.word	0x20000094

0800234c <pvPortMalloc>:
{
 800234c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002350:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002352:	f000 fd4b 	bl	8002dec <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002356:	493e      	ldr	r1, [pc, #248]	; (8002450 <pvPortMalloc+0x104>)
 8002358:	4d3e      	ldr	r5, [pc, #248]	; (8002454 <pvPortMalloc+0x108>)
 800235a:	680b      	ldr	r3, [r1, #0]
 800235c:	bb0b      	cbnz	r3, 80023a2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800235e:	4a3e      	ldr	r2, [pc, #248]	; (8002458 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002360:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002362:	bf1f      	itttt	ne
 8002364:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002366:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800236a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800236e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002370:	bf14      	ite	ne
 8002372:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002374:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002378:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800237a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800237c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002380:	4e36      	ldr	r6, [pc, #216]	; (800245c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002382:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002384:	2000      	movs	r0, #0
 8002386:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002388:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800238a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800238c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800238e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002390:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002392:	4b33      	ldr	r3, [pc, #204]	; (8002460 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002394:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002396:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002398:	4b32      	ldr	r3, [pc, #200]	; (8002464 <pvPortMalloc+0x118>)
 800239a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800239c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023a0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023a2:	682f      	ldr	r7, [r5, #0]
 80023a4:	4227      	tst	r7, r4
 80023a6:	d116      	bne.n	80023d6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80023a8:	2c00      	cmp	r4, #0
 80023aa:	d041      	beq.n	8002430 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80023ac:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023b0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80023b2:	bf1c      	itt	ne
 80023b4:	f023 0307 	bicne.w	r3, r3, #7
 80023b8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023ba:	b163      	cbz	r3, 80023d6 <pvPortMalloc+0x8a>
 80023bc:	4a29      	ldr	r2, [pc, #164]	; (8002464 <pvPortMalloc+0x118>)
 80023be:	6816      	ldr	r6, [r2, #0]
 80023c0:	42b3      	cmp	r3, r6
 80023c2:	4690      	mov	r8, r2
 80023c4:	d807      	bhi.n	80023d6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80023c6:	4a25      	ldr	r2, [pc, #148]	; (800245c <pvPortMalloc+0x110>)
 80023c8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023ca:	6868      	ldr	r0, [r5, #4]
 80023cc:	4283      	cmp	r3, r0
 80023ce:	d804      	bhi.n	80023da <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80023d0:	6809      	ldr	r1, [r1, #0]
 80023d2:	428d      	cmp	r5, r1
 80023d4:	d107      	bne.n	80023e6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80023d6:	2400      	movs	r4, #0
 80023d8:	e02a      	b.n	8002430 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023da:	682c      	ldr	r4, [r5, #0]
 80023dc:	2c00      	cmp	r4, #0
 80023de:	d0f7      	beq.n	80023d0 <pvPortMalloc+0x84>
 80023e0:	462a      	mov	r2, r5
 80023e2:	4625      	mov	r5, r4
 80023e4:	e7f1      	b.n	80023ca <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023e6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023e8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023ea:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023ec:	1ac2      	subs	r2, r0, r3
 80023ee:	2a10      	cmp	r2, #16
 80023f0:	d90f      	bls.n	8002412 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023f2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023f4:	0741      	lsls	r1, r0, #29
 80023f6:	d008      	beq.n	800240a <pvPortMalloc+0xbe>
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	e7fe      	b.n	8002408 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800240a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800240c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800240e:	f7ff ff79 	bl	8002304 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002412:	4913      	ldr	r1, [pc, #76]	; (8002460 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002414:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002416:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002418:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800241a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800241c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800241e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002422:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002426:	bf38      	it	cc
 8002428:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800242a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800242c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800242e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002430:	f000 fd7c 	bl	8002f2c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002434:	0763      	lsls	r3, r4, #29
 8002436:	d008      	beq.n	800244a <pvPortMalloc+0xfe>
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	e7fe      	b.n	8002448 <pvPortMalloc+0xfc>
}
 800244a:	4620      	mov	r0, r4
 800244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002450:	20000094 	.word	0x20000094
 8002454:	20003c98 	.word	0x20003c98
 8002458:	20000098 	.word	0x20000098
 800245c:	20003ca4 	.word	0x20003ca4
 8002460:	20003ca0 	.word	0x20003ca0
 8002464:	20003c9c 	.word	0x20003c9c

08002468 <vPortFree>:
{
 8002468:	b510      	push	{r4, lr}
	if( pv != NULL )
 800246a:	4604      	mov	r4, r0
 800246c:	b370      	cbz	r0, 80024cc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <vPortFree+0x68>)
 8002470:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	4213      	tst	r3, r2
 8002478:	d108      	bne.n	800248c <vPortFree+0x24>
 800247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	e7fe      	b.n	800248a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800248c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002490:	b141      	cbz	r1, 80024a4 <vPortFree+0x3c>
 8002492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	e7fe      	b.n	80024a2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80024a4:	ea23 0302 	bic.w	r3, r3, r2
 80024a8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80024ac:	f000 fc9e 	bl	8002dec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024b0:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <vPortFree+0x6c>)
 80024b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80024b6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024b8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024bc:	440b      	add	r3, r1
 80024be:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024c0:	f7ff ff20 	bl	8002304 <prvInsertBlockIntoFreeList>
}
 80024c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80024c8:	f000 bd30 	b.w	8002f2c <xTaskResumeAll>
 80024cc:	bd10      	pop	{r4, pc}
 80024ce:	bf00      	nop
 80024d0:	20003c98 	.word	0x20003c98
 80024d4:	20003c9c 	.word	0x20003c9c

080024d8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024de:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80024e0:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024e2:	b942      	cbnz	r2, 80024f6 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024e4:	6805      	ldr	r5, [r0, #0]
 80024e6:	b99d      	cbnz	r5, 8002510 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80024e8:	6840      	ldr	r0, [r0, #4]
 80024ea:	f001 f877 	bl	80035dc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80024ee:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80024f0:	3601      	adds	r6, #1
 80024f2:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80024f6:	b96d      	cbnz	r5, 8002514 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80024f8:	6880      	ldr	r0, [r0, #8]
 80024fa:	f001 fe77 	bl	80041ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80024fe:	68a3      	ldr	r3, [r4, #8]
 8002500:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002502:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002504:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002506:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002508:	4293      	cmp	r3, r2
 800250a:	d301      	bcc.n	8002510 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002510:	2000      	movs	r0, #0
 8002512:	e7ed      	b.n	80024f0 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002514:	68c0      	ldr	r0, [r0, #12]
 8002516:	f001 fe69 	bl	80041ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800251a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800251c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800251e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002520:	425b      	negs	r3, r3
 8002522:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002524:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002526:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002528:	bf3e      	ittt	cc
 800252a:	6862      	ldrcc	r2, [r4, #4]
 800252c:	189b      	addcc	r3, r3, r2
 800252e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002530:	2d02      	cmp	r5, #2
 8002532:	d1ed      	bne.n	8002510 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002534:	b10e      	cbz	r6, 800253a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002536:	3e01      	subs	r6, #1
 8002538:	e7ea      	b.n	8002510 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800253a:	4630      	mov	r0, r6
 800253c:	e7d8      	b.n	80024f0 <prvCopyDataToQueue+0x18>

0800253e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800253e:	4603      	mov	r3, r0
 8002540:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002544:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002546:	b162      	cbz	r2, 8002562 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002548:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800254a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800254c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800254e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002550:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002552:	bf24      	itt	cs
 8002554:	6819      	ldrcs	r1, [r3, #0]
 8002556:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002558:	68d9      	ldr	r1, [r3, #12]
	}
}
 800255a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800255e:	f001 be45 	b.w	80041ec <memcpy>
}
 8002562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002566:	4770      	bx	lr

08002568 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800256c:	f7ff fdc2 	bl	80020f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002570:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002574:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002578:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800257a:	2d00      	cmp	r5, #0
 800257c:	dc14      	bgt.n	80025a8 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800257e:	23ff      	movs	r3, #255	; 0xff
 8002580:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002584:	f7ff fdd8 	bl	8002138 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002588:	f7ff fdb4 	bl	80020f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800258c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002590:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002594:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002596:	2d00      	cmp	r5, #0
 8002598:	dc12      	bgt.n	80025c0 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800259a:	23ff      	movs	r3, #255	; 0xff
 800259c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80025a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80025a4:	f7ff bdc8 	b.w	8002138 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0e7      	beq.n	800257e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ae:	4630      	mov	r0, r6
 80025b0:	f000 fe5a 	bl	8003268 <xTaskRemoveFromEventList>
 80025b4:	b108      	cbz	r0, 80025ba <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80025b6:	f000 fee3 	bl	8003380 <vTaskMissedYield>
 80025ba:	3d01      	subs	r5, #1
 80025bc:	b26d      	sxtb	r5, r5
 80025be:	e7dc      	b.n	800257a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025c0:	6923      	ldr	r3, [r4, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0e9      	beq.n	800259a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025c6:	4630      	mov	r0, r6
 80025c8:	f000 fe4e 	bl	8003268 <xTaskRemoveFromEventList>
 80025cc:	b108      	cbz	r0, 80025d2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80025ce:	f000 fed7 	bl	8003380 <vTaskMissedYield>
 80025d2:	3d01      	subs	r5, #1
 80025d4:	b26d      	sxtb	r5, r5
 80025d6:	e7de      	b.n	8002596 <prvUnlockQueue+0x2e>

080025d8 <xQueueGenericReset>:
{
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80025dc:	4604      	mov	r4, r0
 80025de:	b940      	cbnz	r0, 80025f2 <xQueueGenericReset+0x1a>
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80025f2:	f7ff fd7f 	bl	80020f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80025f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80025f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025fa:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025fc:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80025fe:	4343      	muls	r3, r0
 8002600:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002602:	1a1b      	subs	r3, r3, r0
 8002604:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002606:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002608:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800260a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800260c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800260e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002610:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002614:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002618:	b995      	cbnz	r5, 8002640 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800261a:	6923      	ldr	r3, [r4, #16]
 800261c:	b163      	cbz	r3, 8002638 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800261e:	f104 0010 	add.w	r0, r4, #16
 8002622:	f000 fe21 	bl	8003268 <xTaskRemoveFromEventList>
 8002626:	b138      	cbz	r0, 8002638 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <xQueueGenericReset+0x7c>)
 800262a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002638:	f7ff fd7e 	bl	8002138 <vPortExitCritical>
}
 800263c:	2001      	movs	r0, #1
 800263e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002640:	f104 0010 	add.w	r0, r4, #16
 8002644:	f7ff fcba 	bl	8001fbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002648:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800264c:	f7ff fcb6 	bl	8001fbc <vListInitialise>
 8002650:	e7f2      	b.n	8002638 <xQueueGenericReset+0x60>
 8002652:	bf00      	nop
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <xQueueGenericCreate>:
	{
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	460d      	mov	r5, r1
 800265c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800265e:	4606      	mov	r6, r0
 8002660:	b940      	cbnz	r0, 8002674 <xQueueGenericCreate+0x1c>
 8002662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	e7fe      	b.n	8002672 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002674:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002676:	3050      	adds	r0, #80	; 0x50
 8002678:	f7ff fe68 	bl	800234c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800267c:	4604      	mov	r4, r0
 800267e:	b148      	cbz	r0, 8002694 <xQueueGenericCreate+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002680:	b955      	cbnz	r5, 8002698 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002682:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002684:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002686:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002688:	2101      	movs	r1, #1
 800268a:	4620      	mov	r0, r4
 800268c:	f7ff ffa4 	bl	80025d8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002690:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8002694:	4620      	mov	r0, r4
 8002696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002698:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800269c:	6003      	str	r3, [r0, #0]
 800269e:	e7f1      	b.n	8002684 <xQueueGenericCreate+0x2c>

080026a0 <xQueueGenericSend>:
{
 80026a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	4689      	mov	r9, r1
 80026a6:	9201      	str	r2, [sp, #4]
 80026a8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80026aa:	4604      	mov	r4, r0
 80026ac:	b940      	cbnz	r0, 80026c0 <xQueueGenericSend+0x20>
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	e7fe      	b.n	80026be <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c0:	2900      	cmp	r1, #0
 80026c2:	f040 8088 	bne.w	80027d6 <xQueueGenericSend+0x136>
 80026c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8084 	beq.w	80027d6 <xQueueGenericSend+0x136>
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	e7fe      	b.n	80026de <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026e0:	9e01      	ldr	r6, [sp, #4]
 80026e2:	2e00      	cmp	r6, #0
 80026e4:	f000 8082 	beq.w	80027ec <xQueueGenericSend+0x14c>
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	e7fe      	b.n	80026f8 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80026fa:	9d01      	ldr	r5, [sp, #4]
 80026fc:	b91d      	cbnz	r5, 8002706 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80026fe:	f7ff fd1b 	bl	8002138 <vPortExitCritical>
			return errQUEUE_FULL;
 8002702:	2000      	movs	r0, #0
 8002704:	e058      	b.n	80027b8 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002706:	b916      	cbnz	r6, 800270e <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8002708:	a802      	add	r0, sp, #8
 800270a:	f000 fdef 	bl	80032ec <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800270e:	f7ff fd13 	bl	8002138 <vPortExitCritical>
		vTaskSuspendAll();
 8002712:	f000 fb6b 	bl	8002dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002716:	f7ff fced 	bl	80020f4 <vPortEnterCritical>
 800271a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800271e:	2bff      	cmp	r3, #255	; 0xff
 8002720:	bf08      	it	eq
 8002722:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002726:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800272a:	2bff      	cmp	r3, #255	; 0xff
 800272c:	bf08      	it	eq
 800272e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002732:	f7ff fd01 	bl	8002138 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002736:	a901      	add	r1, sp, #4
 8002738:	a802      	add	r0, sp, #8
 800273a:	f000 fde7 	bl	800330c <xTaskCheckForTimeOut>
 800273e:	2800      	cmp	r0, #0
 8002740:	d143      	bne.n	80027ca <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002742:	f7ff fcd7 	bl	80020f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002746:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002748:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800274a:	f7ff fcf5 	bl	8002138 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800274e:	42ae      	cmp	r6, r5
 8002750:	d135      	bne.n	80027be <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002752:	9901      	ldr	r1, [sp, #4]
 8002754:	f104 0010 	add.w	r0, r4, #16
 8002758:	f000 fd6c 	bl	8003234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff ff03 	bl	8002568 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002762:	f000 fbe3 	bl	8002f2c <xTaskResumeAll>
 8002766:	b938      	cbnz	r0, 8002778 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800276c:	f8ca 3000 	str.w	r3, [sl]
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800277a:	f7ff fcbb 	bl	80020f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800277e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002782:	429a      	cmp	r2, r3
 8002784:	d301      	bcc.n	800278a <xQueueGenericSend+0xea>
 8002786:	2f02      	cmp	r7, #2
 8002788:	d1b7      	bne.n	80026fa <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800278a:	463a      	mov	r2, r7
 800278c:	4649      	mov	r1, r9
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff fea2 	bl	80024d8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002796:	b11b      	cbz	r3, 80027a0 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002798:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800279c:	f000 fd64 	bl	8003268 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80027a0:	b138      	cbz	r0, 80027b2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <xQueueGenericSend+0x168>)
 80027a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80027b2:	f7ff fcc1 	bl	8002138 <vPortExitCritical>
				return pdPASS;
 80027b6:	2001      	movs	r0, #1
}
 80027b8:	b004      	add	sp, #16
 80027ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff fed2 	bl	8002568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027c4:	f000 fbb2 	bl	8002f2c <xTaskResumeAll>
 80027c8:	e7d6      	b.n	8002778 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fecc 	bl	8002568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027d0:	f000 fbac 	bl	8002f2c <xTaskResumeAll>
 80027d4:	e795      	b.n	8002702 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027d6:	2f02      	cmp	r7, #2
 80027d8:	d102      	bne.n	80027e0 <xQueueGenericSend+0x140>
 80027da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10a      	bne.n	80027f6 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027e0:	f000 fea6 	bl	8003530 <xTaskGetSchedulerState>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	f43f af7b 	beq.w	80026e0 <xQueueGenericSend+0x40>
 80027ea:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80027ec:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80027f0:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002808 <xQueueGenericSend+0x168>
 80027f4:	e7c1      	b.n	800277a <xQueueGenericSend+0xda>
 80027f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	e7fe      	b.n	8002806 <xQueueGenericSend+0x166>
 8002808:	e000ed04 	.word	0xe000ed04

0800280c <xQueueCreateMutex>:
	{
 800280c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800280e:	4602      	mov	r2, r0
 8002810:	2100      	movs	r1, #0
 8002812:	2001      	movs	r0, #1
 8002814:	f7ff ff20 	bl	8002658 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8002818:	4604      	mov	r4, r0
 800281a:	b138      	cbz	r0, 800282c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800281c:	2300      	movs	r3, #0
 800281e:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002820:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002822:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002824:	461a      	mov	r2, r3
 8002826:	4619      	mov	r1, r3
 8002828:	f7ff ff3a 	bl	80026a0 <xQueueGenericSend>
	}
 800282c:	4620      	mov	r0, r4
 800282e:	bd10      	pop	{r4, pc}

08002830 <xQueueGenericReceive>:
{
 8002830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002834:	4688      	mov	r8, r1
 8002836:	9201      	str	r2, [sp, #4]
 8002838:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800283a:	4604      	mov	r4, r0
 800283c:	b940      	cbnz	r0, 8002850 <xQueueGenericReceive+0x20>
 800283e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002842:	f383 8811 	msr	BASEPRI, r3
 8002846:	f3bf 8f6f 	isb	sy
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	e7fe      	b.n	800284e <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002850:	2900      	cmp	r1, #0
 8002852:	f040 80a5 	bne.w	80029a0 <xQueueGenericReceive+0x170>
 8002856:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80a1 	beq.w	80029a0 <xQueueGenericReceive+0x170>
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	e7fe      	b.n	800286e <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002870:	9e01      	ldr	r6, [sp, #4]
 8002872:	2e00      	cmp	r6, #0
 8002874:	f000 809a 	beq.w	80029ac <xQueueGenericReceive+0x17c>
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	e7fe      	b.n	8002888 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800288a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800288c:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800288e:	2b00      	cmp	r3, #0
 8002890:	d06d      	beq.n	800296e <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002892:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002896:	e05f      	b.n	8002958 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002898:	9d01      	ldr	r5, [sp, #4]
 800289a:	b91d      	cbnz	r5, 80028a4 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 800289c:	f7ff fc4c 	bl	8002138 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80028a0:	4628      	mov	r0, r5
 80028a2:	e067      	b.n	8002974 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 80028a4:	b916      	cbnz	r6, 80028ac <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 80028a6:	a802      	add	r0, sp, #8
 80028a8:	f000 fd20 	bl	80032ec <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80028ac:	f7ff fc44 	bl	8002138 <vPortExitCritical>
		vTaskSuspendAll();
 80028b0:	f000 fa9c 	bl	8002dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028b4:	f7ff fc1e 	bl	80020f4 <vPortEnterCritical>
 80028b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80028bc:	2bff      	cmp	r3, #255	; 0xff
 80028be:	bf08      	it	eq
 80028c0:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80028c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80028c8:	2bff      	cmp	r3, #255	; 0xff
 80028ca:	bf08      	it	eq
 80028cc:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80028d0:	f7ff fc32 	bl	8002138 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028d4:	a901      	add	r1, sp, #4
 80028d6:	a802      	add	r0, sp, #8
 80028d8:	f000 fd18 	bl	800330c <xTaskCheckForTimeOut>
 80028dc:	2800      	cmp	r0, #0
 80028de:	d152      	bne.n	8002986 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 80028e0:	f7ff fc08 	bl	80020f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028e4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80028e6:	f7ff fc27 	bl	8002138 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028ea:	2d00      	cmp	r5, #0
 80028ec:	d145      	bne.n	800297a <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	b933      	cbnz	r3, 8002900 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 80028f2:	f7ff fbff 	bl	80020f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80028f6:	6860      	ldr	r0, [r4, #4]
 80028f8:	f000 fe2a 	bl	8003550 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80028fc:	f7ff fc1c 	bl	8002138 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002900:	9901      	ldr	r1, [sp, #4]
 8002902:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002906:	f000 fc95 	bl	8003234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800290a:	4620      	mov	r0, r4
 800290c:	f7ff fe2c 	bl	8002568 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002910:	f000 fb0c 	bl	8002f2c <xTaskResumeAll>
 8002914:	b938      	cbnz	r0, 8002926 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8002916:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800291a:	f8ca 3000 	str.w	r3, [sl]
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002928:	f7ff fbe4 	bl	80020f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800292c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800292e:	2d00      	cmp	r5, #0
 8002930:	d0b2      	beq.n	8002898 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002932:	4641      	mov	r1, r8
 8002934:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002936:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002938:	f7ff fe01 	bl	800253e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800293c:	f1b9 0f00 	cmp.w	r9, #0
 8002940:	d1a3      	bne.n	800288a <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002942:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002944:	3d01      	subs	r5, #1
 8002946:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002948:	b913      	cbnz	r3, 8002950 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800294a:	f000 feef 	bl	800372c <pvTaskIncrementMutexHeldCount>
 800294e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002950:	6923      	ldr	r3, [r4, #16]
 8002952:	b163      	cbz	r3, 800296e <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002954:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002958:	f000 fc86 	bl	8003268 <xTaskRemoveFromEventList>
 800295c:	b138      	cbz	r0, 800296e <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <xQueueGenericReceive+0x184>)
 8002960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800296e:	f7ff fbe3 	bl	8002138 <vPortExitCritical>
				return pdPASS;
 8002972:	2001      	movs	r0, #1
}
 8002974:	b004      	add	sp, #16
 8002976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800297a:	4620      	mov	r0, r4
 800297c:	f7ff fdf4 	bl	8002568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002980:	f000 fad4 	bl	8002f2c <xTaskResumeAll>
 8002984:	e7cf      	b.n	8002926 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8002986:	4620      	mov	r0, r4
 8002988:	f7ff fdee 	bl	8002568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800298c:	f000 face 	bl	8002f2c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8002990:	f7ff fbb0 	bl	80020f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002994:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8002996:	f7ff fbcf 	bl	8002138 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800299a:	2d00      	cmp	r5, #0
 800299c:	d1c3      	bne.n	8002926 <xQueueGenericReceive+0xf6>
 800299e:	e77f      	b.n	80028a0 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029a0:	f000 fdc6 	bl	8003530 <xTaskGetSchedulerState>
 80029a4:	2800      	cmp	r0, #0
 80029a6:	f43f af63 	beq.w	8002870 <xQueueGenericReceive+0x40>
 80029aa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80029ac:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80029ae:	f8df a004 	ldr.w	sl, [pc, #4]	; 80029b4 <xQueueGenericReceive+0x184>
 80029b2:	e7b9      	b.n	8002928 <xQueueGenericReceive+0xf8>
 80029b4:	e000ed04 	.word	0xe000ed04

080029b8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80029b8:	b510      	push	{r4, lr}
 80029ba:	4604      	mov	r4, r0
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80029bc:	f001 fc4e 	bl	800425c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7fd fc25 	bl	8000210 <strlen>
		{
			pcBuffer[ x ] = ' ';
 80029c6:	2320      	movs	r3, #32
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80029c8:	280e      	cmp	r0, #14
 80029ca:	d903      	bls.n	80029d4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 80029cc:	2300      	movs	r3, #0
 80029ce:	5423      	strb	r3, [r4, r0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 80029d0:	4420      	add	r0, r4
 80029d2:	bd10      	pop	{r4, pc}
			pcBuffer[ x ] = ' ';
 80029d4:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80029d6:	3001      	adds	r0, #1
 80029d8:	e7f6      	b.n	80029c8 <prvWriteNameToBuffer+0x10>
	...

080029dc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029dc:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <prvResetNextTaskUnblockTime+0x1c>)
 80029de:	6813      	ldr	r3, [r2, #0]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <prvResetNextTaskUnblockTime+0x20>)
 80029e4:	b919      	cbnz	r1, 80029ee <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80029e6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029f2:	68d2      	ldr	r2, [r2, #12]
 80029f4:	6852      	ldr	r2, [r2, #4]
 80029f6:	e7f8      	b.n	80029ea <prvResetNextTaskUnblockTime+0xe>
 80029f8:	20003cb0 	.word	0x20003cb0
 80029fc:	20003d8c 	.word	0x20003d8c

08002a00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a04:	4e1b      	ldr	r6, [pc, #108]	; (8002a74 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002a06:	681d      	ldr	r5, [r3, #0]
{
 8002a08:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a0a:	6830      	ldr	r0, [r6, #0]
 8002a0c:	3004      	adds	r0, #4
{
 8002a0e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a10:	f7ff fb05 	bl	800201e <uxListRemove>
 8002a14:	4633      	mov	r3, r6
 8002a16:	b940      	cbnz	r0, 8002a2a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a18:	6831      	ldr	r1, [r6, #0]
 8002a1a:	4e17      	ldr	r6, [pc, #92]	; (8002a78 <prvAddCurrentTaskToDelayedList+0x78>)
 8002a1c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002a1e:	6832      	ldr	r2, [r6, #0]
 8002a20:	2001      	movs	r0, #1
 8002a22:	4088      	lsls	r0, r1
 8002a24:	ea22 0200 	bic.w	r2, r2, r0
 8002a28:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a2a:	1c62      	adds	r2, r4, #1
 8002a2c:	d107      	bne.n	8002a3e <prvAddCurrentTaskToDelayedList+0x3e>
 8002a2e:	b137      	cbz	r7, 8002a3e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	4812      	ldr	r0, [pc, #72]	; (8002a7c <prvAddCurrentTaskToDelayedList+0x7c>)
 8002a34:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a3a:	f7ff bacd 	b.w	8001fd8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a3e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a40:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002a42:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a44:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002a46:	d907      	bls.n	8002a58 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <prvAddCurrentTaskToDelayedList+0x80>)
 8002a4a:	6810      	ldr	r0, [r2, #0]
 8002a4c:	6819      	ldr	r1, [r3, #0]
}
 8002a4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a52:	3104      	adds	r1, #4
 8002a54:	f7ff bacc 	b.w	8001ff0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a58:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <prvAddCurrentTaskToDelayedList+0x84>)
 8002a5a:	6810      	ldr	r0, [r2, #0]
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	3104      	adds	r1, #4
 8002a60:	f7ff fac6 	bl	8001ff0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <prvAddCurrentTaskToDelayedList+0x88>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002a6a:	bf38      	it	cc
 8002a6c:	601c      	strcc	r4, [r3, #0]
 8002a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a70:	20003dd4 	.word	0x20003dd4
 8002a74:	20003cac 	.word	0x20003cac
 8002a78:	20003d5c 	.word	0x20003d5c
 8002a7c:	20003dac 	.word	0x20003dac
 8002a80:	20003cb4 	.word	0x20003cb4
 8002a84:	20003cb0 	.word	0x20003cb0
 8002a88:	20003d8c 	.word	0x20003d8c

08002a8c <eTaskGetState.part.4>:
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	e7fe      	b.n	8002a9c <eTaskGetState.part.4+0x10>
	...

08002aa0 <prvTaskIsTaskSuspended>:
	{
 8002aa0:	b508      	push	{r3, lr}
		configASSERT( xTask );
 8002aa2:	b908      	cbnz	r0, 8002aa8 <prvTaskIsTaskSuspended+0x8>
 8002aa4:	f7ff fff2 	bl	8002a8c <eTaskGetState.part.4>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002aa8:	6942      	ldr	r2, [r0, #20]
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <prvTaskIsTaskSuspended+0x24>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <prvTaskIsTaskSuspended+0x14>
	BaseType_t xReturn = pdFALSE;
 8002ab0:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002ab2:	bd08      	pop	{r3, pc}
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002ab4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <prvTaskIsTaskSuspended+0x28>)
 8002ab8:	4298      	cmp	r0, r3
 8002aba:	d0f9      	beq.n	8002ab0 <prvTaskIsTaskSuspended+0x10>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8002abc:	fab0 f080 	clz	r0, r0
 8002ac0:	0940      	lsrs	r0, r0, #5
		return xReturn;
 8002ac2:	bd08      	pop	{r3, pc}
 8002ac4:	20003dac 	.word	0x20003dac
 8002ac8:	20003d94 	.word	0x20003d94

08002acc <xTaskCreate>:
	{
 8002acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ad0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002ad4:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ad6:	4650      	mov	r0, sl
	{
 8002ad8:	460d      	mov	r5, r1
 8002ada:	4699      	mov	r9, r3
 8002adc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ade:	f7ff fc35 	bl	800234c <pvPortMalloc>
			if( pxStack != NULL )
 8002ae2:	4607      	mov	r7, r0
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	f000 809f 	beq.w	8002c28 <xTaskCreate+0x15c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002aea:	2060      	movs	r0, #96	; 0x60
 8002aec:	f7ff fc2e 	bl	800234c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002af0:	4604      	mov	r4, r0
 8002af2:	2800      	cmp	r0, #0
 8002af4:	f000 8095 	beq.w	8002c22 <xTaskCreate+0x156>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002af8:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 8002afa:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002afc:	21a5      	movs	r1, #165	; 0xa5
 8002afe:	4638      	mov	r0, r7
 8002b00:	f001 fb7f 	bl	8004202 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b06:	f1aa 0a04 	sub.w	sl, sl, #4
 8002b0a:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b0c:	f02a 0a07 	bic.w	sl, sl, #7
 8002b10:	1e6b      	subs	r3, r5, #1
 8002b12:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002b16:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b18:	7859      	ldrb	r1, [r3, #1]
 8002b1a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002b1e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002b22:	b109      	cbz	r1, 8002b28 <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b24:	42ab      	cmp	r3, r5
 8002b26:	d1f7      	bne.n	8002b18 <xTaskCreate+0x4c>
 8002b28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002b2a:	2d06      	cmp	r5, #6
 8002b2c:	bf28      	it	cs
 8002b2e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b30:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b34:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002b36:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002b38:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b3a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b3c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002b40:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b44:	f7ff fa45 	bl	8001fd2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b48:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b4c:	f104 0018 	add.w	r0, r4, #24
 8002b50:	f7ff fa3f 	bl	8001fd2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002b54:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b58:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b5c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8002b5e:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b62:	f884 b05c 	strb.w	fp, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b66:	464a      	mov	r2, r9
 8002b68:	4641      	mov	r1, r8
 8002b6a:	4650      	mov	r0, sl
 8002b6c:	f7ff fa9a 	bl	80020a4 <pxPortInitialiseStack>
 8002b70:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002b72:	b106      	cbz	r6, 8002b76 <xTaskCreate+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b74:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002b76:	f7ff fabd 	bl	80020f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002b7a:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 8002b7c:	4e32      	ldr	r6, [pc, #200]	; (8002c48 <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002c74 <xTaskCreate+0x1a8>
 8002b84:	3201      	adds	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002b88:	6835      	ldr	r5, [r6, #0]
 8002b8a:	2d00      	cmp	r5, #0
 8002b8c:	d14f      	bne.n	8002c2e <xTaskCreate+0x162>
			pxCurrentTCB = pxNewTCB;
 8002b8e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d11d      	bne.n	8002bd2 <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b96:	eb08 0005 	add.w	r0, r8, r5
 8002b9a:	3514      	adds	r5, #20
 8002b9c:	f7ff fa0e 	bl	8001fbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ba0:	2d8c      	cmp	r5, #140	; 0x8c
 8002ba2:	d1f8      	bne.n	8002b96 <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 8002ba4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002c78 <xTaskCreate+0x1ac>
	vListInitialise( &xDelayedTaskList2 );
 8002ba8:	4d28      	ldr	r5, [pc, #160]	; (8002c4c <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList1 );
 8002baa:	4648      	mov	r0, r9
 8002bac:	f7ff fa06 	bl	8001fbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f7ff fa03 	bl	8001fbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bb6:	4826      	ldr	r0, [pc, #152]	; (8002c50 <xTaskCreate+0x184>)
 8002bb8:	f7ff fa00 	bl	8001fbc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002bbc:	4825      	ldr	r0, [pc, #148]	; (8002c54 <xTaskCreate+0x188>)
 8002bbe:	f7ff f9fd 	bl	8001fbc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002bc2:	4825      	ldr	r0, [pc, #148]	; (8002c58 <xTaskCreate+0x18c>)
 8002bc4:	f7ff f9fa 	bl	8001fbc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <xTaskCreate+0x190>)
 8002bca:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <xTaskCreate+0x194>)
 8002bd0:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002bd2:	4a24      	ldr	r2, [pc, #144]	; (8002c64 <xTaskCreate+0x198>)
		prvAddTaskToReadyList( pxNewTCB );
 8002bd4:	4924      	ldr	r1, [pc, #144]	; (8002c68 <xTaskCreate+0x19c>)
		uxTaskNumber++;
 8002bd6:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002bd8:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002bda:	3301      	adds	r3, #1
 8002bdc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002bde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002be0:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002be2:	2501      	movs	r5, #1
 8002be4:	fa05 f302 	lsl.w	r3, r5, r2
 8002be8:	4303      	orrs	r3, r0
 8002bea:	2014      	movs	r0, #20
 8002bec:	600b      	str	r3, [r1, #0]
 8002bee:	fb00 8002 	mla	r0, r0, r2, r8
 8002bf2:	4639      	mov	r1, r7
 8002bf4:	f7ff f9f0 	bl	8001fd8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002bf8:	f7ff fa9e 	bl	8002138 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <xTaskCreate+0x1a0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	b163      	cbz	r3, 8002c1c <xTaskCreate+0x150>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c02:	6833      	ldr	r3, [r6, #0]
 8002c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d207      	bcs.n	8002c1c <xTaskCreate+0x150>
			taskYIELD_IF_USING_PREEMPTION();
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <xTaskCreate+0x1a4>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	f3bf 8f6f 	isb	sy
	}
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002c22:	4638      	mov	r0, r7
 8002c24:	f7ff fc20 	bl	8002468 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c28:	f04f 35ff 	mov.w	r5, #4294967295
 8002c2c:	e7f6      	b.n	8002c1c <xTaskCreate+0x150>
			if( xSchedulerRunning == pdFALSE )
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <xTaskCreate+0x1a0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1cd      	bne.n	8002bd2 <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c36:	6833      	ldr	r3, [r6, #0]
 8002c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c3c:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002c3e:	bf98      	it	ls
 8002c40:	6034      	strls	r4, [r6, #0]
 8002c42:	e7c6      	b.n	8002bd2 <xTaskCreate+0x106>
 8002c44:	20003d48 	.word	0x20003d48
 8002c48:	20003cac 	.word	0x20003cac
 8002c4c:	20003d74 	.word	0x20003d74
 8002c50:	20003d94 	.word	0x20003d94
 8002c54:	20003dc0 	.word	0x20003dc0
 8002c58:	20003dac 	.word	0x20003dac
 8002c5c:	20003cb0 	.word	0x20003cb0
 8002c60:	20003cb4 	.word	0x20003cb4
 8002c64:	20003d58 	.word	0x20003d58
 8002c68:	20003d5c 	.word	0x20003d5c
 8002c6c:	20003da8 	.word	0x20003da8
 8002c70:	e000ed04 	.word	0xe000ed04
 8002c74:	20003cb8 	.word	0x20003cb8
 8002c78:	20003d60 	.word	0x20003d60

08002c7c <eTaskGetState>:
	{
 8002c7c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
 8002c7e:	4605      	mov	r5, r0
 8002c80:	b908      	cbnz	r0, 8002c86 <eTaskGetState+0xa>
 8002c82:	f7ff ff03 	bl	8002a8c <eTaskGetState.part.4>
		if( pxTCB == pxCurrentTCB )
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <eTaskGetState+0x5c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4298      	cmp	r0, r3
 8002c8c:	d01d      	beq.n	8002cca <eTaskGetState+0x4e>
			taskENTER_CRITICAL();
 8002c8e:	f7ff fa31 	bl	80020f4 <vPortEnterCritical>
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002c92:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
 8002c94:	f7ff fa50 	bl	8002138 <vPortExitCritical>
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <eTaskGetState+0x60>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	429c      	cmp	r4, r3
 8002c9e:	d016      	beq.n	8002cce <eTaskGetState+0x52>
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <eTaskGetState+0x64>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	429c      	cmp	r4, r3
 8002ca6:	d012      	beq.n	8002cce <eTaskGetState+0x52>
				else if( pxStateList == &xSuspendedTaskList )
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <eTaskGetState+0x68>)
 8002caa:	429c      	cmp	r4, r3
 8002cac:	d105      	bne.n	8002cba <eTaskGetState+0x3e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002cae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002cb0:	2b00      	cmp	r3, #0
						eReturn = eSuspended;
 8002cb2:	bf14      	ite	ne
 8002cb4:	2002      	movne	r0, #2
 8002cb6:	2003      	moveq	r0, #3
 8002cb8:	bd38      	pop	{r3, r4, r5, pc}
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <eTaskGetState+0x6c>)
 8002cbc:	429c      	cmp	r4, r3
 8002cbe:	d008      	beq.n	8002cd2 <eTaskGetState+0x56>
 8002cc0:	2c00      	cmp	r4, #0
				eReturn = eReady;
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2004      	moveq	r0, #4
 8002cc6:	2001      	movne	r0, #1
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}
			eReturn = eRunning;
 8002cca:	2000      	movs	r0, #0
 8002ccc:	bd38      	pop	{r3, r4, r5, pc}
						eReturn = eBlocked;
 8002cce:	2002      	movs	r0, #2
 8002cd0:	bd38      	pop	{r3, r4, r5, pc}
					eReturn = eDeleted;
 8002cd2:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002cd4:	bd38      	pop	{r3, r4, r5, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20003cac 	.word	0x20003cac
 8002cdc:	20003cb0 	.word	0x20003cb0
 8002ce0:	20003cb4 	.word	0x20003cb4
 8002ce4:	20003dac 	.word	0x20003dac
 8002ce8:	20003dc0 	.word	0x20003dc0

08002cec <vTaskResume>:
	{
 8002cec:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8002cee:	4604      	mov	r4, r0
 8002cf0:	b940      	cbnz	r0, 8002d04 <vTaskResume+0x18>
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	e7fe      	b.n	8002d02 <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8002d04:	4d16      	ldr	r5, [pc, #88]	; (8002d60 <vTaskResume+0x74>)
 8002d06:	682b      	ldr	r3, [r5, #0]
 8002d08:	4298      	cmp	r0, r3
 8002d0a:	d028      	beq.n	8002d5e <vTaskResume+0x72>
			taskENTER_CRITICAL();
 8002d0c:	f7ff f9f2 	bl	80020f4 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7ff fec5 	bl	8002aa0 <prvTaskIsTaskSuspended>
 8002d16:	b1f0      	cbz	r0, 8002d56 <vTaskResume+0x6a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8002d18:	1d26      	adds	r6, r4, #4
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	f7ff f97f 	bl	800201e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d20:	4910      	ldr	r1, [pc, #64]	; (8002d64 <vTaskResume+0x78>)
 8002d22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d24:	6808      	ldr	r0, [r1, #0]
 8002d26:	2301      	movs	r3, #1
 8002d28:	4093      	lsls	r3, r2
 8002d2a:	4303      	orrs	r3, r0
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <vTaskResume+0x7c>)
 8002d30:	2014      	movs	r0, #20
 8002d32:	fb00 3002 	mla	r0, r0, r2, r3
 8002d36:	4631      	mov	r1, r6
 8002d38:	f7ff f94e 	bl	8001fd8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d307      	bcc.n	8002d56 <vTaskResume+0x6a>
						taskYIELD_IF_USING_PREEMPTION();
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <vTaskResume+0x80>)
 8002d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	f3bf 8f6f 	isb	sy
	}
 8002d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8002d5a:	f7ff b9ed 	b.w	8002138 <vPortExitCritical>
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	20003cac 	.word	0x20003cac
 8002d64:	20003d5c 	.word	0x20003d5c
 8002d68:	20003cb8 	.word	0x20003cb8
 8002d6c:	e000ed04 	.word	0xe000ed04

08002d70 <vTaskStartScheduler>:
{
 8002d70:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <vTaskStartScheduler+0x64>)
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	2400      	movs	r4, #0
 8002d78:	9400      	str	r4, [sp, #0]
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	4916      	ldr	r1, [pc, #88]	; (8002dd8 <vTaskStartScheduler+0x68>)
 8002d80:	4816      	ldr	r0, [pc, #88]	; (8002ddc <vTaskStartScheduler+0x6c>)
 8002d82:	f7ff fea3 	bl	8002acc <xTaskCreate>
	if( xReturn == pdPASS )
 8002d86:	2801      	cmp	r0, #1
 8002d88:	d116      	bne.n	8002db8 <vTaskStartScheduler+0x48>
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <vTaskStartScheduler+0x70>)
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <vTaskStartScheduler+0x74>)
 8002da4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <vTaskStartScheduler+0x78>)
 8002da8:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8002daa:	f000 fd79 	bl	80038a0 <configureTimerForRunTimeStats>
}
 8002dae:	b002      	add	sp, #8
 8002db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002db4:	f7ff ba30 	b.w	8002218 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002db8:	3001      	adds	r0, #1
 8002dba:	d108      	bne.n	8002dce <vTaskStartScheduler+0x5e>
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	e7fe      	b.n	8002dcc <vTaskStartScheduler+0x5c>
}
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd10      	pop	{r4, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20003d88 	.word	0x20003d88
 8002dd8:	08004b20 	.word	0x08004b20
 8002ddc:	08003065 	.word	0x08003065
 8002de0:	20003d8c 	.word	0x20003d8c
 8002de4:	20003da8 	.word	0x20003da8
 8002de8:	20003dd4 	.word	0x20003dd4

08002dec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002dec:	4a02      	ldr	r2, [pc, #8]	; (8002df8 <vTaskSuspendAll+0xc>)
 8002dee:	6813      	ldr	r3, [r2, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20003d54 	.word	0x20003d54

08002dfc <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002dfc:	4b01      	ldr	r3, [pc, #4]	; (8002e04 <xTaskGetTickCount+0x8>)
 8002dfe:	6818      	ldr	r0, [r3, #0]
}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20003dd4 	.word	0x20003dd4

08002e08 <xTaskIncrementTick>:
{
 8002e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e0c:	4b3c      	ldr	r3, [pc, #240]	; (8002f00 <xTaskIncrementTick+0xf8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d153      	bne.n	8002ebc <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <xTaskIncrementTick+0xfc>)
 8002e16:	681c      	ldr	r4, [r3, #0]
 8002e18:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002e1a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002e1c:	b9bc      	cbnz	r4, 8002e4e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002e1e:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <xTaskIncrementTick+0x100>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	b142      	cbz	r2, 8002e38 <xTaskIncrementTick+0x30>
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	e7fe      	b.n	8002e36 <xTaskIncrementTick+0x2e>
 8002e38:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <xTaskIncrementTick+0x104>)
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	6810      	ldr	r0, [r2, #0]
 8002e3e:	6018      	str	r0, [r3, #0]
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	4a33      	ldr	r2, [pc, #204]	; (8002f10 <xTaskIncrementTick+0x108>)
 8002e44:	6813      	ldr	r3, [r2, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	f7ff fdc7 	bl	80029dc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e4e:	4d31      	ldr	r5, [pc, #196]	; (8002f14 <xTaskIncrementTick+0x10c>)
 8002e50:	4f31      	ldr	r7, [pc, #196]	; (8002f18 <xTaskIncrementTick+0x110>)
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	429c      	cmp	r4, r3
 8002e56:	f04f 0b00 	mov.w	fp, #0
 8002e5a:	d33e      	bcc.n	8002eda <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e5c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002f08 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002e60:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002f28 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e64:	f8d8 2000 	ldr.w	r2, [r8]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	bb72      	cbnz	r2, 8002eca <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	602a      	str	r2, [r5, #0]
					break;
 8002e72:	e032      	b.n	8002eda <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e74:	f106 0a04 	add.w	sl, r6, #4
 8002e78:	4650      	mov	r0, sl
 8002e7a:	f7ff f8d0 	bl	800201e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e7e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002e80:	b119      	cbz	r1, 8002e8a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e82:	f106 0018 	add.w	r0, r6, #24
 8002e86:	f7ff f8ca 	bl	800201e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e8a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002e8c:	f8d9 3000 	ldr.w	r3, [r9]
 8002e90:	2201      	movs	r2, #1
 8002e92:	fa02 f100 	lsl.w	r1, r2, r0
 8002e96:	4319      	orrs	r1, r3
 8002e98:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <xTaskIncrementTick+0x114>)
 8002e9a:	f8c9 1000 	str.w	r1, [r9]
 8002e9e:	f04f 0e14 	mov.w	lr, #20
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	fb0e 3000 	mla	r0, lr, r0, r3
 8002ea8:	f7ff f896 	bl	8001fd8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002eac:	6838      	ldr	r0, [r7, #0]
 8002eae:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002eb0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002eb2:	4291      	cmp	r1, r2
 8002eb4:	bf28      	it	cs
 8002eb6:	f04f 0b01 	movcs.w	fp, #1
 8002eba:	e7d3      	b.n	8002e64 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002ebc:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <xTaskIncrementTick+0x118>)
 8002ebe:	6813      	ldr	r3, [r2, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002ec4:	f04f 0b00 	mov.w	fp, #0
 8002ec8:	e011      	b.n	8002eee <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002eca:	f8d8 2000 	ldr.w	r2, [r8]
 8002ece:	68d2      	ldr	r2, [r2, #12]
 8002ed0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ed2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002ed4:	428c      	cmp	r4, r1
 8002ed6:	d2cd      	bcs.n	8002e74 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002ed8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <xTaskIncrementTick+0x114>)
 8002ede:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ee0:	2214      	movs	r2, #20
 8002ee2:	434a      	muls	r2, r1
 8002ee4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002ee6:	2a02      	cmp	r2, #2
 8002ee8:	bf28      	it	cs
 8002eea:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002eee:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <xTaskIncrementTick+0x11c>)
 8002ef0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	bf18      	it	ne
 8002ef6:	f04f 0b01 	movne.w	fp, #1
}
 8002efa:	4658      	mov	r0, fp
 8002efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f00:	20003d54 	.word	0x20003d54
 8002f04:	20003dd4 	.word	0x20003dd4
 8002f08:	20003cb0 	.word	0x20003cb0
 8002f0c:	20003cb4 	.word	0x20003cb4
 8002f10:	20003d90 	.word	0x20003d90
 8002f14:	20003d8c 	.word	0x20003d8c
 8002f18:	20003cac 	.word	0x20003cac
 8002f1c:	20003cb8 	.word	0x20003cb8
 8002f20:	20003d50 	.word	0x20003d50
 8002f24:	20003dd8 	.word	0x20003dd8
 8002f28:	20003d5c 	.word	0x20003d5c

08002f2c <xTaskResumeAll>:
{
 8002f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002f30:	4c31      	ldr	r4, [pc, #196]	; (8002ff8 <xTaskResumeAll+0xcc>)
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	b943      	cbnz	r3, 8002f48 <xTaskResumeAll+0x1c>
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	e7fe      	b.n	8002f46 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002f48:	f7ff f8d4 	bl	80020f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f52:	6824      	ldr	r4, [r4, #0]
 8002f54:	b12c      	cbz	r4, 8002f62 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002f56:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002f58:	f7ff f8ee 	bl	8002138 <vPortExitCritical>
}
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <xTaskResumeAll+0xd0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f5      	beq.n	8002f56 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f6a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003014 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002f6e:	4f24      	ldr	r7, [pc, #144]	; (8003000 <xTaskResumeAll+0xd4>)
 8002f70:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003018 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f74:	f8d9 3000 	ldr.w	r3, [r9]
 8002f78:	b9e3      	cbnz	r3, 8002fb4 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002f7a:	b10c      	cbz	r4, 8002f80 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002f7c:	f7ff fd2e 	bl	80029dc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f80:	4d20      	ldr	r5, [pc, #128]	; (8003004 <xTaskResumeAll+0xd8>)
 8002f82:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f84:	b144      	cbz	r4, 8002f98 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002f86:	4e20      	ldr	r6, [pc, #128]	; (8003008 <xTaskResumeAll+0xdc>)
 8002f88:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002f8a:	f7ff ff3d 	bl	8002e08 <xTaskIncrementTick>
 8002f8e:	b100      	cbz	r0, 8002f92 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002f90:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f92:	3c01      	subs	r4, #1
 8002f94:	d1f9      	bne.n	8002f8a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002f96:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <xTaskResumeAll+0xdc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0da      	beq.n	8002f56 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <xTaskResumeAll+0xe0>)
 8002fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002fb0:	2401      	movs	r4, #1
 8002fb2:	e7d1      	b.n	8002f58 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fb4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002fb8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fba:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fbc:	f104 0018 	add.w	r0, r4, #24
 8002fc0:	f7ff f82d 	bl	800201e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f7ff f82a 	bl	800201e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fcc:	6839      	ldr	r1, [r7, #0]
 8002fce:	2501      	movs	r5, #1
 8002fd0:	fa05 f302 	lsl.w	r3, r5, r2
 8002fd4:	2014      	movs	r0, #20
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	fb00 8002 	mla	r0, r0, r2, r8
 8002fdc:	4631      	mov	r1, r6
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	f7fe fffa 	bl	8001fd8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <xTaskResumeAll+0xe4>)
 8002fe6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002fee:	bf24      	itt	cs
 8002ff0:	4b05      	ldrcs	r3, [pc, #20]	; (8003008 <xTaskResumeAll+0xdc>)
 8002ff2:	601d      	strcs	r5, [r3, #0]
 8002ff4:	e7be      	b.n	8002f74 <xTaskResumeAll+0x48>
 8002ff6:	bf00      	nop
 8002ff8:	20003d54 	.word	0x20003d54
 8002ffc:	20003d48 	.word	0x20003d48
 8003000:	20003d5c 	.word	0x20003d5c
 8003004:	20003d50 	.word	0x20003d50
 8003008:	20003dd8 	.word	0x20003dd8
 800300c:	e000ed04 	.word	0xe000ed04
 8003010:	20003cac 	.word	0x20003cac
 8003014:	20003d94 	.word	0x20003d94
 8003018:	20003cb8 	.word	0x20003cb8

0800301c <vTaskDelay>:
	{
 800301c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800301e:	b940      	cbnz	r0, 8003032 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <vTaskDelay+0x40>)
 8003022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <vTaskDelay+0x44>)
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	b141      	cbz	r1, 800304a <vTaskDelay+0x2e>
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	e7fe      	b.n	8003048 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800304a:	f7ff fecf 	bl	8002dec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800304e:	f7ff fcd7 	bl	8002a00 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003052:	f7ff ff6b 	bl	8002f2c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003056:	2800      	cmp	r0, #0
 8003058:	d0e2      	beq.n	8003020 <vTaskDelay+0x4>
 800305a:	bd08      	pop	{r3, pc}
 800305c:	e000ed04 	.word	0xe000ed04
 8003060:	20003d54 	.word	0x20003d54

08003064 <prvIdleTask>:
{
 8003064:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003066:	4e17      	ldr	r6, [pc, #92]	; (80030c4 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003068:	4c17      	ldr	r4, [pc, #92]	; (80030c8 <prvIdleTask+0x64>)
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	b963      	cbnz	r3, 8003088 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <prvIdleTask+0x68>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d9f8      	bls.n	8003068 <prvIdleTask+0x4>
				taskYIELD();
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <prvIdleTask+0x6c>)
 8003078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	e7ef      	b.n	8003068 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003088:	f7ff feb0 	bl	8002dec <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800308c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800308e:	f7ff ff4d 	bl	8002f2c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003092:	2d00      	cmp	r5, #0
 8003094:	d0e9      	beq.n	800306a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003096:	f7ff f82d 	bl	80020f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800309a:	68f3      	ldr	r3, [r6, #12]
 800309c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800309e:	1d28      	adds	r0, r5, #4
 80030a0:	f7fe ffbd 	bl	800201e <uxListRemove>
					--uxCurrentNumberOfTasks;
 80030a4:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <prvIdleTask+0x70>)
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80030b2:	f7ff f841 	bl	8002138 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80030b6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80030b8:	f7ff f9d6 	bl	8002468 <vPortFree>
			vPortFree( pxTCB );
 80030bc:	4628      	mov	r0, r5
 80030be:	f7ff f9d3 	bl	8002468 <vPortFree>
 80030c2:	e7d2      	b.n	800306a <prvIdleTask+0x6>
 80030c4:	20003dc0 	.word	0x20003dc0
 80030c8:	20003d4c 	.word	0x20003d4c
 80030cc:	20003cb8 	.word	0x20003cb8
 80030d0:	e000ed04 	.word	0xe000ed04
 80030d4:	20003d48 	.word	0x20003d48

080030d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <vTaskSwitchContext+0x78>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <vTaskSwitchContext+0x7c>)
{
 80030de:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030e0:	b112      	cbz	r2, 80030e8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80030e2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80030e8:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80030ea:	f000 fbdb 	bl	80038a4 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80030ee:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <vTaskSwitchContext+0x80>)
 80030f0:	6814      	ldr	r4, [r2, #0]
 80030f2:	42a0      	cmp	r0, r4
 80030f4:	d905      	bls.n	8003102 <vTaskSwitchContext+0x2a>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <vTaskSwitchContext+0x84>)
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80030fc:	1b1b      	subs	r3, r3, r4
 80030fe:	4403      	add	r3, r0
 8003100:	654b      	str	r3, [r1, #84]	; 0x54
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003102:	4b17      	ldr	r3, [pc, #92]	; (8003160 <vTaskSwitchContext+0x88>)
				ulTaskSwitchedInTime = ulTotalRunTime;
 8003104:	6010      	str	r0, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003106:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f1c3 031f 	rsb	r3, r3, #31
 8003112:	2214      	movs	r2, #20
 8003114:	4913      	ldr	r1, [pc, #76]	; (8003164 <vTaskSwitchContext+0x8c>)
 8003116:	435a      	muls	r2, r3
 8003118:	1888      	adds	r0, r1, r2
 800311a:	588c      	ldr	r4, [r1, r2]
 800311c:	b944      	cbnz	r4, 8003130 <vTaskSwitchContext+0x58>
	__asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	e7fe      	b.n	800312e <vTaskSwitchContext+0x56>
 8003130:	6844      	ldr	r4, [r0, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	6864      	ldr	r4, [r4, #4]
 8003136:	6044      	str	r4, [r0, #4]
 8003138:	440a      	add	r2, r1
 800313a:	4294      	cmp	r4, r2
 800313c:	bf04      	itt	eq
 800313e:	6862      	ldreq	r2, [r4, #4]
 8003140:	6042      	streq	r2, [r0, #4]
 8003142:	2214      	movs	r2, #20
 8003144:	fb02 1303 	mla	r3, r2, r3, r1
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <vTaskSwitchContext+0x84>)
 800314e:	e7c9      	b.n	80030e4 <vTaskSwitchContext+0xc>
 8003150:	20003d54 	.word	0x20003d54
 8003154:	20003dd8 	.word	0x20003dd8
 8003158:	20003d44 	.word	0x20003d44
 800315c:	20003cac 	.word	0x20003cac
 8003160:	20003d5c 	.word	0x20003d5c
 8003164:	20003cb8 	.word	0x20003cb8

08003168 <vTaskSuspend>:
	{
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	4604      	mov	r4, r0
 800316c:	4e29      	ldr	r6, [pc, #164]	; (8003214 <vTaskSuspend+0xac>)
		taskENTER_CRITICAL();
 800316e:	f7fe ffc1 	bl	80020f4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003172:	b904      	cbnz	r4, 8003176 <vTaskSuspend+0xe>
 8003174:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003176:	1d25      	adds	r5, r4, #4
 8003178:	4628      	mov	r0, r5
 800317a:	f7fe ff50 	bl	800201e <uxListRemove>
 800317e:	b960      	cbnz	r0, 800319a <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003180:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003182:	4b25      	ldr	r3, [pc, #148]	; (8003218 <vTaskSuspend+0xb0>)
 8003184:	2114      	movs	r1, #20
 8003186:	4341      	muls	r1, r0
 8003188:	585b      	ldr	r3, [r3, r1]
 800318a:	b933      	cbnz	r3, 800319a <vTaskSuspend+0x32>
 800318c:	4923      	ldr	r1, [pc, #140]	; (800321c <vTaskSuspend+0xb4>)
 800318e:	2201      	movs	r2, #1
 8003190:	680b      	ldr	r3, [r1, #0]
 8003192:	4082      	lsls	r2, r0
 8003194:	ea23 0302 	bic.w	r3, r3, r2
 8003198:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800319a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800319c:	b11b      	cbz	r3, 80031a6 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800319e:	f104 0018 	add.w	r0, r4, #24
 80031a2:	f7fe ff3c 	bl	800201e <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80031a6:	4629      	mov	r1, r5
		if( xSchedulerRunning != pdFALSE )
 80031a8:	4d1d      	ldr	r5, [pc, #116]	; (8003220 <vTaskSuspend+0xb8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80031aa:	481e      	ldr	r0, [pc, #120]	; (8003224 <vTaskSuspend+0xbc>)
 80031ac:	f7fe ff14 	bl	8001fd8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 80031b0:	f7fe ffc2 	bl	8002138 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80031b4:	682a      	ldr	r2, [r5, #0]
 80031b6:	b12a      	cbz	r2, 80031c4 <vTaskSuspend+0x5c>
			taskENTER_CRITICAL();
 80031b8:	f7fe ff9c 	bl	80020f4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 80031bc:	f7ff fc0e 	bl	80029dc <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 80031c0:	f7fe ffba 	bl	8002138 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 80031c4:	6833      	ldr	r3, [r6, #0]
 80031c6:	429c      	cmp	r4, r3
 80031c8:	d122      	bne.n	8003210 <vTaskSuspend+0xa8>
			if( xSchedulerRunning != pdFALSE )
 80031ca:	682b      	ldr	r3, [r5, #0]
 80031cc:	b1a3      	cbz	r3, 80031f8 <vTaskSuspend+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <vTaskSuspend+0xc0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b143      	cbz	r3, 80031e6 <vTaskSuspend+0x7e>
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	e7fe      	b.n	80031e4 <vTaskSuspend+0x7c>
				portYIELD_WITHIN_API();
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <vTaskSuspend+0xc4>)
 80031e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80031f8:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <vTaskSuspend+0xc8>)
 80031fa:	490a      	ldr	r1, [pc, #40]	; (8003224 <vTaskSuspend+0xbc>)
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	6809      	ldr	r1, [r1, #0]
 8003200:	4291      	cmp	r1, r2
 8003202:	d101      	bne.n	8003208 <vTaskSuspend+0xa0>
					pxCurrentTCB = NULL;
 8003204:	6033      	str	r3, [r6, #0]
 8003206:	bd70      	pop	{r4, r5, r6, pc}
	}
 8003208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800320c:	f7ff bf64 	b.w	80030d8 <vTaskSwitchContext>
 8003210:	bd70      	pop	{r4, r5, r6, pc}
 8003212:	bf00      	nop
 8003214:	20003cac 	.word	0x20003cac
 8003218:	20003cb8 	.word	0x20003cb8
 800321c:	20003d5c 	.word	0x20003d5c
 8003220:	20003da8 	.word	0x20003da8
 8003224:	20003dac 	.word	0x20003dac
 8003228:	20003d54 	.word	0x20003d54
 800322c:	e000ed04 	.word	0xe000ed04
 8003230:	20003d48 	.word	0x20003d48

08003234 <vTaskPlaceOnEventList>:
{
 8003234:	b510      	push	{r4, lr}
 8003236:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003238:	b940      	cbnz	r0, 800324c <vTaskPlaceOnEventList+0x18>
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	e7fe      	b.n	800324a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <vTaskPlaceOnEventList+0x30>)
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	3118      	adds	r1, #24
 8003252:	f7fe fecd 	bl	8001ff0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003256:	4620      	mov	r0, r4
 8003258:	2101      	movs	r1, #1
}
 800325a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800325e:	f7ff bbcf 	b.w	8002a00 <prvAddCurrentTaskToDelayedList>
 8003262:	bf00      	nop
 8003264:	20003cac 	.word	0x20003cac

08003268 <xTaskRemoveFromEventList>:
{
 8003268:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800326a:	68c3      	ldr	r3, [r0, #12]
 800326c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800326e:	b944      	cbnz	r4, 8003282 <xTaskRemoveFromEventList+0x1a>
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	e7fe      	b.n	8003280 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003282:	f104 0518 	add.w	r5, r4, #24
 8003286:	4628      	mov	r0, r5
 8003288:	f7fe fec9 	bl	800201e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <xTaskRemoveFromEventList+0x6c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	b9e3      	cbnz	r3, 80032cc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003292:	1d25      	adds	r5, r4, #4
 8003294:	4628      	mov	r0, r5
 8003296:	f7fe fec2 	bl	800201e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800329a:	490f      	ldr	r1, [pc, #60]	; (80032d8 <xTaskRemoveFromEventList+0x70>)
 800329c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800329e:	6808      	ldr	r0, [r1, #0]
 80032a0:	2301      	movs	r3, #1
 80032a2:	4093      	lsls	r3, r2
 80032a4:	4303      	orrs	r3, r0
 80032a6:	600b      	str	r3, [r1, #0]
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <xTaskRemoveFromEventList+0x74>)
 80032aa:	2014      	movs	r0, #20
 80032ac:	4629      	mov	r1, r5
 80032ae:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032b2:	f7fe fe91 	bl	8001fd8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <xTaskRemoveFromEventList+0x78>)
 80032b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80032c0:	bf83      	ittte	hi
 80032c2:	4b08      	ldrhi	r3, [pc, #32]	; (80032e4 <xTaskRemoveFromEventList+0x7c>)
 80032c4:	2001      	movhi	r0, #1
 80032c6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80032c8:	2000      	movls	r0, #0
}
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032cc:	4629      	mov	r1, r5
 80032ce:	4806      	ldr	r0, [pc, #24]	; (80032e8 <xTaskRemoveFromEventList+0x80>)
 80032d0:	e7ef      	b.n	80032b2 <xTaskRemoveFromEventList+0x4a>
 80032d2:	bf00      	nop
 80032d4:	20003d54 	.word	0x20003d54
 80032d8:	20003d5c 	.word	0x20003d5c
 80032dc:	20003cb8 	.word	0x20003cb8
 80032e0:	20003cac 	.word	0x20003cac
 80032e4:	20003dd8 	.word	0x20003dd8
 80032e8:	20003d94 	.word	0x20003d94

080032ec <vTaskSetTimeOutState>:
{
 80032ec:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 80032ee:	b908      	cbnz	r0, 80032f4 <vTaskSetTimeOutState+0x8>
 80032f0:	f7ff fbcc 	bl	8002a8c <eTaskGetState.part.4>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <vTaskSetTimeOutState+0x18>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032fa:	4b03      	ldr	r3, [pc, #12]	; (8003308 <vTaskSetTimeOutState+0x1c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6043      	str	r3, [r0, #4]
 8003300:	bd08      	pop	{r3, pc}
 8003302:	bf00      	nop
 8003304:	20003d90 	.word	0x20003d90
 8003308:	20003dd4 	.word	0x20003dd4

0800330c <xTaskCheckForTimeOut>:
{
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8003310:	4604      	mov	r4, r0
 8003312:	b940      	cbnz	r0, 8003326 <xTaskCheckForTimeOut+0x1a>
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	e7fe      	b.n	8003324 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003326:	b941      	cbnz	r1, 800333a <xTaskCheckForTimeOut+0x2e>
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	e7fe      	b.n	8003338 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800333a:	f7fe fedb 	bl	80020f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <xTaskCheckForTimeOut+0x6c>)
 8003340:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003342:	682b      	ldr	r3, [r5, #0]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	d010      	beq.n	800336a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003348:	4a0c      	ldr	r2, [pc, #48]	; (800337c <xTaskCheckForTimeOut+0x70>)
 800334a:	6820      	ldr	r0, [r4, #0]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	4290      	cmp	r0, r2
 8003350:	6862      	ldr	r2, [r4, #4]
 8003352:	d001      	beq.n	8003358 <xTaskCheckForTimeOut+0x4c>
 8003354:	4291      	cmp	r1, r2
 8003356:	d20d      	bcs.n	8003374 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003358:	1a88      	subs	r0, r1, r2
 800335a:	4283      	cmp	r3, r0
 800335c:	d90a      	bls.n	8003374 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800335e:	1a5b      	subs	r3, r3, r1
 8003360:	4413      	add	r3, r2
 8003362:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003364:	4620      	mov	r0, r4
 8003366:	f7ff ffc1 	bl	80032ec <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800336a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800336c:	f7fe fee4 	bl	8002138 <vPortExitCritical>
}
 8003370:	4620      	mov	r0, r4
 8003372:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8003374:	2401      	movs	r4, #1
 8003376:	e7f9      	b.n	800336c <xTaskCheckForTimeOut+0x60>
 8003378:	20003dd4 	.word	0x20003dd4
 800337c:	20003d90 	.word	0x20003d90

08003380 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003380:	4b01      	ldr	r3, [pc, #4]	; (8003388 <vTaskMissedYield+0x8>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	4770      	bx	lr
 8003388:	20003dd8 	.word	0x20003dd8

0800338c <vTaskGetInfo>:
	{
 800338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003390:	460c      	mov	r4, r1
 8003392:	4617      	mov	r7, r2
 8003394:	4698      	mov	r8, r3
		pxTCB = prvGetTCBFromHandle( xTask );
 8003396:	4606      	mov	r6, r0
 8003398:	bb58      	cbnz	r0, 80033f2 <vTaskGetInfo+0x66>
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <vTaskGetInfo+0x7c>)
 800339c:	681d      	ldr	r5, [r3, #0]
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800339e:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80033a0:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80033a4:	6063      	str	r3, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80033a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80033a8:	6123      	str	r3, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80033aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033ac:	61e3      	str	r3, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80033ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80033b0:	60a3      	str	r3, [r4, #8]
			if( pxTaskStatus->eCurrentState == eSuspended )
 80033b2:	7b23      	ldrb	r3, [r4, #12]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d107      	bne.n	80033c8 <vTaskGetInfo+0x3c>
				vTaskSuspendAll();
 80033b8:	f7ff fd18 	bl	8002dec <vTaskSuspendAll>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80033be:	b10b      	cbz	r3, 80033c4 <vTaskGetInfo+0x38>
						pxTaskStatus->eCurrentState = eBlocked;
 80033c0:	2302      	movs	r3, #2
 80033c2:	7323      	strb	r3, [r4, #12]
				xTaskResumeAll();
 80033c4:	f7ff fdb2 	bl	8002f2c <xTaskResumeAll>
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80033c8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80033ca:	6163      	str	r3, [r4, #20]
		if( eState != eInvalid )
 80033cc:	f1b8 0f05 	cmp.w	r8, #5
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80033d0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80033d2:	61a3      	str	r3, [r4, #24]
		if( eState != eInvalid )
 80033d4:	d00f      	beq.n	80033f6 <vTaskGetInfo+0x6a>
			pxTaskStatus->eCurrentState = eState;
 80033d6:	f884 800c 	strb.w	r8, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 80033da:	b18f      	cbz	r7, 8003400 <vTaskGetInfo+0x74>
 80033dc:	6b29      	ldr	r1, [r5, #48]	; 0x30
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80033de:	460a      	mov	r2, r1
 80033e0:	1a53      	subs	r3, r2, r1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80033e2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80033e6:	28a5      	cmp	r0, #165	; 0xa5
 80033e8:	d0fa      	beq.n	80033e0 <vTaskGetInfo+0x54>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80033ea:	089b      	lsrs	r3, r3, #2
		return ( uint16_t ) ulCount;
 80033ec:	8423      	strh	r3, [r4, #32]
 80033ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f2:	4605      	mov	r5, r0
 80033f4:	e7d3      	b.n	800339e <vTaskGetInfo+0x12>
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 80033f6:	4630      	mov	r0, r6
 80033f8:	f7ff fc40 	bl	8002c7c <eTaskGetState>
 80033fc:	7320      	strb	r0, [r4, #12]
 80033fe:	e7ec      	b.n	80033da <vTaskGetInfo+0x4e>
			pxTaskStatus->usStackHighWaterMark = 0;
 8003400:	8427      	strh	r7, [r4, #32]
 8003402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003406:	bf00      	nop
 8003408:	20003cac 	.word	0x20003cac

0800340c <prvListTasksWithinSingleList>:
	{
 800340c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003410:	680d      	ldr	r5, [r1, #0]
	{
 8003412:	4681      	mov	r9, r0
 8003414:	460c      	mov	r4, r1
 8003416:	4693      	mov	fp, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003418:	b315      	cbz	r5, 8003460 <prvListTasksWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800341a:	684b      	ldr	r3, [r1, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	604b      	str	r3, [r1, #4]
 8003420:	f101 0708 	add.w	r7, r1, #8
 8003424:	42bb      	cmp	r3, r7
 8003426:	bf04      	itt	eq
 8003428:	68cb      	ldreq	r3, [r1, #12]
 800342a:	604b      	streq	r3, [r1, #4]
 800342c:	684b      	ldr	r3, [r1, #4]
 800342e:	f8d3 800c 	ldr.w	r8, [r3, #12]
	UBaseType_t uxTask = 0;
 8003432:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8003434:	f04f 0a24 	mov.w	sl, #36	; 0x24
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8003438:	6863      	ldr	r3, [r4, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	6063      	str	r3, [r4, #4]
 800343e:	429f      	cmp	r7, r3
 8003440:	bf04      	itt	eq
 8003442:	68e3      	ldreq	r3, [r4, #12]
 8003444:	6063      	streq	r3, [r4, #4]
 8003446:	6863      	ldr	r3, [r4, #4]
 8003448:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800344a:	fb0a 9105 	mla	r1, sl, r5, r9
 800344e:	465b      	mov	r3, fp
 8003450:	2201      	movs	r2, #1
 8003452:	4630      	mov	r0, r6
 8003454:	f7ff ff9a 	bl	800338c <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 8003458:	45b0      	cmp	r8, r6
				uxTask++;
 800345a:	f105 0501 	add.w	r5, r5, #1
			} while( pxNextTCB != pxFirstTCB );
 800345e:	d1eb      	bne.n	8003438 <prvListTasksWithinSingleList+0x2c>
	}
 8003460:	4628      	mov	r0, r5
 8003462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003468 <uxTaskGetSystemState>:
	{
 8003468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800346c:	4605      	mov	r5, r0
 800346e:	4617      	mov	r7, r2
		vTaskSuspendAll();
 8003470:	f7ff fcbc 	bl	8002dec <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <uxTaskGetSystemState+0x90>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	428b      	cmp	r3, r1
 800347a:	d83a      	bhi.n	80034f2 <uxTaskGetSystemState+0x8a>
 800347c:	f04f 0800 	mov.w	r8, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003480:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800350c <uxTaskGetSystemState+0xa4>
 8003484:	4644      	mov	r4, r8
 8003486:	2624      	movs	r6, #36	; 0x24
 8003488:	f108 0178 	add.w	r1, r8, #120	; 0x78
 800348c:	fb06 5004 	mla	r0, r6, r4, r5
 8003490:	2201      	movs	r2, #1
 8003492:	4449      	add	r1, r9
 8003494:	f7ff ffba 	bl	800340c <prvListTasksWithinSingleList>
 8003498:	f1a8 0814 	sub.w	r8, r8, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800349c:	f118 0f8c 	cmn.w	r8, #140	; 0x8c
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80034a0:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a2:	d1f1      	bne.n	8003488 <uxTaskGetSystemState+0x20>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80034a4:	4b15      	ldr	r3, [pc, #84]	; (80034fc <uxTaskGetSystemState+0x94>)
 80034a6:	2202      	movs	r2, #2
 80034a8:	6819      	ldr	r1, [r3, #0]
 80034aa:	fb06 5004 	mla	r0, r6, r4, r5
 80034ae:	f7ff ffad 	bl	800340c <prvListTasksWithinSingleList>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <uxTaskGetSystemState+0x98>)
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80034b4:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	2202      	movs	r2, #2
 80034ba:	fb06 5004 	mla	r0, r6, r4, r5
 80034be:	f7ff ffa5 	bl	800340c <prvListTasksWithinSingleList>
 80034c2:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80034c4:	2204      	movs	r2, #4
 80034c6:	490f      	ldr	r1, [pc, #60]	; (8003504 <uxTaskGetSystemState+0x9c>)
 80034c8:	fb06 5004 	mla	r0, r6, r4, r5
 80034cc:	f7ff ff9e 	bl	800340c <prvListTasksWithinSingleList>
 80034d0:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80034d2:	fb06 5004 	mla	r0, r6, r4, r5
 80034d6:	2203      	movs	r2, #3
 80034d8:	490b      	ldr	r1, [pc, #44]	; (8003508 <uxTaskGetSystemState+0xa0>)
 80034da:	f7ff ff97 	bl	800340c <prvListTasksWithinSingleList>
 80034de:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 80034e0:	b117      	cbz	r7, 80034e8 <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80034e2:	f000 f9df 	bl	80038a4 <getRunTimeCounterValue>
 80034e6:	6038      	str	r0, [r7, #0]
		( void ) xTaskResumeAll();
 80034e8:	f7ff fd20 	bl	8002f2c <xTaskResumeAll>
	}
 80034ec:	4620      	mov	r0, r4
 80034ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80034f2:	2400      	movs	r4, #0
 80034f4:	e7f8      	b.n	80034e8 <uxTaskGetSystemState+0x80>
 80034f6:	bf00      	nop
 80034f8:	20003d48 	.word	0x20003d48
 80034fc:	20003cb0 	.word	0x20003cb0
 8003500:	20003cb4 	.word	0x20003cb4
 8003504:	20003dc0 	.word	0x20003dc0
 8003508:	20003dac 	.word	0x20003dac
 800350c:	20003cb8 	.word	0x20003cb8

08003510 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 8003510:	b908      	cbnz	r0, 8003516 <uxTaskGetStackHighWaterMark+0x6>
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <uxTaskGetStackHighWaterMark+0x1c>)
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	6b02      	ldr	r2, [r0, #48]	; 0x30
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003518:	4613      	mov	r3, r2
 800351a:	1a98      	subs	r0, r3, r2
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800351c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003520:	29a5      	cmp	r1, #165	; 0xa5
 8003522:	d0fa      	beq.n	800351a <uxTaskGetStackHighWaterMark+0xa>
	}
 8003524:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20003cac 	.word	0x20003cac

08003530 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <xTaskGetSchedulerState+0x18>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b133      	cbz	r3, 8003544 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <xTaskGetSchedulerState+0x1c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800353c:	bf0c      	ite	eq
 800353e:	2002      	moveq	r0, #2
 8003540:	2000      	movne	r0, #0
 8003542:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003544:	2001      	movs	r0, #1
	}
 8003546:	4770      	bx	lr
 8003548:	20003da8 	.word	0x20003da8
 800354c:	20003d54 	.word	0x20003d54

08003550 <vTaskPriorityInherit>:
	{
 8003550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003554:	4604      	mov	r4, r0
 8003556:	2800      	cmp	r0, #0
 8003558:	d038      	beq.n	80035cc <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800355a:	4d1d      	ldr	r5, [pc, #116]	; (80035d0 <vTaskPriorityInherit+0x80>)
 800355c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800355e:	682a      	ldr	r2, [r5, #0]
 8003560:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003562:	4293      	cmp	r3, r2
 8003564:	d232      	bcs.n	80035cc <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003566:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003568:	4e1a      	ldr	r6, [pc, #104]	; (80035d4 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800356a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356c:	bfa1      	itttt	ge
 800356e:	682a      	ldrge	r2, [r5, #0]
 8003570:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003572:	f1c2 0207 	rsbge	r2, r2, #7
 8003576:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003578:	2714      	movs	r7, #20
 800357a:	6942      	ldr	r2, [r0, #20]
 800357c:	fb07 6303 	mla	r3, r7, r3, r6
 8003580:	429a      	cmp	r2, r3
 8003582:	d120      	bne.n	80035c6 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003584:	f100 0804 	add.w	r8, r0, #4
 8003588:	4640      	mov	r0, r8
 800358a:	f7fe fd48 	bl	800201e <uxListRemove>
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <vTaskPriorityInherit+0x88>)
 8003590:	b948      	cbnz	r0, 80035a6 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003592:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003594:	4347      	muls	r7, r0
 8003596:	59f3      	ldr	r3, [r6, r7]
 8003598:	b92b      	cbnz	r3, 80035a6 <vTaskPriorityInherit+0x56>
 800359a:	6813      	ldr	r3, [r2, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	4081      	lsls	r1, r0
 80035a0:	ea23 0301 	bic.w	r3, r3, r1
 80035a4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80035a6:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80035a8:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80035aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80035ac:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80035ae:	2301      	movs	r3, #1
 80035b0:	4083      	lsls	r3, r0
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	2314      	movs	r3, #20
 80035b8:	4641      	mov	r1, r8
 80035ba:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80035be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80035c2:	f7fe bd09 	b.w	8001fd8 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80035c6:	682b      	ldr	r3, [r5, #0]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	62c3      	str	r3, [r0, #44]	; 0x2c
 80035cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d0:	20003cac 	.word	0x20003cac
 80035d4:	20003cb8 	.word	0x20003cb8
 80035d8:	20003d5c 	.word	0x20003d5c

080035dc <xTaskPriorityDisinherit>:
	{
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80035de:	4604      	mov	r4, r0
 80035e0:	b908      	cbnz	r0, 80035e6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80035e2:	2000      	movs	r0, #0
 80035e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <xTaskPriorityDisinherit+0x94>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4298      	cmp	r0, r3
 80035ec:	d008      	beq.n	8003600 <xTaskPriorityDisinherit+0x24>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	e7fe      	b.n	80035fe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003600:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003602:	b943      	cbnz	r3, 8003616 <xTaskPriorityDisinherit+0x3a>
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	e7fe      	b.n	8003614 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003616:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003618:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800361a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800361c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800361e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003620:	d0df      	beq.n	80035e2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1dd      	bne.n	80035e2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003626:	1d05      	adds	r5, r0, #4
 8003628:	4628      	mov	r0, r5
 800362a:	f7fe fcf8 	bl	800201e <uxListRemove>
 800362e:	4e11      	ldr	r6, [pc, #68]	; (8003674 <xTaskPriorityDisinherit+0x98>)
 8003630:	4a11      	ldr	r2, [pc, #68]	; (8003678 <xTaskPriorityDisinherit+0x9c>)
 8003632:	b950      	cbnz	r0, 800364a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003634:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003636:	2114      	movs	r1, #20
 8003638:	4379      	muls	r1, r7
 800363a:	5873      	ldr	r3, [r6, r1]
 800363c:	b92b      	cbnz	r3, 800364a <xTaskPriorityDisinherit+0x6e>
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	2001      	movs	r0, #1
 8003642:	40b8      	lsls	r0, r7
 8003644:	ea23 0300 	bic.w	r3, r3, r0
 8003648:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800364a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800364c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800364e:	f1c3 0107 	rsb	r1, r3, #7
 8003652:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003654:	6811      	ldr	r1, [r2, #0]
 8003656:	2401      	movs	r4, #1
 8003658:	fa04 f003 	lsl.w	r0, r4, r3
 800365c:	4308      	orrs	r0, r1
 800365e:	6010      	str	r0, [r2, #0]
 8003660:	2014      	movs	r0, #20
 8003662:	fb00 6003 	mla	r0, r0, r3, r6
 8003666:	4629      	mov	r1, r5
 8003668:	f7fe fcb6 	bl	8001fd8 <vListInsertEnd>
					xReturn = pdTRUE;
 800366c:	4620      	mov	r0, r4
	}
 800366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003670:	20003cac 	.word	0x20003cac
 8003674:	20003cb8 	.word	0x20003cb8
 8003678:	20003d5c 	.word	0x20003d5c

0800367c <vTaskGetRunTimeStats>:
	{
 800367c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 8003680:	4b27      	ldr	r3, [pc, #156]	; (8003720 <vTaskGetRunTimeStats+0xa4>)
	{
 8003682:	b085      	sub	sp, #20
		uxArraySize = uxCurrentNumberOfTasks;
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	9201      	str	r2, [sp, #4]
		*pcWriteBuffer = 0x00;
 8003688:	2700      	movs	r7, #0
 800368a:	7007      	strb	r7, [r0, #0]
	{
 800368c:	4605      	mov	r5, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	2424      	movs	r4, #36	; 0x24
 8003692:	4360      	muls	r0, r4
 8003694:	f7fe fe5a 	bl	800234c <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8003698:	4606      	mov	r6, r0
 800369a:	b168      	cbz	r0, 80036b8 <vTaskGetRunTimeStats+0x3c>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800369c:	aa03      	add	r2, sp, #12
 800369e:	9901      	ldr	r1, [sp, #4]
 80036a0:	f7ff fee2 	bl	8003468 <uxTaskGetSystemState>
			ulTotalTime /= 100UL;
 80036a4:	9b03      	ldr	r3, [sp, #12]
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80036a6:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 80036a8:	2264      	movs	r2, #100	; 0x64
 80036aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ae:	9303      	str	r3, [sp, #12]
			if( ulTotalTime > 0 )
 80036b0:	b92b      	cbnz	r3, 80036be <vTaskGetRunTimeStats+0x42>
			vPortFree( pxTaskStatusArray );
 80036b2:	4630      	mov	r0, r6
 80036b4:	f7fe fed8 	bl	8002468 <vPortFree>
	}
 80036b8:	b005      	add	sp, #20
 80036ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 80036be:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003724 <vTaskGetRunTimeStats+0xa8>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 80036c2:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8003728 <vTaskGetRunTimeStats+0xac>
				for( x = 0; x < uxArraySize; x++ )
 80036c6:	9702      	str	r7, [sp, #8]
 80036c8:	9a02      	ldr	r2, [sp, #8]
 80036ca:	9b01      	ldr	r3, [sp, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d2f0      	bcs.n	80036b2 <vTaskGetRunTimeStats+0x36>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80036d0:	9b02      	ldr	r3, [sp, #8]
 80036d2:	fb04 6303 	mla	r3, r4, r3, r6
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80036d6:	4628      	mov	r0, r5
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80036d8:	699f      	ldr	r7, [r3, #24]
 80036da:	9b03      	ldr	r3, [sp, #12]
 80036dc:	fbb7 f7f3 	udiv	r7, r7, r3
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80036e0:	9b02      	ldr	r3, [sp, #8]
 80036e2:	fb04 6303 	mla	r3, r4, r3, r6
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	f7ff f966 	bl	80029b8 <prvWriteNameToBuffer>
 80036ec:	4605      	mov	r5, r0
					if( ulStatsAsPercentage > 0UL )
 80036ee:	b17f      	cbz	r7, 8003710 <vTaskGetRunTimeStats+0x94>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 80036f0:	9a02      	ldr	r2, [sp, #8]
 80036f2:	fb04 6202 	mla	r2, r4, r2, r6
 80036f6:	463b      	mov	r3, r7
 80036f8:	6992      	ldr	r2, [r2, #24]
 80036fa:	4649      	mov	r1, r9
 80036fc:	f000 fd8a 	bl	8004214 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 8003700:	4628      	mov	r0, r5
 8003702:	f7fc fd85 	bl	8000210 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 8003706:	9b02      	ldr	r3, [sp, #8]
 8003708:	3301      	adds	r3, #1
					pcWriteBuffer += strlen( pcWriteBuffer );
 800370a:	4405      	add	r5, r0
				for( x = 0; x < uxArraySize; x++ )
 800370c:	9302      	str	r3, [sp, #8]
 800370e:	e7db      	b.n	80036c8 <vTaskGetRunTimeStats+0x4c>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8003710:	9b02      	ldr	r3, [sp, #8]
 8003712:	fb04 6303 	mla	r3, r4, r3, r6
 8003716:	4641      	mov	r1, r8
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	f000 fd7b 	bl	8004214 <siprintf>
 800371e:	e7ef      	b.n	8003700 <vTaskGetRunTimeStats+0x84>
 8003720:	20003d48 	.word	0x20003d48
 8003724:	08004b14 	.word	0x08004b14
 8003728:	08004b08 	.word	0x08004b08

0800372c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <pvTaskIncrementMutexHeldCount+0x14>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	b11a      	cbz	r2, 800373a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003736:	3201      	adds	r2, #1
 8003738:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800373a:	6818      	ldr	r0, [r3, #0]
	}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20003cac 	.word	0x20003cac

08003744 <xTaskNotifyWait>:
	{
 8003744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003748:	4c1f      	ldr	r4, [pc, #124]	; (80037c8 <xTaskNotifyWait+0x84>)
	{
 800374a:	461e      	mov	r6, r3
 800374c:	4680      	mov	r8, r0
 800374e:	460f      	mov	r7, r1
 8003750:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 8003752:	f7fe fccf 	bl	80020f4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800375c:	2b02      	cmp	r3, #2
 800375e:	d014      	beq.n	800378a <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003764:	ea22 0208 	bic.w	r2, r2, r8
 8003768:	659a      	str	r2, [r3, #88]	; 0x58
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	2101      	movs	r1, #1
 800376e:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
				if( xTicksToWait > ( TickType_t ) 0 )
 8003772:	b156      	cbz	r6, 800378a <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003774:	4630      	mov	r0, r6
 8003776:	f7ff f943 	bl	8002a00 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <xTaskNotifyWait+0x88>)
 800377c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800378a:	f7fe fcd5 	bl	8002138 <vPortExitCritical>
		taskENTER_CRITICAL();
 800378e:	f7fe fcb1 	bl	80020f4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8003792:	b115      	cbz	r5, 800379a <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037a0:	2b01      	cmp	r3, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80037a2:	bf1f      	itttt	ne
 80037a4:	6823      	ldrne	r3, [r4, #0]
 80037a6:	6d99      	ldrne	r1, [r3, #88]	; 0x58
 80037a8:	43b9      	bicne	r1, r7
 80037aa:	6599      	strne	r1, [r3, #88]	; 0x58
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 80037b2:	bf14      	ite	ne
 80037b4:	2501      	movne	r5, #1
				xReturn = pdFALSE;
 80037b6:	2500      	moveq	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		taskEXIT_CRITICAL();
 80037bc:	f7fe fcbc 	bl	8002138 <vPortExitCritical>
	}
 80037c0:	4628      	mov	r0, r5
 80037c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c6:	bf00      	nop
 80037c8:	20003cac 	.word	0x20003cac
 80037cc:	e000ed04 	.word	0xe000ed04

080037d0 <xTaskGenericNotify>:
	{
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	460f      	mov	r7, r1
 80037d4:	4616      	mov	r6, r2
 80037d6:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 80037d8:	4604      	mov	r4, r0
 80037da:	b940      	cbnz	r0, 80037ee <xTaskGenericNotify+0x1e>
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	e7fe      	b.n	80037ec <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 80037ee:	f7fe fc81 	bl	80020f4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80037f2:	b10d      	cbz	r5, 80037f8 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80037f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037f6:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80037f8:	f894 505c 	ldrb.w	r5, [r4, #92]	; 0x5c
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80037fc:	2302      	movs	r3, #2
			switch( eAction )
 80037fe:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003800:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003802:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
			switch( eAction )
 8003806:	2a03      	cmp	r2, #3
 8003808:	d80a      	bhi.n	8003820 <xTaskGenericNotify+0x50>
 800380a:	e8df f002 	tbb	[pc, r2]
 800380e:	0602      	.short	0x0602
 8003810:	1004      	.short	0x1004
					pxTCB->ulNotifiedValue |= ulValue;
 8003812:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003814:	430f      	orrs	r7, r1
						pxTCB->ulNotifiedValue = ulValue;
 8003816:	65a7      	str	r7, [r4, #88]	; 0x58
 8003818:	e002      	b.n	8003820 <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 800381a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800381c:	3301      	adds	r3, #1
 800381e:	65a3      	str	r3, [r4, #88]	; 0x58
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003820:	2d01      	cmp	r5, #1
 8003822:	d008      	beq.n	8003836 <xTaskGenericNotify+0x66>
	{
 8003824:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8003826:	f7fe fc87 	bl	8002138 <vPortExitCritical>
	}
 800382a:	4628      	mov	r0, r5
 800382c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800382e:	2d02      	cmp	r5, #2
 8003830:	d1f1      	bne.n	8003816 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 8003832:	2500      	movs	r5, #0
 8003834:	e7f7      	b.n	8003826 <xTaskGenericNotify+0x56>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003836:	1d26      	adds	r6, r4, #4
 8003838:	4630      	mov	r0, r6
 800383a:	f7fe fbf0 	bl	800201e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800383e:	4914      	ldr	r1, [pc, #80]	; (8003890 <xTaskGenericNotify+0xc0>)
 8003840:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003842:	6808      	ldr	r0, [r1, #0]
 8003844:	fa05 f302 	lsl.w	r3, r5, r2
 8003848:	4303      	orrs	r3, r0
 800384a:	600b      	str	r3, [r1, #0]
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <xTaskGenericNotify+0xc4>)
 800384e:	2014      	movs	r0, #20
 8003850:	fb00 3002 	mla	r0, r0, r2, r3
 8003854:	4631      	mov	r1, r6
 8003856:	f7fe fbbf 	bl	8001fd8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800385a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800385c:	b143      	cbz	r3, 8003870 <xTaskGenericNotify+0xa0>
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	e7fe      	b.n	800386e <xTaskGenericNotify+0x9e>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <xTaskGenericNotify+0xc8>)
 8003872:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	429a      	cmp	r2, r3
 800387a:	d9d3      	bls.n	8003824 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <xTaskGenericNotify+0xcc>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	e7cb      	b.n	8003826 <xTaskGenericNotify+0x56>
 800388e:	bf00      	nop
 8003890:	20003d5c 	.word	0x20003d5c
 8003894:	20003cb8 	.word	0x20003cb8
 8003898:	20003cac 	.word	0x20003cac
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80038a0:	4770      	bx	lr
	...

080038a4 <getRunTimeCounterValue>:
extern TIM_HandleTypeDef htim4;

uint32_t tim4_ov_counter;
__weak unsigned long getRunTimeCounterValue(void)
{
	return ((tim4_ov_counter << 16) + (uint32_t)__HAL_TIM_GET_COUNTER(&htim4));
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <getRunTimeCounterValue+0x10>)
 80038a6:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <getRunTimeCounterValue+0x14>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6810      	ldr	r0, [r2, #0]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80038ae:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 80038b2:	4770      	bx	lr
 80038b4:	20003df4 	.word	0x20003df4
 80038b8:	20003dec 	.word	0x20003dec

080038bc <Thread_LED>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Thread_LED */
void Thread_LED(void const * argument)
{
 80038bc:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
	vTaskSuspend(myTask06Handle); //Suspend Thread_GPIO_Trig
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <Thread_LED+0x20>)
  /* Infinite loop */
  for(;;)
  {
	  // Toggle LED every 1 sec
	  HAL_GPIO_TogglePin(LED_G_PORT, LED_G_PIN);
 80038c0:	4c07      	ldr	r4, [pc, #28]	; (80038e0 <Thread_LED+0x24>)
	vTaskSuspend(myTask06Handle); //Suspend Thread_GPIO_Trig
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	f7ff fc50 	bl	8003168 <vTaskSuspend>
	  HAL_GPIO_TogglePin(LED_G_PORT, LED_G_PIN);
 80038c8:	4620      	mov	r0, r4
 80038ca:	2120      	movs	r1, #32
 80038cc:	f7fd fa83 	bl	8000dd6 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80038d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038d4:	f7fe fb67 	bl	8001fa6 <osDelay>
 80038d8:	e7f6      	b.n	80038c8 <Thread_LED+0xc>
 80038da:	bf00      	nop
 80038dc:	20003ed0 	.word	0x20003ed0
 80038e0:	40020000 	.word	0x40020000

080038e4 <Thread_GPIO_Trig>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread_GPIO_Trig */
void Thread_GPIO_Trig(void const * argument)
{
 80038e4:	b508      	push	{r3, lr}

  /* Infinite loop */
  for(;;)
  {
	// Toggle LED every 0.5 sec
	HAL_GPIO_TogglePin(LED_G_PORT, LED_G_PIN);
 80038e6:	4c05      	ldr	r4, [pc, #20]	; (80038fc <Thread_GPIO_Trig+0x18>)
 80038e8:	4620      	mov	r0, r4
 80038ea:	2120      	movs	r1, #32
 80038ec:	f7fd fa73 	bl	8000dd6 <HAL_GPIO_TogglePin>
	osDelay(500);
 80038f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038f4:	f7fe fb57 	bl	8001fa6 <osDelay>
 80038f8:	e7f6      	b.n	80038e8 <Thread_GPIO_Trig+0x4>
 80038fa:	bf00      	nop
 80038fc:	40020000 	.word	0x40020000

08003900 <Thread_UART>:
{
 8003900:	b507      	push	{r0, r1, r2, lr}
	  if((HAL_UART_Receive_IT(&huart2, Rx_data, 1))== HAL_OK)  // receive byte successful
 8003902:	4c1a      	ldr	r4, [pc, #104]	; (800396c <Thread_UART+0x6c>)
	  			xTaskNotify(myTask07Handle, 0x11, eSetBits);  //Notify Thread_StartStats
 8003904:	4d1a      	ldr	r5, [pc, #104]	; (8003970 <Thread_UART+0x70>)
	  if((HAL_UART_Receive_IT(&huart2, Rx_data, 1))== HAL_OK)  // receive byte successful
 8003906:	2201      	movs	r2, #1
 8003908:	a901      	add	r1, sp, #4
 800390a:	4620      	mov	r0, r4
 800390c:	f7fe fa26 	bl	8001d5c <HAL_UART_Receive_IT>
 8003910:	bb38      	cbnz	r0, 8003962 <Thread_UART+0x62>
	  		if ((Rx_data[0]=='h')||(Rx_data[0]=='H')||(Rx_data[0] == '?'))
 8003912:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003916:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 800391a:	2a48      	cmp	r2, #72	; 0x48
 800391c:	d001      	beq.n	8003922 <Thread_UART+0x22>
 800391e:	2b3f      	cmp	r3, #63	; 0x3f
 8003920:	d106      	bne.n	8003930 <Thread_UART+0x30>
	  			xTaskNotify(myTask05Handle, 0x01, eSetBits);  // Notify Thread_Help
 8003922:	4814      	ldr	r0, [pc, #80]	; (8003974 <Thread_UART+0x74>)
 8003924:	2201      	movs	r2, #1
 8003926:	2300      	movs	r3, #0
 8003928:	4611      	mov	r1, r2
 800392a:	6800      	ldr	r0, [r0, #0]
 800392c:	f7ff ff50 	bl	80037d0 <xTaskGenericNotify>
	  		if ((Rx_data[0]=='t')||(Rx_data[0]=='T'))
 8003930:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003934:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003938:	2b54      	cmp	r3, #84	; 0x54
 800393a:	d106      	bne.n	800394a <Thread_UART+0x4a>
	  			xTaskNotify(myTask04Handle, 0x10, eSetBits);  // Notify Thread_ADC
 800393c:	480e      	ldr	r0, [pc, #56]	; (8003978 <Thread_UART+0x78>)
 800393e:	2300      	movs	r3, #0
 8003940:	2201      	movs	r2, #1
 8003942:	2110      	movs	r1, #16
 8003944:	6800      	ldr	r0, [r0, #0]
 8003946:	f7ff ff43 	bl	80037d0 <xTaskGenericNotify>
	  		if ((Rx_data[0]=='s')||(Rx_data[0]=='S'))
 800394a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800394e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003952:	2b53      	cmp	r3, #83	; 0x53
 8003954:	d105      	bne.n	8003962 <Thread_UART+0x62>
	  			xTaskNotify(myTask07Handle, 0x11, eSetBits);  //Notify Thread_StartStats
 8003956:	2300      	movs	r3, #0
 8003958:	2201      	movs	r2, #1
 800395a:	2111      	movs	r1, #17
 800395c:	6828      	ldr	r0, [r5, #0]
 800395e:	f7ff ff37 	bl	80037d0 <xTaskGenericNotify>
    osDelay(1);
 8003962:	2001      	movs	r0, #1
 8003964:	f7fe fb1f 	bl	8001fa6 <osDelay>
	  if((HAL_UART_Receive_IT(&huart2, Rx_data, 1))== HAL_OK)  // receive byte successful
 8003968:	e7cd      	b.n	8003906 <Thread_UART+0x6>
 800396a:	bf00      	nop
 800396c:	20003e90 	.word	0x20003e90
 8003970:	20003e88 	.word	0x20003e88
 8003974:	20003e30 	.word	0x20003e30
 8003978:	20003e34 	.word	0x20003e34

0800397c <Thread_GPIO>:
{
 800397c:	b58f      	push	{r0, r1, r2, r3, r7, lr}
	uint8_t msg1[] = "Triggered!\n\r";
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <Thread_GPIO+0x7c>)
 8003980:	466a      	mov	r2, sp
 8003982:	f103 0508 	add.w	r5, r3, #8
 8003986:	466e      	mov	r6, sp
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	4614      	mov	r4, r2
 800398e:	c403      	stmia	r4!, {r0, r1}
 8003990:	3308      	adds	r3, #8
 8003992:	42ab      	cmp	r3, r5
 8003994:	4622      	mov	r2, r4
 8003996:	d1f7      	bne.n	8003988 <Thread_GPIO+0xc>
 8003998:	6818      	ldr	r0, [r3, #0]
	  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))  // Check if User button is pressed
 800399a:	4f18      	ldr	r7, [pc, #96]	; (80039fc <Thread_GPIO+0x80>)
	uint8_t msg1[] = "Triggered!\n\r";
 800399c:	791b      	ldrb	r3, [r3, #4]
		 vTaskSuspend(defaultTaskHandle);  // Suspend Thread_GPIO
 800399e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8003a08 <Thread_GPIO+0x8c>
		 vTaskResume(myTask06Handle);   // Resume Thread_GPIO_Trig
 80039a2:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003a0c <Thread_GPIO+0x90>
	uint8_t msg1[] = "Triggered!\n\r";
 80039a6:	6020      	str	r0, [r4, #0]
 80039a8:	7123      	strb	r3, [r4, #4]
	  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))  // Check if User button is pressed
 80039aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039ae:	4638      	mov	r0, r7
 80039b0:	f7fd fa06 	bl	8000dc0 <HAL_GPIO_ReadPin>
 80039b4:	4604      	mov	r4, r0
 80039b6:	b9d0      	cbnz	r0, 80039ee <Thread_GPIO+0x72>
		 vTaskSuspend(defaultTaskHandle);  // Suspend Thread_GPIO
 80039b8:	f8d8 0000 	ldr.w	r0, [r8]
		 xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);  // Mutex for shared resource UART
 80039bc:	4d10      	ldr	r5, [pc, #64]	; (8003a00 <Thread_GPIO+0x84>)
		 vTaskSuspend(defaultTaskHandle);  // Suspend Thread_GPIO
 80039be:	f7ff fbd3 	bl	8003168 <vTaskSuspend>
		 vTaskResume(myTask06Handle);   // Resume Thread_GPIO_Trig
 80039c2:	f8d9 0000 	ldr.w	r0, [r9]
 80039c6:	f7ff f991 	bl	8002cec <vTaskResume>
		 xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);  // Mutex for shared resource UART
 80039ca:	4623      	mov	r3, r4
 80039cc:	f04f 32ff 	mov.w	r2, #4294967295
 80039d0:	4621      	mov	r1, r4
 80039d2:	6828      	ldr	r0, [r5, #0]
 80039d4:	f7fe ff2c 	bl	8002830 <xQueueGenericReceive>
	  	 HAL_UART_Transmit_IT(&huart2, msg1, 13);
 80039d8:	220d      	movs	r2, #13
 80039da:	4631      	mov	r1, r6
 80039dc:	4809      	ldr	r0, [pc, #36]	; (8003a04 <Thread_GPIO+0x88>)
 80039de:	f7fe f99e 	bl	8001d1e <HAL_UART_Transmit_IT>
	  	 xSemaphoreGive(Mutex_UARTHandle); // Release shared resource UART
 80039e2:	4623      	mov	r3, r4
 80039e4:	4622      	mov	r2, r4
 80039e6:	4621      	mov	r1, r4
 80039e8:	6828      	ldr	r0, [r5, #0]
 80039ea:	f7fe fe59 	bl	80026a0 <xQueueGenericSend>
	    osDelay(180); // Based on observations delay found to be optimal to resolve debouncing
 80039ee:	20b4      	movs	r0, #180	; 0xb4
 80039f0:	f7fe fad9 	bl	8001fa6 <osDelay>
	  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))  // Check if User button is pressed
 80039f4:	e7d9      	b.n	80039aa <Thread_GPIO+0x2e>
 80039f6:	bf00      	nop
 80039f8:	08004b25 	.word	0x08004b25
 80039fc:	40020800 	.word	0x40020800
 8003a00:	20003e8c 	.word	0x20003e8c
 8003a04:	20003e90 	.word	0x20003e90
 8003a08:	20003df0 	.word	0x20003df0
 8003a0c:	20003ed0 	.word	0x20003ed0

08003a10 <Thread_Help>:
{
 8003a10:	b500      	push	{lr}
 8003a12:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t msg_help[] = "This code monitors for blue/user button trigger, prints Stats when 's' is pressed and reads ADC1 when asked with letter 't'\n\r";
 8003a14:	227e      	movs	r2, #126	; 0x7e
 8003a16:	4911      	ldr	r1, [pc, #68]	; (8003a5c <Thread_Help+0x4c>)
	  xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);  // Mutex for shared resource UART
 8003a18:	4c11      	ldr	r4, [pc, #68]	; (8003a60 <Thread_Help+0x50>)
    uint8_t msg_help[] = "This code monitors for blue/user button trigger, prints Stats when 's' is pressed and reads ADC1 when asked with letter 't'\n\r";
 8003a1a:	a802      	add	r0, sp, #8
 8003a1c:	f000 fbe6 	bl	80041ec <memcpy>
	  xTaskNotifyWait(pdFALSE, 0xFF, &notifValueHelp, portMAX_DELAY);  // Wait until notification received from Thread_UART
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	aa01      	add	r2, sp, #4
 8003a26:	21ff      	movs	r1, #255	; 0xff
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7ff fe8b 	bl	8003744 <xTaskNotifyWait>
	  if((notifValueHelp & 0x01)!= 0x00)
 8003a2e:	9b01      	ldr	r3, [sp, #4]
 8003a30:	07db      	lsls	r3, r3, #31
 8003a32:	d5f5      	bpl.n	8003a20 <Thread_Help+0x10>
	  xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);  // Mutex for shared resource UART
 8003a34:	2300      	movs	r3, #0
 8003a36:	4619      	mov	r1, r3
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	f7fe fef7 	bl	8002830 <xQueueGenericReceive>
	  HAL_UART_Transmit_IT(&huart2, msg_help,128);
 8003a42:	a902      	add	r1, sp, #8
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	4807      	ldr	r0, [pc, #28]	; (8003a64 <Thread_Help+0x54>)
 8003a48:	f7fe f969 	bl	8001d1e <HAL_UART_Transmit_IT>
	  xSemaphoreGive(Mutex_UARTHandle);  // Release shared resource UART
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4619      	mov	r1, r3
 8003a52:	6820      	ldr	r0, [r4, #0]
 8003a54:	f7fe fe24 	bl	80026a0 <xQueueGenericSend>
 8003a58:	e7e2      	b.n	8003a20 <Thread_Help+0x10>
 8003a5a:	bf00      	nop
 8003a5c:	08004b32 	.word	0x08004b32
 8003a60:	20003e8c 	.word	0x20003e8c
 8003a64:	20003e90 	.word	0x20003e90

08003a68 <Thread_ADC>:
{
 8003a68:	b507      	push	{r0, r1, r2, lr}
	HAL_ADC_Start_IT(&hadc1);
 8003a6a:	4c07      	ldr	r4, [pc, #28]	; (8003a88 <Thread_ADC+0x20>)
	xTaskNotifyWait(pdFALSE, 0xFF, &notifValueADC, portMAX_DELAY);  // Wait until notification received from Thread_UART
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	aa01      	add	r2, sp, #4
 8003a72:	21ff      	movs	r1, #255	; 0xff
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7ff fe65 	bl	8003744 <xTaskNotifyWait>
	if((notifValueADC & 0x10)!= 0x00)
 8003a7a:	9b01      	ldr	r3, [sp, #4]
 8003a7c:	06db      	lsls	r3, r3, #27
 8003a7e:	d5f5      	bpl.n	8003a6c <Thread_ADC+0x4>
	HAL_ADC_Start_IT(&hadc1);
 8003a80:	4620      	mov	r0, r4
 8003a82:	f7fc fec5 	bl	8000810 <HAL_ADC_Start_IT>
 8003a86:	e7f1      	b.n	8003a6c <Thread_ADC+0x4>
 8003a88:	20003e38 	.word	0x20003e38

08003a8c <Thread_StartStats>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread_StartStats */
void Thread_StartStats(void const * argument)
{
 8003a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		  		  	t6stack = uxTaskGetStackHighWaterMark(myTask06Handle);
		  		  	t7stack = uxTaskGetStackHighWaterMark(myTask07Handle);
		  		  	sprintf((char*)msg_buffer, "Stack High Mark: T_default=%ld,T_2=%ld, T_3=%ld, T_4=%ld  T_5=%ld  T_6=%ld  T_7=%ld\n\r", dstack, t2stack, t3stack,t4stack, t5stack, t6stack, t7stack);
		  		  	pTxBuff = msg_buffer;
		  		  	xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);  // Mutex for shared resource UART
		  		  	HAL_UART_Transmit(&huart2, pTxBuff, strlen((const char*)pTxBuff),1000);
 8003a90:	4d3d      	ldr	r5, [pc, #244]	; (8003b88 <Thread_StartStats+0xfc>)
{
 8003a92:	b0c4      	sub	sp, #272	; 0x110
		    xTaskNotifyWait(pdFALSE, 0xFF, &notifValueStats, portMAX_DELAY);  // Wait until notification received from Thread_UART
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295
 8003a98:	aa07      	add	r2, sp, #28
 8003a9a:	21ff      	movs	r1, #255	; 0xff
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f7ff fe51 	bl	8003744 <xTaskNotifyWait>
		  	if((notifValueStats & 0x11)!= 0x00)
 8003aa2:	9b07      	ldr	r3, [sp, #28]
 8003aa4:	f013 0f11 	tst.w	r3, #17
 8003aa8:	d0f4      	beq.n	8003a94 <Thread_StartStats+0x8>
		  		  	vTaskGetRunTimeStats((char*) ps_buffer );
 8003aaa:	a81c      	add	r0, sp, #112	; 0x70
 8003aac:	f7ff fde6 	bl	800367c <vTaskGetRunTimeStats>
		  		  	sprintf((char*)msg_buffer, "Time: %s \n\r", ps_buffer);
 8003ab0:	aa1c      	add	r2, sp, #112	; 0x70
 8003ab2:	4936      	ldr	r1, [pc, #216]	; (8003b8c <Thread_StartStats+0x100>)
 8003ab4:	a808      	add	r0, sp, #32
 8003ab6:	f000 fbad 	bl	8004214 <siprintf>
		  		  	dstack = uxTaskGetStackHighWaterMark(defaultTaskHandle);
 8003aba:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <Thread_StartStats+0x104>)
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	f7ff fd27 	bl	8003510 <uxTaskGetStackHighWaterMark>
		  		  	t2stack = uxTaskGetStackHighWaterMark(myTask02Handle);
 8003ac2:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <Thread_StartStats+0x108>)
		  		  	dstack = uxTaskGetStackHighWaterMark(defaultTaskHandle);
 8003ac4:	4604      	mov	r4, r0
		  		  	t2stack = uxTaskGetStackHighWaterMark(myTask02Handle);
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	f7ff fd22 	bl	8003510 <uxTaskGetStackHighWaterMark>
		  		  	t3stack = uxTaskGetStackHighWaterMark(myTask03Handle);
 8003acc:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <Thread_StartStats+0x10c>)
		  		  	t2stack = uxTaskGetStackHighWaterMark(myTask02Handle);
 8003ace:	4606      	mov	r6, r0
		  		  	t3stack = uxTaskGetStackHighWaterMark(myTask03Handle);
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	f7ff fd1d 	bl	8003510 <uxTaskGetStackHighWaterMark>
		  		  	t4stack = uxTaskGetStackHighWaterMark(myTask04Handle);
 8003ad6:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <Thread_StartStats+0x110>)
		  		  	t3stack = uxTaskGetStackHighWaterMark(myTask03Handle);
 8003ad8:	4607      	mov	r7, r0
		  		  	t4stack = uxTaskGetStackHighWaterMark(myTask04Handle);
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	f7ff fd18 	bl	8003510 <uxTaskGetStackHighWaterMark>
		  		  	t5stack = uxTaskGetStackHighWaterMark(myTask05Handle);
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <Thread_StartStats+0x114>)
		  		  	t4stack = uxTaskGetStackHighWaterMark(myTask04Handle);
 8003ae2:	4680      	mov	r8, r0
		  		  	t5stack = uxTaskGetStackHighWaterMark(myTask05Handle);
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	f7ff fd13 	bl	8003510 <uxTaskGetStackHighWaterMark>
		  		  	t6stack = uxTaskGetStackHighWaterMark(myTask06Handle);
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <Thread_StartStats+0x118>)
		  		  	t5stack = uxTaskGetStackHighWaterMark(myTask05Handle);
 8003aec:	4681      	mov	r9, r0
		  		  	t6stack = uxTaskGetStackHighWaterMark(myTask06Handle);
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	f7ff fd0e 	bl	8003510 <uxTaskGetStackHighWaterMark>
		  		  	t7stack = uxTaskGetStackHighWaterMark(myTask07Handle);
 8003af4:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <Thread_StartStats+0x11c>)
		  		  	t6stack = uxTaskGetStackHighWaterMark(myTask06Handle);
 8003af6:	4682      	mov	sl, r0
		  		  	t7stack = uxTaskGetStackHighWaterMark(myTask07Handle);
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	f7ff fd09 	bl	8003510 <uxTaskGetStackHighWaterMark>
		  		  	sprintf((char*)msg_buffer, "Stack High Mark: T_default=%ld,T_2=%ld, T_3=%ld, T_4=%ld  T_5=%ld  T_6=%ld  T_7=%ld\n\r", dstack, t2stack, t3stack,t4stack, t5stack, t6stack, t7stack);
 8003afe:	4633      	mov	r3, r6
 8003b00:	9004      	str	r0, [sp, #16]
 8003b02:	4622      	mov	r2, r4
 8003b04:	e88d 0780 	stmia.w	sp, {r7, r8, r9, sl}
		  		  	xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);  // Mutex for shared resource UART
 8003b08:	4c28      	ldr	r4, [pc, #160]	; (8003bac <Thread_StartStats+0x120>)
		  		  	sprintf((char*)msg_buffer, "Stack High Mark: T_default=%ld,T_2=%ld, T_3=%ld, T_4=%ld  T_5=%ld  T_6=%ld  T_7=%ld\n\r", dstack, t2stack, t3stack,t4stack, t5stack, t6stack, t7stack);
 8003b0a:	4929      	ldr	r1, [pc, #164]	; (8003bb0 <Thread_StartStats+0x124>)
 8003b0c:	a808      	add	r0, sp, #32
 8003b0e:	f000 fb81 	bl	8004214 <siprintf>
		  		  	xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);  // Mutex for shared resource UART
 8003b12:	2300      	movs	r3, #0
 8003b14:	4619      	mov	r1, r3
 8003b16:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	f7fe fe88 	bl	8002830 <xQueueGenericReceive>
		  		  	HAL_UART_Transmit(&huart2, pTxBuff, strlen((const char*)pTxBuff),1000);
 8003b20:	a808      	add	r0, sp, #32
 8003b22:	f7fc fb75 	bl	8000210 <strlen>
 8003b26:	a908      	add	r1, sp, #32
 8003b28:	b282      	uxth	r2, r0
 8003b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f7fe f898 	bl	8001c64 <HAL_UART_Transmit>
		  		  	xSemaphoreGive(Mutex_UARTHandle); // Release shared resource UART
 8003b34:	2300      	movs	r3, #0
 8003b36:	461a      	mov	r2, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6820      	ldr	r0, [r4, #0]
 8003b3c:	f7fe fdb0 	bl	80026a0 <xQueueGenericSend>

		  		  	TickType_t FinalTicks1=xTaskGetTickCount( );
 8003b40:	f7ff f95c 	bl	8002dfc <xTaskGetTickCount>
		  		  	sprintf((char*)msg_buffer, "Total_Ticks: =%ld\n\r", FinalTicks1);
 8003b44:	491b      	ldr	r1, [pc, #108]	; (8003bb4 <Thread_StartStats+0x128>)
 8003b46:	4602      	mov	r2, r0
 8003b48:	a808      	add	r0, sp, #32
 8003b4a:	f000 fb63 	bl	8004214 <siprintf>
		  		  	vTaskDelay(1000);
 8003b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b52:	f7ff fa63 	bl	800301c <vTaskDelay>
		  		  	pTxBuff = msg_buffer;
		  		  	xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);  // Mutex for shared resource UART
 8003b56:	2300      	movs	r3, #0
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5e:	6820      	ldr	r0, [r4, #0]
 8003b60:	f7fe fe66 	bl	8002830 <xQueueGenericReceive>
		  		    HAL_UART_Transmit(&huart2, pTxBuff, strlen((const char*)pTxBuff),1000);
 8003b64:	a808      	add	r0, sp, #32
 8003b66:	f7fc fb53 	bl	8000210 <strlen>
 8003b6a:	a908      	add	r1, sp, #32
 8003b6c:	b282      	uxth	r2, r0
 8003b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b72:	4628      	mov	r0, r5
 8003b74:	f7fe f876 	bl	8001c64 <HAL_UART_Transmit>
		  		  	xSemaphoreGive(Mutex_UARTHandle); // Release shared resource UART
 8003b78:	2300      	movs	r3, #0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6820      	ldr	r0, [r4, #0]
 8003b80:	f7fe fd8e 	bl	80026a0 <xQueueGenericSend>
 8003b84:	e786      	b.n	8003a94 <Thread_StartStats+0x8>
 8003b86:	bf00      	nop
 8003b88:	20003e90 	.word	0x20003e90
 8003b8c:	08004bb0 	.word	0x08004bb0
 8003b90:	20003df0 	.word	0x20003df0
 8003b94:	20003e80 	.word	0x20003e80
 8003b98:	20003e84 	.word	0x20003e84
 8003b9c:	20003e34 	.word	0x20003e34
 8003ba0:	20003e30 	.word	0x20003e30
 8003ba4:	20003ed0 	.word	0x20003ed0
 8003ba8:	20003e88 	.word	0x20003e88
 8003bac:	20003e8c 	.word	0x20003e8c
 8003bb0:	08004bbc 	.word	0x08004bbc
 8003bb4:	08004c12 	.word	0x08004c12

08003bb8 <SystemClock_Config>:
{
 8003bb8:	b530      	push	{r4, r5, lr}
 8003bba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bbc:	2234      	movs	r2, #52	; 0x34
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	a807      	add	r0, sp, #28
 8003bc2:	f000 fb1e 	bl	8004202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	2214      	movs	r2, #20
 8003bca:	a802      	add	r0, sp, #8
 8003bcc:	f000 fb19 	bl	8004202 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bd0:	2500      	movs	r5, #0
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <SystemClock_Config+0x8c>)
 8003bd4:	9500      	str	r5, [sp, #0]
 8003bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003be0:	4a19      	ldr	r2, [pc, #100]	; (8003c48 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003bea:	9501      	str	r5, [sp, #4]
 8003bec:	6813      	ldr	r3, [r2, #0]
 8003bee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bfa:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c04:	2301      	movs	r3, #1
 8003c06:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c08:	2310      	movs	r3, #16
 8003c0a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003c0c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003c0e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c12:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003c14:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c16:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003c18:	2304      	movs	r3, #4
 8003c1a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c1c:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c1e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003c20:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003c22:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c24:	f7fd f9fc 	bl	8001020 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c28:	230f      	movs	r3, #15
 8003c2a:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c2c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c32:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c34:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c36:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c38:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c3a:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c3c:	f7fd f8d0 	bl	8000de0 <HAL_RCC_ClockConfig>
}
 8003c40:	b015      	add	sp, #84	; 0x54
 8003c42:	bd30      	pop	{r4, r5, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40007000 	.word	0x40007000

08003c4c <main>:
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b0aa      	sub	sp, #168	; 0xa8
  HAL_Init();
 8003c50:	f7fc fcbe 	bl	80005d0 <HAL_Init>
  SystemClock_Config();
 8003c54:	f7ff ffb0 	bl	8003bb8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	2214      	movs	r2, #20
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	a823      	add	r0, sp, #140	; 0x8c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5e:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	f000 facf 	bl	8004202 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c64:	4b8d      	ldr	r3, [pc, #564]	; (8003e9c <main+0x250>)
 8003c66:	9401      	str	r4, [sp, #4]
 8003c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c6a:	488d      	ldr	r0, [pc, #564]	; (8003ea0 <main+0x254>)
  hadc1.Instance = ADC1;
 8003c6c:	4d8d      	ldr	r5, [pc, #564]	; (8003ea4 <main+0x258>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	f042 0204 	orr.w	r2, r2, #4
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
 8003c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c76:	f002 0204 	and.w	r2, r2, #4
 8003c7a:	9201      	str	r2, [sp, #4]
 8003c7c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c7e:	9402      	str	r4, [sp, #8]
 8003c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
 8003c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003c8e:	9202      	str	r2, [sp, #8]
 8003c90:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c92:	9403      	str	r4, [sp, #12]
 8003c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9e:	f002 0201 	and.w	r2, r2, #1
 8003ca2:	9203      	str	r2, [sp, #12]
 8003ca4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca6:	9404      	str	r4, [sp, #16]
 8003ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003caa:	f042 0202 	orr.w	r2, r2, #2
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003cb6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003cba:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cbc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003cbe:	f7fd f885 	bl	8000dcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8003cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cc6:	9323      	str	r3, [sp, #140]	; 0x8c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003cc8:	a923      	add	r1, sp, #140	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cca:	4b77      	ldr	r3, [pc, #476]	; (8003ea8 <main+0x25c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ccc:	4877      	ldr	r0, [pc, #476]	; (8003eac <main+0x260>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cce:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd0:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003cd4:	f7fc ff9a 	bl	8000c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8003cd8:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003cda:	a923      	add	r1, sp, #140	; 0x8c
 8003cdc:	4870      	ldr	r0, [pc, #448]	; (8003ea0 <main+0x254>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8003cde:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce0:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce2:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce4:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003ce6:	f7fc ff91 	bl	8000c0c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8003cea:	4871      	ldr	r0, [pc, #452]	; (8003eb0 <main+0x264>)
  huart2.Init.BaudRate = 115200;
 8003cec:	4a71      	ldr	r2, [pc, #452]	; (8003eb4 <main+0x268>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cee:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8003cf0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003cf4:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cfc:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cfe:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d00:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d02:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d04:	f7fd ff80 	bl	8001c08 <HAL_UART_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8003d08:	4632      	mov	r2, r6
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	2026      	movs	r0, #38	; 0x26
 8003d0e:	f7fc ff2b 	bl	8000b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d12:	2026      	movs	r0, #38	; 0x26
 8003d14:	f7fc ff5c 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d18:	2210      	movs	r2, #16
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	a823      	add	r0, sp, #140	; 0x8c
 8003d1e:	f000 fa70 	bl	8004202 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003d22:	4965      	ldr	r1, [pc, #404]	; (8003eb8 <main+0x26c>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003d24:	61ae      	str	r6, [r5, #24]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003d26:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003d2a:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d2e:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d30:	4b62      	ldr	r3, [pc, #392]	; (8003ebc <main+0x270>)
 8003d32:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 8003d34:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d36:	616e      	str	r6, [r5, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d38:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003d3a:	612c      	str	r4, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d3c:	622c      	str	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d3e:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d40:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003d42:	632c      	str	r4, [r5, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d44:	f7fc fc70 	bl	8000628 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003d48:	4b5d      	ldr	r3, [pc, #372]	; (8003ec0 <main+0x274>)
 8003d4a:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d4c:	a923      	add	r1, sp, #140	; 0x8c
 8003d4e:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8003d50:	9624      	str	r6, [sp, #144]	; 0x90
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d52:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d54:	f7fc fe5c 	bl	8000a10 <HAL_ADC_ConfigChannel>
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003d58:	4622      	mov	r2, r4
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	2012      	movs	r0, #18
 8003d5e:	f7fc ff03 	bl	8000b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003d62:	2012      	movs	r0, #18
 8003d64:	f7fc ff34 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d68:	2210      	movs	r2, #16
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	a81e      	add	r0, sp, #120	; 0x78
 8003d6e:	f000 fa48 	bl	8004202 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d72:	221c      	movs	r2, #28
 8003d74:	4621      	mov	r1, r4
 8003d76:	a823      	add	r0, sp, #140	; 0x8c
  htim4.Instance = TIM4;
 8003d78:	4d52      	ldr	r5, [pc, #328]	; (8003ec4 <main+0x278>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d7a:	9419      	str	r4, [sp, #100]	; 0x64
 8003d7c:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d7e:	f000 fa40 	bl	8004202 <memset>
  htim4.Init.Prescaler = 83;
 8003d82:	4851      	ldr	r0, [pc, #324]	; (8003ec8 <main+0x27c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d84:	60ac      	str	r4, [r5, #8]
  htim4.Init.Prescaler = 83;
 8003d86:	2353      	movs	r3, #83	; 0x53
 8003d88:	e885 0009 	stmia.w	r5, {r0, r3}
  htim4.Init.Period = 65535;
 8003d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d90:	4628      	mov	r0, r5
  htim4.Init.Period = 65535;
 8003d92:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d94:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d96:	f7fd fd31 	bl	80017fc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d9e:	a91e      	add	r1, sp, #120	; 0x78
 8003da0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003da2:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003da4:	f7fd fb67 	bl	8001476 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003da8:	4628      	mov	r0, r5
 8003daa:	f7fd fd41 	bl	8001830 <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003dae:	a919      	add	r1, sp, #100	; 0x64
 8003db0:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db2:	9419      	str	r4, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db4:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003db6:	f7fd fdb3 	bl	8001920 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003dba:	2330      	movs	r3, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	a923      	add	r1, sp, #140	; 0x8c
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003dc0:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dc2:	4628      	mov	r0, r5
  sConfigOC.Pulse = 10;
 8003dc4:	230a      	movs	r3, #10
 8003dc6:	9324      	str	r3, [sp, #144]	; 0x90
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dc8:	9425      	str	r4, [sp, #148]	; 0x94
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dca:	9427      	str	r4, [sp, #156]	; 0x9c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dcc:	f7fd fd7a 	bl	80018c4 <HAL_TIM_OC_ConfigChannel>
  HAL_TIM_Base_Start_IT(&htim4);
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f7fd fb44 	bl	800145e <HAL_TIM_Base_Start_IT>
  osMutexDef(Mutex_UART);
 8003dd6:	a82a      	add	r0, sp, #168	; 0xa8
  osThreadDef(defaultTask, Thread_LED, osPriorityNormal, 0, 128);
 8003dd8:	4d3c      	ldr	r5, [pc, #240]	; (8003ecc <main+0x280>)
  osMutexDef(Mutex_UART);
 8003dda:	f840 4da8 	str.w	r4, [r0, #-168]!
  Mutex_UARTHandle = osMutexCreate(osMutex(Mutex_UART));
 8003dde:	f7fe f8ea 	bl	8001fb6 <osMutexCreate>
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <main+0x284>)
 8003de4:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, Thread_LED, osPriorityNormal, 0, 128);
 8003de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003de8:	af05      	add	r7, sp, #20
 8003dea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003dec:	462e      	mov	r6, r5
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003dee:	4621      	mov	r1, r4
  osThreadDef(defaultTask, Thread_LED, osPriorityNormal, 0, 128);
 8003df0:	f856 3b04 	ldr.w	r3, [r6], #4
 8003df4:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003df6:	a805      	add	r0, sp, #20
 8003df8:	f7fe f8bd 	bl	8001f76 <osThreadCreate>
 8003dfc:	4b35      	ldr	r3, [pc, #212]	; (8003ed4 <main+0x288>)
 8003dfe:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, Thread_UART, osPriorityIdle, 0, 128);
 8003e00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003e02:	af0a      	add	r7, sp, #40	; 0x28
 8003e04:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003e06:	6833      	ldr	r3, [r6, #0]
 8003e08:	603b      	str	r3, [r7, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	a80a      	add	r0, sp, #40	; 0x28
 8003e0e:	f7fe f8b2 	bl	8001f76 <osThreadCreate>
 8003e12:	4b31      	ldr	r3, [pc, #196]	; (8003ed8 <main+0x28c>)
  osThreadDef(myTask03, Thread_GPIO, osPriorityIdle, 0, 128);
 8003e14:	f105 0718 	add.w	r7, r5, #24
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8003e18:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask03, Thread_GPIO, osPriorityIdle, 0, 128);
 8003e1a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e1c:	ae0f      	add	r6, sp, #60	; 0x3c
 8003e1e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6033      	str	r3, [r6, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8003e24:	4621      	mov	r1, r4
 8003e26:	a80f      	add	r0, sp, #60	; 0x3c
 8003e28:	f7fe f8a5 	bl	8001f76 <osThreadCreate>
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <main+0x290>)
  osThreadDef(myTask04, Thread_ADC, osPriorityIdle, 0, 128);
 8003e2e:	f105 072c 	add.w	r7, r5, #44	; 0x2c
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8003e32:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask04, Thread_ADC, osPriorityIdle, 0, 128);
 8003e34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e36:	ae14      	add	r6, sp, #80	; 0x50
 8003e38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6033      	str	r3, [r6, #0]
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8003e3e:	4621      	mov	r1, r4
 8003e40:	a814      	add	r0, sp, #80	; 0x50
 8003e42:	f7fe f898 	bl	8001f76 <osThreadCreate>
 8003e46:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <main+0x294>)
  osThreadDef(myTask05, Thread_Help, osPriorityIdle, 0, 128);
 8003e48:	f105 0740 	add.w	r7, r5, #64	; 0x40
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8003e4c:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask05, Thread_Help, osPriorityIdle, 0, 128);
 8003e4e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e50:	ae19      	add	r6, sp, #100	; 0x64
 8003e52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6033      	str	r3, [r6, #0]
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8003e58:	4621      	mov	r1, r4
 8003e5a:	a819      	add	r0, sp, #100	; 0x64
 8003e5c:	f7fe f88b 	bl	8001f76 <osThreadCreate>
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <main+0x298>)
  osThreadDef(myTask06, Thread_GPIO_Trig, osPriorityIdle, 0, 128);
 8003e62:	f105 0754 	add.w	r7, r5, #84	; 0x54
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8003e66:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask06, Thread_GPIO_Trig, osPriorityIdle, 0, 128);
 8003e68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e6a:	ae1e      	add	r6, sp, #120	; 0x78
 8003e6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6033      	str	r3, [r6, #0]
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8003e72:	4621      	mov	r1, r4
 8003e74:	a81e      	add	r0, sp, #120	; 0x78
 8003e76:	f7fe f87e 	bl	8001f76 <osThreadCreate>
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <main+0x29c>)
  osThreadDef(myTask07, Thread_StartStats, osPriorityIdle, 0, 260);
 8003e7c:	3568      	adds	r5, #104	; 0x68
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8003e7e:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask07, Thread_StartStats, osPriorityIdle, 0, 260);
 8003e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e82:	ae23      	add	r6, sp, #140	; 0x8c
 8003e84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	6033      	str	r3, [r6, #0]
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	a823      	add	r0, sp, #140	; 0x8c
 8003e8e:	f7fe f872 	bl	8001f76 <osThreadCreate>
 8003e92:	4b16      	ldr	r3, [pc, #88]	; (8003eec <main+0x2a0>)
 8003e94:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003e96:	f7fe f869 	bl	8001f6c <osKernelStart>
 8003e9a:	e7fe      	b.n	8003e9a <main+0x24e>
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40020000 	.word	0x40020000
 8003ea4:	20003e38 	.word	0x20003e38
 8003ea8:	10210000 	.word	0x10210000
 8003eac:	40020800 	.word	0x40020800
 8003eb0:	20003e90 	.word	0x20003e90
 8003eb4:	40004400 	.word	0x40004400
 8003eb8:	40012000 	.word	0x40012000
 8003ebc:	0f000001 	.word	0x0f000001
 8003ec0:	10000012 	.word	0x10000012
 8003ec4:	20003df4 	.word	0x20003df4
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	08004a7c 	.word	0x08004a7c
 8003ed0:	20003e8c 	.word	0x20003e8c
 8003ed4:	20003df0 	.word	0x20003df0
 8003ed8:	20003e80 	.word	0x20003e80
 8003edc:	20003e84 	.word	0x20003e84
 8003ee0:	20003e34 	.word	0x20003e34
 8003ee4:	20003e30 	.word	0x20003e30
 8003ee8:	20003ed0 	.word	0x20003ed0
 8003eec:	20003e88 	.word	0x20003e88

08003ef0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003ef0:	6802      	ldr	r2, [r0, #0]
 8003ef2:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d101      	bne.n	8003efc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003ef8:	f7fc bb84 	b.w	8000604 <HAL_IncTick>
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40001000 	.word	0x40001000

08003f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f04:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_MspInit+0x40>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	9200      	str	r2, [sp, #0]
 8003f0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003f0e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003f12:	6459      	str	r1, [r3, #68]	; 0x44
 8003f14:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003f16:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003f1a:	9100      	str	r1, [sp, #0]
 8003f1c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	9201      	str	r2, [sp, #4]
 8003f20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f22:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003f26:	6419      	str	r1, [r3, #64]	; 0x40
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f30:	210f      	movs	r1, #15
 8003f32:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f38:	f7fc fe16 	bl	8000b68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f3c:	b003      	add	sp, #12
 8003f3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f48:	b507      	push	{r0, r1, r2, lr}

  if(hadc->Instance==ADC1)
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <HAL_ADC_MspInit+0x38>)
 8003f4c:	6802      	ldr	r2, [r0, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d113      	bne.n	8003f7a <HAL_ADC_MspInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f52:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003f56:	2200      	movs	r2, #0
 8003f58:	9201      	str	r2, [sp, #4]
 8003f5a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003f5c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003f60:	6459      	str	r1, [r3, #68]	; 0x44
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	9301      	str	r3, [sp, #4]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003f6a:	2012      	movs	r0, #18
 8003f6c:	2105      	movs	r1, #5
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f6e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003f70:	f7fc fdfa 	bl	8000b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003f74:	2012      	movs	r0, #18
 8003f76:	f7fc fe2b 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f7a:	b003      	add	sp, #12
 8003f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f80:	40012000 	.word	0x40012000

08003f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f84:	b510      	push	{r4, lr}
 8003f86:	4604      	mov	r4, r0
 8003f88:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8a:	2214      	movs	r2, #20
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	a803      	add	r0, sp, #12
 8003f90:	f000 f937 	bl	8004202 <memset>
  if(huart->Instance==USART2)
 8003f94:	6822      	ldr	r2, [r4, #0]
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_UART_MspInit+0x78>)
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d12c      	bne.n	8003ff6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f9c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003fa0:	2400      	movs	r4, #0
 8003fa2:	9401      	str	r4, [sp, #4]
 8003fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa6:	4816      	ldr	r0, [pc, #88]	; (8004000 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fa8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
 8003fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003fb4:	9201      	str	r2, [sp, #4]
 8003fb6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb8:	9402      	str	r4, [sp, #8]
 8003fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	9302      	str	r3, [sp, #8]
 8003fca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003fcc:	230c      	movs	r3, #12
 8003fce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fdc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fde:	2307      	movs	r3, #7
 8003fe0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe2:	f7fc fe13 	bl	8000c0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003fe6:	2026      	movs	r0, #38	; 0x26
 8003fe8:	4622      	mov	r2, r4
 8003fea:	2105      	movs	r1, #5
 8003fec:	f7fc fdbc 	bl	8000b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ff0:	2026      	movs	r0, #38	; 0x26
 8003ff2:	f7fc fded 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ff6:	b008      	add	sp, #32
 8003ff8:	bd10      	pop	{r4, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40004400 	.word	0x40004400
 8004000:	40020000 	.word	0x40020000

08004004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004004:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8004006:	4601      	mov	r1, r0
{
 8004008:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800400a:	2200      	movs	r2, #0
 800400c:	2036      	movs	r0, #54	; 0x36
 800400e:	f7fc fdab 	bl	8000b68 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8004012:	2036      	movs	r0, #54	; 0x36
 8004014:	f7fc fddc 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004018:	2500      	movs	r5, #0
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_InitTick+0x6c>)
 800401c:	9502      	str	r5, [sp, #8]
 800401e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004020:	4c14      	ldr	r4, [pc, #80]	; (8004074 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004022:	f042 0210 	orr.w	r2, r2, #16
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004030:	a901      	add	r1, sp, #4
 8004032:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004034:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004036:	f7fc ff8d 	bl	8000f54 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800403a:	f7fc ff6b 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800403e:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_InitTick+0x74>)
 8004040:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8004042:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004046:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004048:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_InitTick+0x78>)
 800404c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004050:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8004052:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004054:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8004056:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004058:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800405a:	f7fd fbcf 	bl	80017fc <HAL_TIM_Base_Init>
 800405e:	b920      	cbnz	r0, 800406a <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004060:	4620      	mov	r0, r4
 8004062:	f7fd f9fc 	bl	800145e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8004066:	b009      	add	sp, #36	; 0x24
 8004068:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800406a:	2001      	movs	r0, #1
 800406c:	e7fb      	b.n	8004066 <HAL_InitTick+0x62>
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	20003ed4 	.word	0x20003ed4
 8004078:	40001000 	.word	0x40001000
 800407c:	000f4240 	.word	0x000f4240

08004080 <NMI_Handler>:
 8004080:	4770      	bx	lr

08004082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004082:	e7fe      	b.n	8004082 <HardFault_Handler>

08004084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004084:	e7fe      	b.n	8004084 <MemManage_Handler>

08004086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004086:	e7fe      	b.n	8004086 <BusFault_Handler>

08004088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004088:	e7fe      	b.n	8004088 <UsageFault_Handler>

0800408a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800408a:	4770      	bx	lr

0800408c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800408c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */
	 char temp_str[15];
	 uint32_t temp;
	  /* USER CODE END ADC_IRQn 0 */
	  HAL_ADC_IRQHandler(&hadc1);
 800408e:	480e      	ldr	r0, [pc, #56]	; (80040c8 <ADC_IRQHandler+0x3c>)
 8004090:	f7fc fc2a 	bl	80008e8 <HAL_ADC_IRQHandler>
	  /* USER CODE BEGIN ADC_IRQn 1 */
	  if (HAL_OK == HAL_ADC_PollForConversion(&hadc1, 0))
 8004094:	2100      	movs	r1, #0
 8004096:	480c      	ldr	r0, [pc, #48]	; (80040c8 <ADC_IRQHandler+0x3c>)
 8004098:	f7fc fb6a 	bl	8000770 <HAL_ADC_PollForConversion>
 800409c:	b980      	cbnz	r0, 80040c0 <ADC_IRQHandler+0x34>
	  	{
	  		// ADC ready
	  		temp = HAL_ADC_GetValue(&hadc1);
 800409e:	480a      	ldr	r0, [pc, #40]	; (80040c8 <ADC_IRQHandler+0x3c>)
 80040a0:	f7fc fc1c 	bl	80008dc <HAL_ADC_GetValue>
	  		sprintf(temp_str, "T=%d\n\r", (int)temp);
 80040a4:	4909      	ldr	r1, [pc, #36]	; (80040cc <ADC_IRQHandler+0x40>)
 80040a6:	4602      	mov	r2, r0
 80040a8:	4668      	mov	r0, sp
 80040aa:	f000 f8b3 	bl	8004214 <siprintf>
	  		HAL_UART_Transmit(&huart2, (uint8_t*)temp_str, strlen(temp_str),5);
 80040ae:	4668      	mov	r0, sp
 80040b0:	f7fc f8ae 	bl	8000210 <strlen>
 80040b4:	2305      	movs	r3, #5
 80040b6:	b282      	uxth	r2, r0
 80040b8:	4669      	mov	r1, sp
 80040ba:	4805      	ldr	r0, [pc, #20]	; (80040d0 <ADC_IRQHandler+0x44>)
 80040bc:	f7fd fdd2 	bl	8001c64 <HAL_UART_Transmit>
	  	}
  /* USER CODE END ADC_IRQn 1 */
}
 80040c0:	b005      	add	sp, #20
 80040c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80040c6:	bf00      	nop
 80040c8:	20003e38 	.word	0x20003e38
 80040cc:	08004c68 	.word	0x08004c68
 80040d0:	20003e90 	.word	0x20003e90

080040d4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040d4:	4801      	ldr	r0, [pc, #4]	; (80040dc <USART2_IRQHandler+0x8>)
 80040d6:	f7fd bea1 	b.w	8001e1c <HAL_UART_IRQHandler>
 80040da:	bf00      	nop
 80040dc:	20003e90 	.word	0x20003e90

080040e0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040e0:	4801      	ldr	r0, [pc, #4]	; (80040e8 <TIM6_DAC_IRQHandler+0x8>)
 80040e2:	f7fd ba85 	b.w	80015f0 <HAL_TIM_IRQHandler>
 80040e6:	bf00      	nop
 80040e8:	20003ed4 	.word	0x20003ed4

080040ec <TIM4_IRQHandler>:
}

void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
	tim4_ov_counter++;
 80040ec:	4a03      	ldr	r2, [pc, #12]	; (80040fc <TIM4_IRQHandler+0x10>)
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80040ee:	4804      	ldr	r0, [pc, #16]	; (8004100 <TIM4_IRQHandler+0x14>)
	tim4_ov_counter++;
 80040f0:	6813      	ldr	r3, [r2, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	6013      	str	r3, [r2, #0]
  HAL_TIM_IRQHandler(&htim4);
 80040f6:	f7fd ba7b 	b.w	80015f0 <HAL_TIM_IRQHandler>
 80040fa:	bf00      	nop
 80040fc:	20003dec 	.word	0x20003dec
 8004100:	20003df4 	.word	0x20003df4

08004104 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004104:	490f      	ldr	r1, [pc, #60]	; (8004144 <SystemInit+0x40>)
 8004106:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800410a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <SystemInit+0x44>)
 8004114:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004116:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800411e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004126:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800412a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800412c:	4a07      	ldr	r2, [pc, #28]	; (800414c <SystemInit+0x48>)
 800412e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004136:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004138:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800413a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800413e:	608b      	str	r3, [r1, #8]
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000ed00 	.word	0xe000ed00
 8004148:	40023800 	.word	0x40023800
 800414c:	24003010 	.word	0x24003010

08004150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004188 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004154:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004156:	e003      	b.n	8004160 <LoopCopyDataInit>

08004158 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800415a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800415c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800415e:	3104      	adds	r1, #4

08004160 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004160:	480b      	ldr	r0, [pc, #44]	; (8004190 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004164:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004166:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004168:	d3f6      	bcc.n	8004158 <CopyDataInit>
  ldr  r2, =_sbss
 800416a:	4a0b      	ldr	r2, [pc, #44]	; (8004198 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800416c:	e002      	b.n	8004174 <LoopFillZerobss>

0800416e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800416e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004170:	f842 3b04 	str.w	r3, [r2], #4

08004174 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004176:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004178:	d3f9      	bcc.n	800416e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800417a:	f7ff ffc3 	bl	8004104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800417e:	f000 f811 	bl	80041a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004182:	f7ff fd63 	bl	8003c4c <main>
  bx  lr    
 8004186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004188:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800418c:	08004ccc 	.word	0x08004ccc
  ldr  r0, =_sdata
 8004190:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004194:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004198:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800419c:	20003f14 	.word	0x20003f14

080041a0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041a0:	e7fe      	b.n	80041a0 <CAN1_RX0_IRQHandler>
	...

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4e0d      	ldr	r6, [pc, #52]	; (80041dc <__libc_init_array+0x38>)
 80041a8:	4c0d      	ldr	r4, [pc, #52]	; (80041e0 <__libc_init_array+0x3c>)
 80041aa:	1ba4      	subs	r4, r4, r6
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	2500      	movs	r5, #0
 80041b0:	42a5      	cmp	r5, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	4e0b      	ldr	r6, [pc, #44]	; (80041e4 <__libc_init_array+0x40>)
 80041b6:	4c0c      	ldr	r4, [pc, #48]	; (80041e8 <__libc_init_array+0x44>)
 80041b8:	f000 fc54 	bl	8004a64 <_init>
 80041bc:	1ba4      	subs	r4, r4, r6
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	2500      	movs	r5, #0
 80041c2:	42a5      	cmp	r5, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041cc:	4798      	blx	r3
 80041ce:	3501      	adds	r5, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041d6:	4798      	blx	r3
 80041d8:	3501      	adds	r5, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	08004cc4 	.word	0x08004cc4
 80041e0:	08004cc4 	.word	0x08004cc4
 80041e4:	08004cc4 	.word	0x08004cc4
 80041e8:	08004cc8 	.word	0x08004cc8

080041ec <memcpy>:
 80041ec:	b510      	push	{r4, lr}
 80041ee:	1e43      	subs	r3, r0, #1
 80041f0:	440a      	add	r2, r1
 80041f2:	4291      	cmp	r1, r2
 80041f4:	d100      	bne.n	80041f8 <memcpy+0xc>
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004200:	e7f7      	b.n	80041f2 <memcpy+0x6>

08004202 <memset>:
 8004202:	4402      	add	r2, r0
 8004204:	4603      	mov	r3, r0
 8004206:	4293      	cmp	r3, r2
 8004208:	d100      	bne.n	800420c <memset+0xa>
 800420a:	4770      	bx	lr
 800420c:	f803 1b01 	strb.w	r1, [r3], #1
 8004210:	e7f9      	b.n	8004206 <memset+0x4>
	...

08004214 <siprintf>:
 8004214:	b40e      	push	{r1, r2, r3}
 8004216:	b500      	push	{lr}
 8004218:	b09c      	sub	sp, #112	; 0x70
 800421a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800421e:	ab1d      	add	r3, sp, #116	; 0x74
 8004220:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004224:	9002      	str	r0, [sp, #8]
 8004226:	9006      	str	r0, [sp, #24]
 8004228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800422c:	480a      	ldr	r0, [pc, #40]	; (8004258 <siprintf+0x44>)
 800422e:	9104      	str	r1, [sp, #16]
 8004230:	9107      	str	r1, [sp, #28]
 8004232:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004236:	f853 2b04 	ldr.w	r2, [r3], #4
 800423a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800423e:	6800      	ldr	r0, [r0, #0]
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	a902      	add	r1, sp, #8
 8004244:	f000 f86e 	bl	8004324 <_svfiprintf_r>
 8004248:	9b02      	ldr	r3, [sp, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	b01c      	add	sp, #112	; 0x70
 8004250:	f85d eb04 	ldr.w	lr, [sp], #4
 8004254:	b003      	add	sp, #12
 8004256:	4770      	bx	lr
 8004258:	2000000c 	.word	0x2000000c

0800425c <strcpy>:
 800425c:	4603      	mov	r3, r0
 800425e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004262:	f803 2b01 	strb.w	r2, [r3], #1
 8004266:	2a00      	cmp	r2, #0
 8004268:	d1f9      	bne.n	800425e <strcpy+0x2>
 800426a:	4770      	bx	lr

0800426c <__ssputs_r>:
 800426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	688e      	ldr	r6, [r1, #8]
 8004272:	429e      	cmp	r6, r3
 8004274:	4682      	mov	sl, r0
 8004276:	460c      	mov	r4, r1
 8004278:	4691      	mov	r9, r2
 800427a:	4698      	mov	r8, r3
 800427c:	d835      	bhi.n	80042ea <__ssputs_r+0x7e>
 800427e:	898a      	ldrh	r2, [r1, #12]
 8004280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004284:	d031      	beq.n	80042ea <__ssputs_r+0x7e>
 8004286:	6825      	ldr	r5, [r4, #0]
 8004288:	6909      	ldr	r1, [r1, #16]
 800428a:	1a6f      	subs	r7, r5, r1
 800428c:	6965      	ldr	r5, [r4, #20]
 800428e:	2302      	movs	r3, #2
 8004290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004294:	fb95 f5f3 	sdiv	r5, r5, r3
 8004298:	f108 0301 	add.w	r3, r8, #1
 800429c:	443b      	add	r3, r7
 800429e:	429d      	cmp	r5, r3
 80042a0:	bf38      	it	cc
 80042a2:	461d      	movcc	r5, r3
 80042a4:	0553      	lsls	r3, r2, #21
 80042a6:	d531      	bpl.n	800430c <__ssputs_r+0xa0>
 80042a8:	4629      	mov	r1, r5
 80042aa:	f000 fb2d 	bl	8004908 <_malloc_r>
 80042ae:	4606      	mov	r6, r0
 80042b0:	b950      	cbnz	r0, 80042c8 <__ssputs_r+0x5c>
 80042b2:	230c      	movs	r3, #12
 80042b4:	f8ca 3000 	str.w	r3, [sl]
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042be:	81a3      	strh	r3, [r4, #12]
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	463a      	mov	r2, r7
 80042ca:	6921      	ldr	r1, [r4, #16]
 80042cc:	f7ff ff8e 	bl	80041ec <memcpy>
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	6126      	str	r6, [r4, #16]
 80042de:	6165      	str	r5, [r4, #20]
 80042e0:	443e      	add	r6, r7
 80042e2:	1bed      	subs	r5, r5, r7
 80042e4:	6026      	str	r6, [r4, #0]
 80042e6:	60a5      	str	r5, [r4, #8]
 80042e8:	4646      	mov	r6, r8
 80042ea:	4546      	cmp	r6, r8
 80042ec:	bf28      	it	cs
 80042ee:	4646      	movcs	r6, r8
 80042f0:	4632      	mov	r2, r6
 80042f2:	4649      	mov	r1, r9
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	f000 fa9f 	bl	8004838 <memmove>
 80042fa:	68a3      	ldr	r3, [r4, #8]
 80042fc:	1b9b      	subs	r3, r3, r6
 80042fe:	60a3      	str	r3, [r4, #8]
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	441e      	add	r6, r3
 8004304:	6026      	str	r6, [r4, #0]
 8004306:	2000      	movs	r0, #0
 8004308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430c:	462a      	mov	r2, r5
 800430e:	f000 fb59 	bl	80049c4 <_realloc_r>
 8004312:	4606      	mov	r6, r0
 8004314:	2800      	cmp	r0, #0
 8004316:	d1e1      	bne.n	80042dc <__ssputs_r+0x70>
 8004318:	6921      	ldr	r1, [r4, #16]
 800431a:	4650      	mov	r0, sl
 800431c:	f000 faa6 	bl	800486c <_free_r>
 8004320:	e7c7      	b.n	80042b2 <__ssputs_r+0x46>
	...

08004324 <_svfiprintf_r>:
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004328:	b09d      	sub	sp, #116	; 0x74
 800432a:	4680      	mov	r8, r0
 800432c:	9303      	str	r3, [sp, #12]
 800432e:	898b      	ldrh	r3, [r1, #12]
 8004330:	061c      	lsls	r4, r3, #24
 8004332:	460d      	mov	r5, r1
 8004334:	4616      	mov	r6, r2
 8004336:	d50f      	bpl.n	8004358 <_svfiprintf_r+0x34>
 8004338:	690b      	ldr	r3, [r1, #16]
 800433a:	b96b      	cbnz	r3, 8004358 <_svfiprintf_r+0x34>
 800433c:	2140      	movs	r1, #64	; 0x40
 800433e:	f000 fae3 	bl	8004908 <_malloc_r>
 8004342:	6028      	str	r0, [r5, #0]
 8004344:	6128      	str	r0, [r5, #16]
 8004346:	b928      	cbnz	r0, 8004354 <_svfiprintf_r+0x30>
 8004348:	230c      	movs	r3, #12
 800434a:	f8c8 3000 	str.w	r3, [r8]
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	e0c5      	b.n	80044e0 <_svfiprintf_r+0x1bc>
 8004354:	2340      	movs	r3, #64	; 0x40
 8004356:	616b      	str	r3, [r5, #20]
 8004358:	2300      	movs	r3, #0
 800435a:	9309      	str	r3, [sp, #36]	; 0x24
 800435c:	2320      	movs	r3, #32
 800435e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004362:	2330      	movs	r3, #48	; 0x30
 8004364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004368:	f04f 0b01 	mov.w	fp, #1
 800436c:	4637      	mov	r7, r6
 800436e:	463c      	mov	r4, r7
 8004370:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d13c      	bne.n	80043f2 <_svfiprintf_r+0xce>
 8004378:	ebb7 0a06 	subs.w	sl, r7, r6
 800437c:	d00b      	beq.n	8004396 <_svfiprintf_r+0x72>
 800437e:	4653      	mov	r3, sl
 8004380:	4632      	mov	r2, r6
 8004382:	4629      	mov	r1, r5
 8004384:	4640      	mov	r0, r8
 8004386:	f7ff ff71 	bl	800426c <__ssputs_r>
 800438a:	3001      	adds	r0, #1
 800438c:	f000 80a3 	beq.w	80044d6 <_svfiprintf_r+0x1b2>
 8004390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004392:	4453      	add	r3, sl
 8004394:	9309      	str	r3, [sp, #36]	; 0x24
 8004396:	783b      	ldrb	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 809c 	beq.w	80044d6 <_svfiprintf_r+0x1b2>
 800439e:	2300      	movs	r3, #0
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	9304      	str	r3, [sp, #16]
 80043a6:	9307      	str	r3, [sp, #28]
 80043a8:	9205      	str	r2, [sp, #20]
 80043aa:	9306      	str	r3, [sp, #24]
 80043ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043b0:	931a      	str	r3, [sp, #104]	; 0x68
 80043b2:	2205      	movs	r2, #5
 80043b4:	7821      	ldrb	r1, [r4, #0]
 80043b6:	4850      	ldr	r0, [pc, #320]	; (80044f8 <_svfiprintf_r+0x1d4>)
 80043b8:	f7fb ff32 	bl	8000220 <memchr>
 80043bc:	1c67      	adds	r7, r4, #1
 80043be:	9b04      	ldr	r3, [sp, #16]
 80043c0:	b9d8      	cbnz	r0, 80043fa <_svfiprintf_r+0xd6>
 80043c2:	06d9      	lsls	r1, r3, #27
 80043c4:	bf44      	itt	mi
 80043c6:	2220      	movmi	r2, #32
 80043c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043cc:	071a      	lsls	r2, r3, #28
 80043ce:	bf44      	itt	mi
 80043d0:	222b      	movmi	r2, #43	; 0x2b
 80043d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043d6:	7822      	ldrb	r2, [r4, #0]
 80043d8:	2a2a      	cmp	r2, #42	; 0x2a
 80043da:	d016      	beq.n	800440a <_svfiprintf_r+0xe6>
 80043dc:	9a07      	ldr	r2, [sp, #28]
 80043de:	2100      	movs	r1, #0
 80043e0:	200a      	movs	r0, #10
 80043e2:	4627      	mov	r7, r4
 80043e4:	3401      	adds	r4, #1
 80043e6:	783b      	ldrb	r3, [r7, #0]
 80043e8:	3b30      	subs	r3, #48	; 0x30
 80043ea:	2b09      	cmp	r3, #9
 80043ec:	d951      	bls.n	8004492 <_svfiprintf_r+0x16e>
 80043ee:	b1c9      	cbz	r1, 8004424 <_svfiprintf_r+0x100>
 80043f0:	e011      	b.n	8004416 <_svfiprintf_r+0xf2>
 80043f2:	2b25      	cmp	r3, #37	; 0x25
 80043f4:	d0c0      	beq.n	8004378 <_svfiprintf_r+0x54>
 80043f6:	4627      	mov	r7, r4
 80043f8:	e7b9      	b.n	800436e <_svfiprintf_r+0x4a>
 80043fa:	4a3f      	ldr	r2, [pc, #252]	; (80044f8 <_svfiprintf_r+0x1d4>)
 80043fc:	1a80      	subs	r0, r0, r2
 80043fe:	fa0b f000 	lsl.w	r0, fp, r0
 8004402:	4318      	orrs	r0, r3
 8004404:	9004      	str	r0, [sp, #16]
 8004406:	463c      	mov	r4, r7
 8004408:	e7d3      	b.n	80043b2 <_svfiprintf_r+0x8e>
 800440a:	9a03      	ldr	r2, [sp, #12]
 800440c:	1d11      	adds	r1, r2, #4
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	9103      	str	r1, [sp, #12]
 8004412:	2a00      	cmp	r2, #0
 8004414:	db01      	blt.n	800441a <_svfiprintf_r+0xf6>
 8004416:	9207      	str	r2, [sp, #28]
 8004418:	e004      	b.n	8004424 <_svfiprintf_r+0x100>
 800441a:	4252      	negs	r2, r2
 800441c:	f043 0302 	orr.w	r3, r3, #2
 8004420:	9207      	str	r2, [sp, #28]
 8004422:	9304      	str	r3, [sp, #16]
 8004424:	783b      	ldrb	r3, [r7, #0]
 8004426:	2b2e      	cmp	r3, #46	; 0x2e
 8004428:	d10e      	bne.n	8004448 <_svfiprintf_r+0x124>
 800442a:	787b      	ldrb	r3, [r7, #1]
 800442c:	2b2a      	cmp	r3, #42	; 0x2a
 800442e:	f107 0101 	add.w	r1, r7, #1
 8004432:	d132      	bne.n	800449a <_svfiprintf_r+0x176>
 8004434:	9b03      	ldr	r3, [sp, #12]
 8004436:	1d1a      	adds	r2, r3, #4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	9203      	str	r2, [sp, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	bfb8      	it	lt
 8004440:	f04f 33ff 	movlt.w	r3, #4294967295
 8004444:	3702      	adds	r7, #2
 8004446:	9305      	str	r3, [sp, #20]
 8004448:	4c2c      	ldr	r4, [pc, #176]	; (80044fc <_svfiprintf_r+0x1d8>)
 800444a:	7839      	ldrb	r1, [r7, #0]
 800444c:	2203      	movs	r2, #3
 800444e:	4620      	mov	r0, r4
 8004450:	f7fb fee6 	bl	8000220 <memchr>
 8004454:	b138      	cbz	r0, 8004466 <_svfiprintf_r+0x142>
 8004456:	2340      	movs	r3, #64	; 0x40
 8004458:	1b00      	subs	r0, r0, r4
 800445a:	fa03 f000 	lsl.w	r0, r3, r0
 800445e:	9b04      	ldr	r3, [sp, #16]
 8004460:	4303      	orrs	r3, r0
 8004462:	9304      	str	r3, [sp, #16]
 8004464:	3701      	adds	r7, #1
 8004466:	7839      	ldrb	r1, [r7, #0]
 8004468:	4825      	ldr	r0, [pc, #148]	; (8004500 <_svfiprintf_r+0x1dc>)
 800446a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800446e:	2206      	movs	r2, #6
 8004470:	1c7e      	adds	r6, r7, #1
 8004472:	f7fb fed5 	bl	8000220 <memchr>
 8004476:	2800      	cmp	r0, #0
 8004478:	d035      	beq.n	80044e6 <_svfiprintf_r+0x1c2>
 800447a:	4b22      	ldr	r3, [pc, #136]	; (8004504 <_svfiprintf_r+0x1e0>)
 800447c:	b9fb      	cbnz	r3, 80044be <_svfiprintf_r+0x19a>
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	3307      	adds	r3, #7
 8004482:	f023 0307 	bic.w	r3, r3, #7
 8004486:	3308      	adds	r3, #8
 8004488:	9303      	str	r3, [sp, #12]
 800448a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448c:	444b      	add	r3, r9
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
 8004490:	e76c      	b.n	800436c <_svfiprintf_r+0x48>
 8004492:	fb00 3202 	mla	r2, r0, r2, r3
 8004496:	2101      	movs	r1, #1
 8004498:	e7a3      	b.n	80043e2 <_svfiprintf_r+0xbe>
 800449a:	2300      	movs	r3, #0
 800449c:	9305      	str	r3, [sp, #20]
 800449e:	4618      	mov	r0, r3
 80044a0:	240a      	movs	r4, #10
 80044a2:	460f      	mov	r7, r1
 80044a4:	3101      	adds	r1, #1
 80044a6:	783a      	ldrb	r2, [r7, #0]
 80044a8:	3a30      	subs	r2, #48	; 0x30
 80044aa:	2a09      	cmp	r2, #9
 80044ac:	d903      	bls.n	80044b6 <_svfiprintf_r+0x192>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0ca      	beq.n	8004448 <_svfiprintf_r+0x124>
 80044b2:	9005      	str	r0, [sp, #20]
 80044b4:	e7c8      	b.n	8004448 <_svfiprintf_r+0x124>
 80044b6:	fb04 2000 	mla	r0, r4, r0, r2
 80044ba:	2301      	movs	r3, #1
 80044bc:	e7f1      	b.n	80044a2 <_svfiprintf_r+0x17e>
 80044be:	ab03      	add	r3, sp, #12
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	462a      	mov	r2, r5
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <_svfiprintf_r+0x1e4>)
 80044c6:	a904      	add	r1, sp, #16
 80044c8:	4640      	mov	r0, r8
 80044ca:	f3af 8000 	nop.w
 80044ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80044d2:	4681      	mov	r9, r0
 80044d4:	d1d9      	bne.n	800448a <_svfiprintf_r+0x166>
 80044d6:	89ab      	ldrh	r3, [r5, #12]
 80044d8:	065b      	lsls	r3, r3, #25
 80044da:	f53f af38 	bmi.w	800434e <_svfiprintf_r+0x2a>
 80044de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044e0:	b01d      	add	sp, #116	; 0x74
 80044e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e6:	ab03      	add	r3, sp, #12
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	462a      	mov	r2, r5
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <_svfiprintf_r+0x1e4>)
 80044ee:	a904      	add	r1, sp, #16
 80044f0:	4640      	mov	r0, r8
 80044f2:	f000 f881 	bl	80045f8 <_printf_i>
 80044f6:	e7ea      	b.n	80044ce <_svfiprintf_r+0x1aa>
 80044f8:	08004c87 	.word	0x08004c87
 80044fc:	08004c8d 	.word	0x08004c8d
 8004500:	08004c91 	.word	0x08004c91
 8004504:	00000000 	.word	0x00000000
 8004508:	0800426d 	.word	0x0800426d

0800450c <_printf_common>:
 800450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004510:	4691      	mov	r9, r2
 8004512:	461f      	mov	r7, r3
 8004514:	688a      	ldr	r2, [r1, #8]
 8004516:	690b      	ldr	r3, [r1, #16]
 8004518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800451c:	4293      	cmp	r3, r2
 800451e:	bfb8      	it	lt
 8004520:	4613      	movlt	r3, r2
 8004522:	f8c9 3000 	str.w	r3, [r9]
 8004526:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800452a:	4606      	mov	r6, r0
 800452c:	460c      	mov	r4, r1
 800452e:	b112      	cbz	r2, 8004536 <_printf_common+0x2a>
 8004530:	3301      	adds	r3, #1
 8004532:	f8c9 3000 	str.w	r3, [r9]
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	0699      	lsls	r1, r3, #26
 800453a:	bf42      	ittt	mi
 800453c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004540:	3302      	addmi	r3, #2
 8004542:	f8c9 3000 	strmi.w	r3, [r9]
 8004546:	6825      	ldr	r5, [r4, #0]
 8004548:	f015 0506 	ands.w	r5, r5, #6
 800454c:	d107      	bne.n	800455e <_printf_common+0x52>
 800454e:	f104 0a19 	add.w	sl, r4, #25
 8004552:	68e3      	ldr	r3, [r4, #12]
 8004554:	f8d9 2000 	ldr.w	r2, [r9]
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	429d      	cmp	r5, r3
 800455c:	db29      	blt.n	80045b2 <_printf_common+0xa6>
 800455e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	3300      	adds	r3, #0
 8004566:	bf18      	it	ne
 8004568:	2301      	movne	r3, #1
 800456a:	0692      	lsls	r2, r2, #26
 800456c:	d42e      	bmi.n	80045cc <_printf_common+0xc0>
 800456e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004572:	4639      	mov	r1, r7
 8004574:	4630      	mov	r0, r6
 8004576:	47c0      	blx	r8
 8004578:	3001      	adds	r0, #1
 800457a:	d021      	beq.n	80045c0 <_printf_common+0xb4>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	68e5      	ldr	r5, [r4, #12]
 8004580:	f8d9 2000 	ldr.w	r2, [r9]
 8004584:	f003 0306 	and.w	r3, r3, #6
 8004588:	2b04      	cmp	r3, #4
 800458a:	bf08      	it	eq
 800458c:	1aad      	subeq	r5, r5, r2
 800458e:	68a3      	ldr	r3, [r4, #8]
 8004590:	6922      	ldr	r2, [r4, #16]
 8004592:	bf0c      	ite	eq
 8004594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004598:	2500      	movne	r5, #0
 800459a:	4293      	cmp	r3, r2
 800459c:	bfc4      	itt	gt
 800459e:	1a9b      	subgt	r3, r3, r2
 80045a0:	18ed      	addgt	r5, r5, r3
 80045a2:	f04f 0900 	mov.w	r9, #0
 80045a6:	341a      	adds	r4, #26
 80045a8:	454d      	cmp	r5, r9
 80045aa:	d11b      	bne.n	80045e4 <_printf_common+0xd8>
 80045ac:	2000      	movs	r0, #0
 80045ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b2:	2301      	movs	r3, #1
 80045b4:	4652      	mov	r2, sl
 80045b6:	4639      	mov	r1, r7
 80045b8:	4630      	mov	r0, r6
 80045ba:	47c0      	blx	r8
 80045bc:	3001      	adds	r0, #1
 80045be:	d103      	bne.n	80045c8 <_printf_common+0xbc>
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c8:	3501      	adds	r5, #1
 80045ca:	e7c2      	b.n	8004552 <_printf_common+0x46>
 80045cc:	18e1      	adds	r1, r4, r3
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	2030      	movs	r0, #48	; 0x30
 80045d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045d6:	4422      	add	r2, r4
 80045d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045e0:	3302      	adds	r3, #2
 80045e2:	e7c4      	b.n	800456e <_printf_common+0x62>
 80045e4:	2301      	movs	r3, #1
 80045e6:	4622      	mov	r2, r4
 80045e8:	4639      	mov	r1, r7
 80045ea:	4630      	mov	r0, r6
 80045ec:	47c0      	blx	r8
 80045ee:	3001      	adds	r0, #1
 80045f0:	d0e6      	beq.n	80045c0 <_printf_common+0xb4>
 80045f2:	f109 0901 	add.w	r9, r9, #1
 80045f6:	e7d7      	b.n	80045a8 <_printf_common+0x9c>

080045f8 <_printf_i>:
 80045f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045fc:	4617      	mov	r7, r2
 80045fe:	7e0a      	ldrb	r2, [r1, #24]
 8004600:	b085      	sub	sp, #20
 8004602:	2a6e      	cmp	r2, #110	; 0x6e
 8004604:	4698      	mov	r8, r3
 8004606:	4606      	mov	r6, r0
 8004608:	460c      	mov	r4, r1
 800460a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800460c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004610:	f000 80bc 	beq.w	800478c <_printf_i+0x194>
 8004614:	d81a      	bhi.n	800464c <_printf_i+0x54>
 8004616:	2a63      	cmp	r2, #99	; 0x63
 8004618:	d02e      	beq.n	8004678 <_printf_i+0x80>
 800461a:	d80a      	bhi.n	8004632 <_printf_i+0x3a>
 800461c:	2a00      	cmp	r2, #0
 800461e:	f000 80c8 	beq.w	80047b2 <_printf_i+0x1ba>
 8004622:	2a58      	cmp	r2, #88	; 0x58
 8004624:	f000 808a 	beq.w	800473c <_printf_i+0x144>
 8004628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800462c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004630:	e02a      	b.n	8004688 <_printf_i+0x90>
 8004632:	2a64      	cmp	r2, #100	; 0x64
 8004634:	d001      	beq.n	800463a <_printf_i+0x42>
 8004636:	2a69      	cmp	r2, #105	; 0x69
 8004638:	d1f6      	bne.n	8004628 <_printf_i+0x30>
 800463a:	6821      	ldr	r1, [r4, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004642:	d023      	beq.n	800468c <_printf_i+0x94>
 8004644:	1d11      	adds	r1, r2, #4
 8004646:	6019      	str	r1, [r3, #0]
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	e027      	b.n	800469c <_printf_i+0xa4>
 800464c:	2a73      	cmp	r2, #115	; 0x73
 800464e:	f000 80b4 	beq.w	80047ba <_printf_i+0x1c2>
 8004652:	d808      	bhi.n	8004666 <_printf_i+0x6e>
 8004654:	2a6f      	cmp	r2, #111	; 0x6f
 8004656:	d02a      	beq.n	80046ae <_printf_i+0xb6>
 8004658:	2a70      	cmp	r2, #112	; 0x70
 800465a:	d1e5      	bne.n	8004628 <_printf_i+0x30>
 800465c:	680a      	ldr	r2, [r1, #0]
 800465e:	f042 0220 	orr.w	r2, r2, #32
 8004662:	600a      	str	r2, [r1, #0]
 8004664:	e003      	b.n	800466e <_printf_i+0x76>
 8004666:	2a75      	cmp	r2, #117	; 0x75
 8004668:	d021      	beq.n	80046ae <_printf_i+0xb6>
 800466a:	2a78      	cmp	r2, #120	; 0x78
 800466c:	d1dc      	bne.n	8004628 <_printf_i+0x30>
 800466e:	2278      	movs	r2, #120	; 0x78
 8004670:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004674:	496e      	ldr	r1, [pc, #440]	; (8004830 <_printf_i+0x238>)
 8004676:	e064      	b.n	8004742 <_printf_i+0x14a>
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800467e:	1d11      	adds	r1, r2, #4
 8004680:	6019      	str	r1, [r3, #0]
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004688:	2301      	movs	r3, #1
 800468a:	e0a3      	b.n	80047d4 <_printf_i+0x1dc>
 800468c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004690:	f102 0104 	add.w	r1, r2, #4
 8004694:	6019      	str	r1, [r3, #0]
 8004696:	d0d7      	beq.n	8004648 <_printf_i+0x50>
 8004698:	f9b2 3000 	ldrsh.w	r3, [r2]
 800469c:	2b00      	cmp	r3, #0
 800469e:	da03      	bge.n	80046a8 <_printf_i+0xb0>
 80046a0:	222d      	movs	r2, #45	; 0x2d
 80046a2:	425b      	negs	r3, r3
 80046a4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046a8:	4962      	ldr	r1, [pc, #392]	; (8004834 <_printf_i+0x23c>)
 80046aa:	220a      	movs	r2, #10
 80046ac:	e017      	b.n	80046de <_printf_i+0xe6>
 80046ae:	6820      	ldr	r0, [r4, #0]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80046b6:	d003      	beq.n	80046c0 <_printf_i+0xc8>
 80046b8:	1d08      	adds	r0, r1, #4
 80046ba:	6018      	str	r0, [r3, #0]
 80046bc:	680b      	ldr	r3, [r1, #0]
 80046be:	e006      	b.n	80046ce <_printf_i+0xd6>
 80046c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046c4:	f101 0004 	add.w	r0, r1, #4
 80046c8:	6018      	str	r0, [r3, #0]
 80046ca:	d0f7      	beq.n	80046bc <_printf_i+0xc4>
 80046cc:	880b      	ldrh	r3, [r1, #0]
 80046ce:	4959      	ldr	r1, [pc, #356]	; (8004834 <_printf_i+0x23c>)
 80046d0:	2a6f      	cmp	r2, #111	; 0x6f
 80046d2:	bf14      	ite	ne
 80046d4:	220a      	movne	r2, #10
 80046d6:	2208      	moveq	r2, #8
 80046d8:	2000      	movs	r0, #0
 80046da:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80046de:	6865      	ldr	r5, [r4, #4]
 80046e0:	60a5      	str	r5, [r4, #8]
 80046e2:	2d00      	cmp	r5, #0
 80046e4:	f2c0 809c 	blt.w	8004820 <_printf_i+0x228>
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	f020 0004 	bic.w	r0, r0, #4
 80046ee:	6020      	str	r0, [r4, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d13f      	bne.n	8004774 <_printf_i+0x17c>
 80046f4:	2d00      	cmp	r5, #0
 80046f6:	f040 8095 	bne.w	8004824 <_printf_i+0x22c>
 80046fa:	4675      	mov	r5, lr
 80046fc:	2a08      	cmp	r2, #8
 80046fe:	d10b      	bne.n	8004718 <_printf_i+0x120>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	07da      	lsls	r2, r3, #31
 8004704:	d508      	bpl.n	8004718 <_printf_i+0x120>
 8004706:	6923      	ldr	r3, [r4, #16]
 8004708:	6862      	ldr	r2, [r4, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	bfde      	ittt	le
 800470e:	2330      	movle	r3, #48	; 0x30
 8004710:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004714:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004718:	ebae 0305 	sub.w	r3, lr, r5
 800471c:	6123      	str	r3, [r4, #16]
 800471e:	f8cd 8000 	str.w	r8, [sp]
 8004722:	463b      	mov	r3, r7
 8004724:	aa03      	add	r2, sp, #12
 8004726:	4621      	mov	r1, r4
 8004728:	4630      	mov	r0, r6
 800472a:	f7ff feef 	bl	800450c <_printf_common>
 800472e:	3001      	adds	r0, #1
 8004730:	d155      	bne.n	80047de <_printf_i+0x1e6>
 8004732:	f04f 30ff 	mov.w	r0, #4294967295
 8004736:	b005      	add	sp, #20
 8004738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800473c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004740:	493c      	ldr	r1, [pc, #240]	; (8004834 <_printf_i+0x23c>)
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	f012 0f80 	tst.w	r2, #128	; 0x80
 800474a:	f100 0504 	add.w	r5, r0, #4
 800474e:	601d      	str	r5, [r3, #0]
 8004750:	d001      	beq.n	8004756 <_printf_i+0x15e>
 8004752:	6803      	ldr	r3, [r0, #0]
 8004754:	e002      	b.n	800475c <_printf_i+0x164>
 8004756:	0655      	lsls	r5, r2, #25
 8004758:	d5fb      	bpl.n	8004752 <_printf_i+0x15a>
 800475a:	8803      	ldrh	r3, [r0, #0]
 800475c:	07d0      	lsls	r0, r2, #31
 800475e:	bf44      	itt	mi
 8004760:	f042 0220 	orrmi.w	r2, r2, #32
 8004764:	6022      	strmi	r2, [r4, #0]
 8004766:	b91b      	cbnz	r3, 8004770 <_printf_i+0x178>
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	f022 0220 	bic.w	r2, r2, #32
 800476e:	6022      	str	r2, [r4, #0]
 8004770:	2210      	movs	r2, #16
 8004772:	e7b1      	b.n	80046d8 <_printf_i+0xe0>
 8004774:	4675      	mov	r5, lr
 8004776:	fbb3 f0f2 	udiv	r0, r3, r2
 800477a:	fb02 3310 	mls	r3, r2, r0, r3
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004784:	4603      	mov	r3, r0
 8004786:	2800      	cmp	r0, #0
 8004788:	d1f5      	bne.n	8004776 <_printf_i+0x17e>
 800478a:	e7b7      	b.n	80046fc <_printf_i+0x104>
 800478c:	6808      	ldr	r0, [r1, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	6949      	ldr	r1, [r1, #20]
 8004792:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004796:	d004      	beq.n	80047a2 <_printf_i+0x1aa>
 8004798:	1d10      	adds	r0, r2, #4
 800479a:	6018      	str	r0, [r3, #0]
 800479c:	6813      	ldr	r3, [r2, #0]
 800479e:	6019      	str	r1, [r3, #0]
 80047a0:	e007      	b.n	80047b2 <_printf_i+0x1ba>
 80047a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047a6:	f102 0004 	add.w	r0, r2, #4
 80047aa:	6018      	str	r0, [r3, #0]
 80047ac:	6813      	ldr	r3, [r2, #0]
 80047ae:	d0f6      	beq.n	800479e <_printf_i+0x1a6>
 80047b0:	8019      	strh	r1, [r3, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	6123      	str	r3, [r4, #16]
 80047b6:	4675      	mov	r5, lr
 80047b8:	e7b1      	b.n	800471e <_printf_i+0x126>
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	1d11      	adds	r1, r2, #4
 80047be:	6019      	str	r1, [r3, #0]
 80047c0:	6815      	ldr	r5, [r2, #0]
 80047c2:	6862      	ldr	r2, [r4, #4]
 80047c4:	2100      	movs	r1, #0
 80047c6:	4628      	mov	r0, r5
 80047c8:	f7fb fd2a 	bl	8000220 <memchr>
 80047cc:	b108      	cbz	r0, 80047d2 <_printf_i+0x1da>
 80047ce:	1b40      	subs	r0, r0, r5
 80047d0:	6060      	str	r0, [r4, #4]
 80047d2:	6863      	ldr	r3, [r4, #4]
 80047d4:	6123      	str	r3, [r4, #16]
 80047d6:	2300      	movs	r3, #0
 80047d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047dc:	e79f      	b.n	800471e <_printf_i+0x126>
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	462a      	mov	r2, r5
 80047e2:	4639      	mov	r1, r7
 80047e4:	4630      	mov	r0, r6
 80047e6:	47c0      	blx	r8
 80047e8:	3001      	adds	r0, #1
 80047ea:	d0a2      	beq.n	8004732 <_printf_i+0x13a>
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	079b      	lsls	r3, r3, #30
 80047f0:	d507      	bpl.n	8004802 <_printf_i+0x20a>
 80047f2:	2500      	movs	r5, #0
 80047f4:	f104 0919 	add.w	r9, r4, #25
 80047f8:	68e3      	ldr	r3, [r4, #12]
 80047fa:	9a03      	ldr	r2, [sp, #12]
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	429d      	cmp	r5, r3
 8004800:	db05      	blt.n	800480e <_printf_i+0x216>
 8004802:	68e0      	ldr	r0, [r4, #12]
 8004804:	9b03      	ldr	r3, [sp, #12]
 8004806:	4298      	cmp	r0, r3
 8004808:	bfb8      	it	lt
 800480a:	4618      	movlt	r0, r3
 800480c:	e793      	b.n	8004736 <_printf_i+0x13e>
 800480e:	2301      	movs	r3, #1
 8004810:	464a      	mov	r2, r9
 8004812:	4639      	mov	r1, r7
 8004814:	4630      	mov	r0, r6
 8004816:	47c0      	blx	r8
 8004818:	3001      	adds	r0, #1
 800481a:	d08a      	beq.n	8004732 <_printf_i+0x13a>
 800481c:	3501      	adds	r5, #1
 800481e:	e7eb      	b.n	80047f8 <_printf_i+0x200>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1a7      	bne.n	8004774 <_printf_i+0x17c>
 8004824:	780b      	ldrb	r3, [r1, #0]
 8004826:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800482a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800482e:	e765      	b.n	80046fc <_printf_i+0x104>
 8004830:	08004ca9 	.word	0x08004ca9
 8004834:	08004c98 	.word	0x08004c98

08004838 <memmove>:
 8004838:	4288      	cmp	r0, r1
 800483a:	b510      	push	{r4, lr}
 800483c:	eb01 0302 	add.w	r3, r1, r2
 8004840:	d803      	bhi.n	800484a <memmove+0x12>
 8004842:	1e42      	subs	r2, r0, #1
 8004844:	4299      	cmp	r1, r3
 8004846:	d10c      	bne.n	8004862 <memmove+0x2a>
 8004848:	bd10      	pop	{r4, pc}
 800484a:	4298      	cmp	r0, r3
 800484c:	d2f9      	bcs.n	8004842 <memmove+0xa>
 800484e:	1881      	adds	r1, r0, r2
 8004850:	1ad2      	subs	r2, r2, r3
 8004852:	42d3      	cmn	r3, r2
 8004854:	d100      	bne.n	8004858 <memmove+0x20>
 8004856:	bd10      	pop	{r4, pc}
 8004858:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800485c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004860:	e7f7      	b.n	8004852 <memmove+0x1a>
 8004862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004866:	f802 4f01 	strb.w	r4, [r2, #1]!
 800486a:	e7eb      	b.n	8004844 <memmove+0xc>

0800486c <_free_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4605      	mov	r5, r0
 8004870:	2900      	cmp	r1, #0
 8004872:	d045      	beq.n	8004900 <_free_r+0x94>
 8004874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004878:	1f0c      	subs	r4, r1, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	bfb8      	it	lt
 800487e:	18e4      	addlt	r4, r4, r3
 8004880:	f000 f8d6 	bl	8004a30 <__malloc_lock>
 8004884:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <_free_r+0x98>)
 8004886:	6813      	ldr	r3, [r2, #0]
 8004888:	4610      	mov	r0, r2
 800488a:	b933      	cbnz	r3, 800489a <_free_r+0x2e>
 800488c:	6063      	str	r3, [r4, #4]
 800488e:	6014      	str	r4, [r2, #0]
 8004890:	4628      	mov	r0, r5
 8004892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004896:	f000 b8cc 	b.w	8004a32 <__malloc_unlock>
 800489a:	42a3      	cmp	r3, r4
 800489c:	d90c      	bls.n	80048b8 <_free_r+0x4c>
 800489e:	6821      	ldr	r1, [r4, #0]
 80048a0:	1862      	adds	r2, r4, r1
 80048a2:	4293      	cmp	r3, r2
 80048a4:	bf04      	itt	eq
 80048a6:	681a      	ldreq	r2, [r3, #0]
 80048a8:	685b      	ldreq	r3, [r3, #4]
 80048aa:	6063      	str	r3, [r4, #4]
 80048ac:	bf04      	itt	eq
 80048ae:	1852      	addeq	r2, r2, r1
 80048b0:	6022      	streq	r2, [r4, #0]
 80048b2:	6004      	str	r4, [r0, #0]
 80048b4:	e7ec      	b.n	8004890 <_free_r+0x24>
 80048b6:	4613      	mov	r3, r2
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	b10a      	cbz	r2, 80048c0 <_free_r+0x54>
 80048bc:	42a2      	cmp	r2, r4
 80048be:	d9fa      	bls.n	80048b6 <_free_r+0x4a>
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	1858      	adds	r0, r3, r1
 80048c4:	42a0      	cmp	r0, r4
 80048c6:	d10b      	bne.n	80048e0 <_free_r+0x74>
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	4401      	add	r1, r0
 80048cc:	1858      	adds	r0, r3, r1
 80048ce:	4282      	cmp	r2, r0
 80048d0:	6019      	str	r1, [r3, #0]
 80048d2:	d1dd      	bne.n	8004890 <_free_r+0x24>
 80048d4:	6810      	ldr	r0, [r2, #0]
 80048d6:	6852      	ldr	r2, [r2, #4]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	4401      	add	r1, r0
 80048dc:	6019      	str	r1, [r3, #0]
 80048de:	e7d7      	b.n	8004890 <_free_r+0x24>
 80048e0:	d902      	bls.n	80048e8 <_free_r+0x7c>
 80048e2:	230c      	movs	r3, #12
 80048e4:	602b      	str	r3, [r5, #0]
 80048e6:	e7d3      	b.n	8004890 <_free_r+0x24>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	1821      	adds	r1, r4, r0
 80048ec:	428a      	cmp	r2, r1
 80048ee:	bf04      	itt	eq
 80048f0:	6811      	ldreq	r1, [r2, #0]
 80048f2:	6852      	ldreq	r2, [r2, #4]
 80048f4:	6062      	str	r2, [r4, #4]
 80048f6:	bf04      	itt	eq
 80048f8:	1809      	addeq	r1, r1, r0
 80048fa:	6021      	streq	r1, [r4, #0]
 80048fc:	605c      	str	r4, [r3, #4]
 80048fe:	e7c7      	b.n	8004890 <_free_r+0x24>
 8004900:	bd38      	pop	{r3, r4, r5, pc}
 8004902:	bf00      	nop
 8004904:	20003ddc 	.word	0x20003ddc

08004908 <_malloc_r>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	1ccd      	adds	r5, r1, #3
 800490c:	f025 0503 	bic.w	r5, r5, #3
 8004910:	3508      	adds	r5, #8
 8004912:	2d0c      	cmp	r5, #12
 8004914:	bf38      	it	cc
 8004916:	250c      	movcc	r5, #12
 8004918:	2d00      	cmp	r5, #0
 800491a:	4606      	mov	r6, r0
 800491c:	db01      	blt.n	8004922 <_malloc_r+0x1a>
 800491e:	42a9      	cmp	r1, r5
 8004920:	d903      	bls.n	800492a <_malloc_r+0x22>
 8004922:	230c      	movs	r3, #12
 8004924:	6033      	str	r3, [r6, #0]
 8004926:	2000      	movs	r0, #0
 8004928:	bd70      	pop	{r4, r5, r6, pc}
 800492a:	f000 f881 	bl	8004a30 <__malloc_lock>
 800492e:	4a23      	ldr	r2, [pc, #140]	; (80049bc <_malloc_r+0xb4>)
 8004930:	6814      	ldr	r4, [r2, #0]
 8004932:	4621      	mov	r1, r4
 8004934:	b991      	cbnz	r1, 800495c <_malloc_r+0x54>
 8004936:	4c22      	ldr	r4, [pc, #136]	; (80049c0 <_malloc_r+0xb8>)
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	b91b      	cbnz	r3, 8004944 <_malloc_r+0x3c>
 800493c:	4630      	mov	r0, r6
 800493e:	f000 f867 	bl	8004a10 <_sbrk_r>
 8004942:	6020      	str	r0, [r4, #0]
 8004944:	4629      	mov	r1, r5
 8004946:	4630      	mov	r0, r6
 8004948:	f000 f862 	bl	8004a10 <_sbrk_r>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d126      	bne.n	800499e <_malloc_r+0x96>
 8004950:	230c      	movs	r3, #12
 8004952:	6033      	str	r3, [r6, #0]
 8004954:	4630      	mov	r0, r6
 8004956:	f000 f86c 	bl	8004a32 <__malloc_unlock>
 800495a:	e7e4      	b.n	8004926 <_malloc_r+0x1e>
 800495c:	680b      	ldr	r3, [r1, #0]
 800495e:	1b5b      	subs	r3, r3, r5
 8004960:	d41a      	bmi.n	8004998 <_malloc_r+0x90>
 8004962:	2b0b      	cmp	r3, #11
 8004964:	d90f      	bls.n	8004986 <_malloc_r+0x7e>
 8004966:	600b      	str	r3, [r1, #0]
 8004968:	50cd      	str	r5, [r1, r3]
 800496a:	18cc      	adds	r4, r1, r3
 800496c:	4630      	mov	r0, r6
 800496e:	f000 f860 	bl	8004a32 <__malloc_unlock>
 8004972:	f104 000b 	add.w	r0, r4, #11
 8004976:	1d23      	adds	r3, r4, #4
 8004978:	f020 0007 	bic.w	r0, r0, #7
 800497c:	1ac3      	subs	r3, r0, r3
 800497e:	d01b      	beq.n	80049b8 <_malloc_r+0xb0>
 8004980:	425a      	negs	r2, r3
 8004982:	50e2      	str	r2, [r4, r3]
 8004984:	bd70      	pop	{r4, r5, r6, pc}
 8004986:	428c      	cmp	r4, r1
 8004988:	bf0d      	iteet	eq
 800498a:	6863      	ldreq	r3, [r4, #4]
 800498c:	684b      	ldrne	r3, [r1, #4]
 800498e:	6063      	strne	r3, [r4, #4]
 8004990:	6013      	streq	r3, [r2, #0]
 8004992:	bf18      	it	ne
 8004994:	460c      	movne	r4, r1
 8004996:	e7e9      	b.n	800496c <_malloc_r+0x64>
 8004998:	460c      	mov	r4, r1
 800499a:	6849      	ldr	r1, [r1, #4]
 800499c:	e7ca      	b.n	8004934 <_malloc_r+0x2c>
 800499e:	1cc4      	adds	r4, r0, #3
 80049a0:	f024 0403 	bic.w	r4, r4, #3
 80049a4:	42a0      	cmp	r0, r4
 80049a6:	d005      	beq.n	80049b4 <_malloc_r+0xac>
 80049a8:	1a21      	subs	r1, r4, r0
 80049aa:	4630      	mov	r0, r6
 80049ac:	f000 f830 	bl	8004a10 <_sbrk_r>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d0cd      	beq.n	8004950 <_malloc_r+0x48>
 80049b4:	6025      	str	r5, [r4, #0]
 80049b6:	e7d9      	b.n	800496c <_malloc_r+0x64>
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
 80049ba:	bf00      	nop
 80049bc:	20003ddc 	.word	0x20003ddc
 80049c0:	20003de0 	.word	0x20003de0

080049c4 <_realloc_r>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	4607      	mov	r7, r0
 80049c8:	4614      	mov	r4, r2
 80049ca:	460e      	mov	r6, r1
 80049cc:	b921      	cbnz	r1, 80049d8 <_realloc_r+0x14>
 80049ce:	4611      	mov	r1, r2
 80049d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049d4:	f7ff bf98 	b.w	8004908 <_malloc_r>
 80049d8:	b922      	cbnz	r2, 80049e4 <_realloc_r+0x20>
 80049da:	f7ff ff47 	bl	800486c <_free_r>
 80049de:	4625      	mov	r5, r4
 80049e0:	4628      	mov	r0, r5
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e4:	f000 f826 	bl	8004a34 <_malloc_usable_size_r>
 80049e8:	4284      	cmp	r4, r0
 80049ea:	d90f      	bls.n	8004a0c <_realloc_r+0x48>
 80049ec:	4621      	mov	r1, r4
 80049ee:	4638      	mov	r0, r7
 80049f0:	f7ff ff8a 	bl	8004908 <_malloc_r>
 80049f4:	4605      	mov	r5, r0
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d0f2      	beq.n	80049e0 <_realloc_r+0x1c>
 80049fa:	4631      	mov	r1, r6
 80049fc:	4622      	mov	r2, r4
 80049fe:	f7ff fbf5 	bl	80041ec <memcpy>
 8004a02:	4631      	mov	r1, r6
 8004a04:	4638      	mov	r0, r7
 8004a06:	f7ff ff31 	bl	800486c <_free_r>
 8004a0a:	e7e9      	b.n	80049e0 <_realloc_r+0x1c>
 8004a0c:	4635      	mov	r5, r6
 8004a0e:	e7e7      	b.n	80049e0 <_realloc_r+0x1c>

08004a10 <_sbrk_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4c06      	ldr	r4, [pc, #24]	; (8004a2c <_sbrk_r+0x1c>)
 8004a14:	2300      	movs	r3, #0
 8004a16:	4605      	mov	r5, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	f000 f814 	bl	8004a48 <_sbrk>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_sbrk_r+0x1a>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_sbrk_r+0x1a>
 8004a28:	602b      	str	r3, [r5, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	20003f10 	.word	0x20003f10

08004a30 <__malloc_lock>:
 8004a30:	4770      	bx	lr

08004a32 <__malloc_unlock>:
 8004a32:	4770      	bx	lr

08004a34 <_malloc_usable_size_r>:
 8004a34:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	f1a0 0004 	sub.w	r0, r0, #4
 8004a3e:	bfbc      	itt	lt
 8004a40:	580b      	ldrlt	r3, [r1, r0]
 8004a42:	18c0      	addlt	r0, r0, r3
 8004a44:	4770      	bx	lr
	...

08004a48 <_sbrk>:
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <_sbrk+0x14>)
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	b909      	cbnz	r1, 8004a54 <_sbrk+0xc>
 8004a50:	4903      	ldr	r1, [pc, #12]	; (8004a60 <_sbrk+0x18>)
 8004a52:	6019      	str	r1, [r3, #0]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	4402      	add	r2, r0
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	4770      	bx	lr
 8004a5c:	20003de4 	.word	0x20003de4
 8004a60:	20003f14 	.word	0x20003f14

08004a64 <_init>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	bf00      	nop
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr

08004a70 <_fini>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	bf00      	nop
 8004a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a76:	bc08      	pop	{r3}
 8004a78:	469e      	mov	lr, r3
 8004a7a:	4770      	bx	lr
