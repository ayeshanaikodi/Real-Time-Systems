
Lab3_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004830  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003ea4  20000070  08004c98  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003f14  08004c98  00023f14  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002322d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000445b  00000000  00000000  000432cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bed9  00000000  00000000  00047728  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001078  00000000  00000000  00053608  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001508  00000000  00000000  00054680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009524  00000000  00000000  00055b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000066d0  00000000  00000000  0005f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006577c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000032f0  00000000  00000000  000657f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080049e8 	.word	0x080049e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080049e8 	.word	0x080049e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b97a 	b.w	80005cc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	468c      	mov	ip, r1
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	9e08      	ldr	r6, [sp, #32]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d151      	bne.n	80003a4 <__udivmoddi4+0xb4>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d96d      	bls.n	80003e2 <__udivmoddi4+0xf2>
 8000306:	fab2 fe82 	clz	lr, r2
 800030a:	f1be 0f00 	cmp.w	lr, #0
 800030e:	d00b      	beq.n	8000328 <__udivmoddi4+0x38>
 8000310:	f1ce 0c20 	rsb	ip, lr, #32
 8000314:	fa01 f50e 	lsl.w	r5, r1, lr
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000320:	ea4c 0c05 	orr.w	ip, ip, r5
 8000324:	fa00 f40e 	lsl.w	r4, r0, lr
 8000328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	fbbc f8fa 	udiv	r8, ip, sl
 8000332:	fa1f f987 	uxth.w	r9, r7
 8000336:	fb0a cc18 	mls	ip, sl, r8, ip
 800033a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800033e:	fb08 f309 	mul.w	r3, r8, r9
 8000342:	42ab      	cmp	r3, r5
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x6c>
 8000346:	19ed      	adds	r5, r5, r7
 8000348:	f108 32ff 	add.w	r2, r8, #4294967295
 800034c:	f080 8123 	bcs.w	8000596 <__udivmoddi4+0x2a6>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f240 8120 	bls.w	8000596 <__udivmoddi4+0x2a6>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	443d      	add	r5, r7
 800035c:	1aed      	subs	r5, r5, r3
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb5 f0fa 	udiv	r0, r5, sl
 8000364:	fb0a 5510 	mls	r5, sl, r0, r5
 8000368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800036c:	fb00 f909 	mul.w	r9, r0, r9
 8000370:	45a1      	cmp	r9, r4
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x98>
 8000374:	19e4      	adds	r4, r4, r7
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	f080 810a 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800037e:	45a1      	cmp	r9, r4
 8000380:	f240 8107 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000384:	3802      	subs	r0, #2
 8000386:	443c      	add	r4, r7
 8000388:	eba4 0409 	sub.w	r4, r4, r9
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	2100      	movs	r1, #0
 8000392:	2e00      	cmp	r6, #0
 8000394:	d061      	beq.n	800045a <__udivmoddi4+0x16a>
 8000396:	fa24 f40e 	lsr.w	r4, r4, lr
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xc8>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d054      	beq.n	8000456 <__udivmoddi4+0x166>
 80003ac:	2100      	movs	r1, #0
 80003ae:	e886 0021 	stmia.w	r6, {r0, r5}
 80003b2:	4608      	mov	r0, r1
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	fab3 f183 	clz	r1, r3
 80003bc:	2900      	cmp	r1, #0
 80003be:	f040 808e 	bne.w	80004de <__udivmoddi4+0x1ee>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xdc>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80fa 	bhi.w	80005c0 <__udivmoddi4+0x2d0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb65 0503 	sbc.w	r5, r5, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	46ac      	mov	ip, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d03f      	beq.n	800045a <__udivmoddi4+0x16a>
 80003da:	e886 1010 	stmia.w	r6, {r4, ip}
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b912      	cbnz	r2, 80003ea <__udivmoddi4+0xfa>
 80003e4:	2701      	movs	r7, #1
 80003e6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ea:	fab7 fe87 	clz	lr, r7
 80003ee:	f1be 0f00 	cmp.w	lr, #0
 80003f2:	d134      	bne.n	800045e <__udivmoddi4+0x16e>
 80003f4:	1beb      	subs	r3, r5, r7
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	2101      	movs	r1, #1
 80003fe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000402:	0c25      	lsrs	r5, r4, #16
 8000404:	fb02 3318 	mls	r3, r2, r8, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb0c f308 	mul.w	r3, ip, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x134>
 8000414:	19ed      	adds	r5, r5, r7
 8000416:	f108 30ff 	add.w	r0, r8, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x132>
 800041c:	42ab      	cmp	r3, r5
 800041e:	f200 80d1 	bhi.w	80005c4 <__udivmoddi4+0x2d4>
 8000422:	4680      	mov	r8, r0
 8000424:	1aed      	subs	r5, r5, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb5 f0f2 	udiv	r0, r5, r2
 800042c:	fb02 5510 	mls	r5, r2, r0, r5
 8000430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000434:	fb0c fc00 	mul.w	ip, ip, r0
 8000438:	45a4      	cmp	ip, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x15c>
 800043c:	19e4      	adds	r4, r4, r7
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x15a>
 8000444:	45a4      	cmp	ip, r4
 8000446:	f200 80b8 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000454:	e79d      	b.n	8000392 <__udivmoddi4+0xa2>
 8000456:	4631      	mov	r1, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1ce 0420 	rsb	r4, lr, #32
 8000462:	fa05 f30e 	lsl.w	r3, r5, lr
 8000466:	fa07 f70e 	lsl.w	r7, r7, lr
 800046a:	fa20 f804 	lsr.w	r8, r0, r4
 800046e:	0c3a      	lsrs	r2, r7, #16
 8000470:	fa25 f404 	lsr.w	r4, r5, r4
 8000474:	ea48 0803 	orr.w	r8, r8, r3
 8000478:	fbb4 f1f2 	udiv	r1, r4, r2
 800047c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000480:	fb02 4411 	mls	r4, r2, r1, r4
 8000484:	fa1f fc87 	uxth.w	ip, r7
 8000488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800048c:	fb01 f30c 	mul.w	r3, r1, ip
 8000490:	42ab      	cmp	r3, r5
 8000492:	fa00 f40e 	lsl.w	r4, r0, lr
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x1bc>
 8000498:	19ed      	adds	r5, r5, r7
 800049a:	f101 30ff 	add.w	r0, r1, #4294967295
 800049e:	f080 808a 	bcs.w	80005b6 <__udivmoddi4+0x2c6>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	f240 8087 	bls.w	80005b6 <__udivmoddi4+0x2c6>
 80004a8:	3902      	subs	r1, #2
 80004aa:	443d      	add	r5, r7
 80004ac:	1aeb      	subs	r3, r5, r3
 80004ae:	fa1f f588 	uxth.w	r5, r8
 80004b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004b6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004be:	fb00 f30c 	mul.w	r3, r0, ip
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1e6>
 80004c6:	19ed      	adds	r5, r5, r7
 80004c8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004cc:	d26f      	bcs.n	80005ae <__udivmoddi4+0x2be>
 80004ce:	42ab      	cmp	r3, r5
 80004d0:	d96d      	bls.n	80005ae <__udivmoddi4+0x2be>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	1aeb      	subs	r3, r5, r3
 80004d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004dc:	e78f      	b.n	80003fe <__udivmoddi4+0x10e>
 80004de:	f1c1 0720 	rsb	r7, r1, #32
 80004e2:	fa22 f807 	lsr.w	r8, r2, r7
 80004e6:	408b      	lsls	r3, r1
 80004e8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ec:	ea48 0303 	orr.w	r3, r8, r3
 80004f0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004fe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000502:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000506:	fb0c 5519 	mls	r5, ip, r9, r5
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000512:	fb09 f408 	mul.w	r4, r9, r8
 8000516:	42ac      	cmp	r4, r5
 8000518:	fa02 f201 	lsl.w	r2, r2, r1
 800051c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x244>
 8000522:	18ed      	adds	r5, r5, r3
 8000524:	f109 30ff 	add.w	r0, r9, #4294967295
 8000528:	d243      	bcs.n	80005b2 <__udivmoddi4+0x2c2>
 800052a:	42ac      	cmp	r4, r5
 800052c:	d941      	bls.n	80005b2 <__udivmoddi4+0x2c2>
 800052e:	f1a9 0902 	sub.w	r9, r9, #2
 8000532:	441d      	add	r5, r3
 8000534:	1b2d      	subs	r5, r5, r4
 8000536:	fa1f fe8e 	uxth.w	lr, lr
 800053a:	fbb5 f0fc 	udiv	r0, r5, ip
 800053e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000546:	fb00 f808 	mul.w	r8, r0, r8
 800054a:	45a0      	cmp	r8, r4
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x26e>
 800054e:	18e4      	adds	r4, r4, r3
 8000550:	f100 35ff 	add.w	r5, r0, #4294967295
 8000554:	d229      	bcs.n	80005aa <__udivmoddi4+0x2ba>
 8000556:	45a0      	cmp	r8, r4
 8000558:	d927      	bls.n	80005aa <__udivmoddi4+0x2ba>
 800055a:	3802      	subs	r0, #2
 800055c:	441c      	add	r4, r3
 800055e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000562:	eba4 0408 	sub.w	r4, r4, r8
 8000566:	fba0 8902 	umull	r8, r9, r0, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	46c6      	mov	lr, r8
 800056e:	464d      	mov	r5, r9
 8000570:	d315      	bcc.n	800059e <__udivmoddi4+0x2ae>
 8000572:	d012      	beq.n	800059a <__udivmoddi4+0x2aa>
 8000574:	b156      	cbz	r6, 800058c <__udivmoddi4+0x29c>
 8000576:	ebba 030e 	subs.w	r3, sl, lr
 800057a:	eb64 0405 	sbc.w	r4, r4, r5
 800057e:	fa04 f707 	lsl.w	r7, r4, r7
 8000582:	40cb      	lsrs	r3, r1
 8000584:	431f      	orrs	r7, r3
 8000586:	40cc      	lsrs	r4, r1
 8000588:	6037      	str	r7, [r6, #0]
 800058a:	6074      	str	r4, [r6, #4]
 800058c:	2100      	movs	r1, #0
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	4618      	mov	r0, r3
 8000594:	e6f8      	b.n	8000388 <__udivmoddi4+0x98>
 8000596:	4690      	mov	r8, r2
 8000598:	e6e0      	b.n	800035c <__udivmoddi4+0x6c>
 800059a:	45c2      	cmp	sl, r8
 800059c:	d2ea      	bcs.n	8000574 <__udivmoddi4+0x284>
 800059e:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a2:	eb69 0503 	sbc.w	r5, r9, r3
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7e4      	b.n	8000574 <__udivmoddi4+0x284>
 80005aa:	4628      	mov	r0, r5
 80005ac:	e7d7      	b.n	800055e <__udivmoddi4+0x26e>
 80005ae:	4640      	mov	r0, r8
 80005b0:	e791      	b.n	80004d6 <__udivmoddi4+0x1e6>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e7be      	b.n	8000534 <__udivmoddi4+0x244>
 80005b6:	4601      	mov	r1, r0
 80005b8:	e778      	b.n	80004ac <__udivmoddi4+0x1bc>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e745      	b.n	800044c <__udivmoddi4+0x15c>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e708      	b.n	80003d6 <__udivmoddi4+0xe6>
 80005c4:	f1a8 0802 	sub.w	r8, r8, #2
 80005c8:	443d      	add	r5, r7
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x134>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x30>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005da:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005e2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 faa9 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f003 fcc0 	bl	8003f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f8:	f003 fc14 	bl	8003e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005fc:	2000      	movs	r0, #0
 80005fe:	bd08      	pop	{r3, pc}
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_IncTick+0x10>)
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_IncTick+0x14>)
 8000608:	6811      	ldr	r1, [r2, #0]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	440b      	add	r3, r1
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20003dec 	.word	0x20003dec
 8000618:	20000000 	.word	0x20000000

0800061c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <HAL_GetTick+0x8>)
 800061e:	6818      	ldr	r0, [r3, #0]
}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20003dec 	.word	0x20003dec

08000628 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000628:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800062a:	4604      	mov	r4, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	f000 8099 	beq.w	8000764 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000632:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000634:	b923      	cbnz	r3, 8000640 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000636:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000638:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800063c:	f003 fc14 	bl	8003e68 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000642:	06db      	lsls	r3, r3, #27
 8000644:	f100 808c 	bmi.w	8000760 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800064a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800064e:	f023 0302 	bic.w	r3, r3, #2
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000658:	4b43      	ldr	r3, [pc, #268]	; (8000768 <HAL_ADC_Init+0x140>)
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000660:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	6861      	ldr	r1, [r4, #4]
 8000666:	430a      	orrs	r2, r1
 8000668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800066a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800066c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800067c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800067e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000680:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000682:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000686:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	430a      	orrs	r2, r1
 800068c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800068e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000690:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	430a      	orrs	r2, r1
 800069c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800069e:	4933      	ldr	r1, [pc, #204]	; (800076c <HAL_ADC_Init+0x144>)
 80006a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006a2:	428a      	cmp	r2, r1
 80006a4:	d050      	beq.n	8000748 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006a6:	6899      	ldr	r1, [r3, #8]
 80006a8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006ac:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006ae:	6899      	ldr	r1, [r3, #8]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006c2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006c4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006c6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006c8:	f022 0202 	bic.w	r2, r2, #2
 80006cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80006d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006d6:	6a22      	ldr	r2, [r4, #32]
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d03d      	beq.n	8000758 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006dc:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006de:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006e4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006ec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	3901      	subs	r1, #1
 80006f2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006fa:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000704:	3901      	subs	r1, #1
 8000706:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800070c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800070e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000710:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000716:	689a      	ldr	r2, [r3, #8]
 8000718:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800071c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800071e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000720:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000728:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800072a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800072c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000730:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000732:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000736:	f023 0303 	bic.w	r3, r3, #3
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000740:	2300      	movs	r3, #0
 8000742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000746:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800074e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000756:	e7b4      	b.n	80006c2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800075e:	e7ca      	b.n	80006f6 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000760:	2001      	movs	r0, #1
 8000762:	e7ed      	b.n	8000740 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000764:	2001      	movs	r0, #1
}
 8000766:	bd10      	pop	{r4, pc}
 8000768:	40012300 	.word	0x40012300
 800076c:	0f000001 	.word	0x0f000001

08000770 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000770:	6803      	ldr	r3, [r0, #0]
 8000772:	689a      	ldr	r2, [r3, #8]
{
 8000774:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000776:	0556      	lsls	r6, r2, #21
{
 8000778:	4604      	mov	r4, r0
 800077a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800077c:	d50b      	bpl.n	8000796 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800077e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000780:	05d8      	lsls	r0, r3, #23
 8000782:	d508      	bpl.n	8000796 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 800078c:	2300      	movs	r3, #0
 800078e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000792:	2001      	movs	r0, #1
 8000794:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8000796:	f7ff ff41 	bl	800061c <HAL_GetTick>
 800079a:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	0792      	lsls	r2, r2, #30
 80007a2:	d50c      	bpl.n	80007be <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007a4:	f06f 0212 	mvn.w	r2, #18
 80007a8:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007b0:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80007b8:	d013      	beq.n	80007e2 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80007ba:	2000      	movs	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80007be:	1c69      	adds	r1, r5, #1
 80007c0:	d0ed      	beq.n	800079e <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80007c2:	b945      	cbnz	r5, 80007d6 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80007c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80007cc:	2300      	movs	r3, #0
 80007ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80007d2:	2003      	movs	r0, #3
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80007d6:	f7ff ff21 	bl	800061c <HAL_GetTick>
 80007da:	1b80      	subs	r0, r0, r6
 80007dc:	4285      	cmp	r5, r0
 80007de:	d2dd      	bcs.n	800079c <HAL_ADC_PollForConversion+0x2c>
 80007e0:	e7f0      	b.n	80007c4 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007e2:	69a2      	ldr	r2, [r4, #24]
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d1e8      	bne.n	80007ba <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80007e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007ea:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80007ee:	d002      	beq.n	80007f6 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80007f0:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80007f2:	055b      	lsls	r3, r3, #21
 80007f4:	d4e1      	bmi.n	80007ba <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80007f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007fc:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000800:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000804:	d1d9      	bne.n	80007ba <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <HAL_ADC_Start_IT>:
{
 8000810:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000812:	2300      	movs	r3, #0
 8000814:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000816:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800081a:	2b01      	cmp	r3, #1
 800081c:	d054      	beq.n	80008c8 <HAL_ADC_Start_IT+0xb8>
 800081e:	2301      	movs	r3, #1
 8000820:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000824:	6803      	ldr	r3, [r0, #0]
 8000826:	689a      	ldr	r2, [r3, #8]
 8000828:	07d1      	lsls	r1, r2, #31
 800082a:	d505      	bpl.n	8000838 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	07d2      	lsls	r2, r2, #31
 8000830:	d414      	bmi.n	800085c <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 8000832:	2000      	movs	r0, #0
}
 8000834:	b002      	add	sp, #8
 8000836:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000838:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800083a:	4924      	ldr	r1, [pc, #144]	; (80008cc <HAL_ADC_Start_IT+0xbc>)
    __HAL_ADC_ENABLE(hadc);
 800083c:	f042 0201 	orr.w	r2, r2, #1
 8000840:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000842:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <HAL_ADC_Start_IT+0xc0>)
 8000844:	6812      	ldr	r2, [r2, #0]
 8000846:	fbb2 f2f1 	udiv	r2, r2, r1
 800084a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800084e:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000850:	9a01      	ldr	r2, [sp, #4]
 8000852:	2a00      	cmp	r2, #0
 8000854:	d0ea      	beq.n	800082c <HAL_ADC_Start_IT+0x1c>
      counter--;
 8000856:	9a01      	ldr	r2, [sp, #4]
 8000858:	3a01      	subs	r2, #1
 800085a:	e7f8      	b.n	800084e <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 800085c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800085e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000862:	f022 0201 	bic.w	r2, r2, #1
 8000866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800086a:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000870:	bf41      	itttt	mi
 8000872:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000874:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000878:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800087c:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800087e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000884:	bf1c      	itt	ne
 8000886:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000888:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800088c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800088e:	2200      	movs	r2, #0
 8000890:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000894:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000898:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80008a0:	f042 0220 	orr.w	r2, r2, #32
 80008a4:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <HAL_ADC_Start_IT+0xc4>)
 80008a8:	6852      	ldr	r2, [r2, #4]
 80008aa:	06d2      	lsls	r2, r2, #27
 80008ac:	d108      	bne.n	80008c0 <HAL_ADC_Start_IT+0xb0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008ae:	6898      	ldr	r0, [r3, #8]
 80008b0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80008b4:	d1bd      	bne.n	8000832 <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	e7b9      	b.n	8000834 <HAL_ADC_Start_IT+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <HAL_ADC_Start_IT+0xc8>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d1b5      	bne.n	8000832 <HAL_ADC_Start_IT+0x22>
 80008c6:	e7f2      	b.n	80008ae <HAL_ADC_Start_IT+0x9e>
  __HAL_LOCK(hadc);
 80008c8:	2002      	movs	r0, #2
 80008ca:	e7b3      	b.n	8000834 <HAL_ADC_Start_IT+0x24>
 80008cc:	000f4240 	.word	0x000f4240
 80008d0:	20000008 	.word	0x20000008
 80008d4:	40012300 	.word	0x40012300
 80008d8:	40012000 	.word	0x40012000

080008dc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80008dc:	6803      	ldr	r3, [r0, #0]
 80008de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80008e0:	4770      	bx	lr

080008e2 <HAL_ADC_ConvCpltCallback>:
 80008e2:	4770      	bx	lr

080008e4 <HAL_ADC_LevelOutOfWindowCallback>:
 80008e4:	4770      	bx	lr

080008e6 <HAL_ADC_ErrorCallback>:
{
 80008e6:	4770      	bx	lr

080008e8 <HAL_ADC_IRQHandler>:
{
 80008e8:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80008ea:	6803      	ldr	r3, [r0, #0]
 80008ec:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80008ee:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80008f0:	078d      	lsls	r5, r1, #30
{
 80008f2:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80008f4:	d52b      	bpl.n	800094e <HAL_ADC_IRQHandler+0x66>
 80008f6:	0690      	lsls	r0, r2, #26
 80008f8:	d529      	bpl.n	800094e <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008fc:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80008fe:	bf5e      	ittt	pl
 8000900:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000902:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000906:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800090e:	d117      	bne.n	8000940 <HAL_ADC_IRQHandler+0x58>
 8000910:	69a2      	ldr	r2, [r4, #24]
 8000912:	b9aa      	cbnz	r2, 8000940 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000916:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800091a:	d002      	beq.n	8000922 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800091c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800091e:	0552      	lsls	r2, r2, #21
 8000920:	d40e      	bmi.n	8000940 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	f022 0220 	bic.w	r2, r2, #32
 8000928:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800092a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800092c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000930:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000934:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000936:	bf5e      	ittt	pl
 8000938:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800093a:	f043 0301 	orrpl.w	r3, r3, #1
 800093e:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000940:	4620      	mov	r0, r4
 8000942:	f7ff ffce 	bl	80008e2 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000946:	6823      	ldr	r3, [r4, #0]
 8000948:	f06f 0212 	mvn.w	r2, #18
 800094c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000952:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000954:	074d      	lsls	r5, r1, #29
 8000956:	d532      	bpl.n	80009be <HAL_ADC_IRQHandler+0xd6>
 8000958:	0610      	lsls	r0, r2, #24
 800095a:	d530      	bpl.n	80009be <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800095c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800095e:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000960:	bf5e      	ittt	pl
 8000962:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000964:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000968:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000970:	d11e      	bne.n	80009b0 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000974:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000978:	d002      	beq.n	8000980 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800097a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800097c:	0552      	lsls	r2, r2, #21
 800097e:	d417      	bmi.n	80009b0 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000980:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000982:	0555      	lsls	r5, r2, #21
 8000984:	d414      	bmi.n	80009b0 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000986:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000988:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800098c:	d110      	bne.n	80009b0 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800098e:	69a2      	ldr	r2, [r4, #24]
 8000990:	b972      	cbnz	r2, 80009b0 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000998:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800099a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800099c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009a0:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80009a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009a4:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009a6:	bf5e      	ittt	pl
 80009a8:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80009aa:	f043 0301 	orrpl.w	r3, r3, #1
 80009ae:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80009b0:	4620      	mov	r0, r4
 80009b2:	f000 f8c5 	bl	8000b40 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	f06f 020c 	mvn.w	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80009c2:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80009c4:	07c9      	lsls	r1, r1, #31
 80009c6:	d50f      	bpl.n	80009e8 <HAL_ADC_IRQHandler+0x100>
 80009c8:	0655      	lsls	r5, r2, #25
 80009ca:	d50d      	bpl.n	80009e8 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	07d8      	lsls	r0, r3, #31
 80009d0:	d50a      	bpl.n	80009e8 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80009d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80009da:	4620      	mov	r0, r4
 80009dc:	f7ff ff82 	bl	80008e4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	f06f 0201 	mvn.w	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80009e8:	6823      	ldr	r3, [r4, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80009ec:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80009ee:	0689      	lsls	r1, r1, #26
 80009f0:	d50d      	bpl.n	8000a0e <HAL_ADC_IRQHandler+0x126>
 80009f2:	0152      	lsls	r2, r2, #5
 80009f4:	d50b      	bpl.n	8000a0e <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009f6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009f8:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009fc:	f042 0202 	orr.w	r2, r2, #2
 8000a00:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 8000a02:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000a04:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8000a06:	f7ff ff6e 	bl	80008e6 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	601d      	str	r5, [r3, #0]
 8000a0e:	bd38      	pop	{r3, r4, r5, pc}

08000a10 <HAL_ADC_ConfigChannel>:
{
 8000a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000a16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d06a      	beq.n	8000af4 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a1e:	680d      	ldr	r5, [r1, #0]
 8000a20:	6804      	ldr	r4, [r0, #0]
 8000a22:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000a24:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a26:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000a28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000a2c:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a2e:	d92a      	bls.n	8000a86 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a30:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000a34:	68e7      	ldr	r7, [r4, #12]
 8000a36:	3b1e      	subs	r3, #30
 8000a38:	f04f 0e07 	mov.w	lr, #7
 8000a3c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a40:	ea27 070e 	bic.w	r7, r7, lr
 8000a44:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a46:	68e7      	ldr	r7, [r4, #12]
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	433b      	orrs	r3, r7
 8000a4e:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000a50:	684a      	ldr	r2, [r1, #4]
 8000a52:	2a06      	cmp	r2, #6
 8000a54:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000a58:	d825      	bhi.n	8000aa6 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a5a:	4413      	add	r3, r2
 8000a5c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000a5e:	1f59      	subs	r1, r3, #5
 8000a60:	231f      	movs	r3, #31
 8000a62:	408b      	lsls	r3, r1
 8000a64:	ea27 0303 	bic.w	r3, r7, r3
 8000a68:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a6c:	fa06 f101 	lsl.w	r1, r6, r1
 8000a70:	4311      	orrs	r1, r2
 8000a72:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <HAL_ADC_ConfigChannel+0x11c>)
 8000a76:	429c      	cmp	r4, r3
 8000a78:	d034      	beq.n	8000ae4 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000a80:	4618      	mov	r0, r3
}
 8000a82:	b003      	add	sp, #12
 8000a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a86:	6927      	ldr	r7, [r4, #16]
 8000a88:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000a8c:	f04f 0e07 	mov.w	lr, #7
 8000a90:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a94:	ea27 070e 	bic.w	r7, r7, lr
 8000a98:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a9a:	6927      	ldr	r7, [r4, #16]
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	433b      	orrs	r3, r7
 8000aa2:	6123      	str	r3, [r4, #16]
 8000aa4:	e7d4      	b.n	8000a50 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000aa6:	2a0c      	cmp	r2, #12
 8000aa8:	d80e      	bhi.n	8000ac8 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000aaa:	4413      	add	r3, r2
 8000aac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000aae:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000ab2:	231f      	movs	r3, #31
 8000ab4:	4093      	lsls	r3, r2
 8000ab6:	ea21 0303 	bic.w	r3, r1, r3
 8000aba:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000abc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000abe:	fa06 f202 	lsl.w	r2, r6, r2
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	6322      	str	r2, [r4, #48]	; 0x30
 8000ac6:	e7d5      	b.n	8000a74 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ac8:	4413      	add	r3, r2
 8000aca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000acc:	3b41      	subs	r3, #65	; 0x41
 8000ace:	221f      	movs	r2, #31
 8000ad0:	409a      	lsls	r2, r3
 8000ad2:	ea21 0202 	bic.w	r2, r1, r2
 8000ad6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ad8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ada:	fa06 f103 	lsl.w	r1, r6, r3
 8000ade:	4311      	orrs	r1, r2
 8000ae0:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000ae2:	e7c7      	b.n	8000a74 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ae4:	2d12      	cmp	r5, #18
 8000ae6:	d107      	bne.n	8000af8 <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <HAL_ADC_ConfigChannel+0x120>)
 8000aea:	6853      	ldr	r3, [r2, #4]
 8000aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af0:	6053      	str	r3, [r2, #4]
 8000af2:	e7c2      	b.n	8000a7a <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000af4:	2002      	movs	r0, #2
 8000af6:	e7c4      	b.n	8000a82 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_ADC_ConfigChannel+0x124>)
 8000afa:	429d      	cmp	r5, r3
 8000afc:	d001      	beq.n	8000b02 <HAL_ADC_ConfigChannel+0xf2>
 8000afe:	2d11      	cmp	r5, #17
 8000b00:	d1bb      	bne.n	8000a7a <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b02:	490b      	ldr	r1, [pc, #44]	; (8000b30 <HAL_ADC_ConfigChannel+0x120>)
 8000b04:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b06:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b0c:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b0e:	d1b4      	bne.n	8000a7a <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_ADC_ConfigChannel+0x128>)
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_ADC_ConfigChannel+0x12c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b1a:	230a      	movs	r3, #10
 8000b1c:	4353      	muls	r3, r2
        counter--;
 8000b1e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000b20:	9b01      	ldr	r3, [sp, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0a9      	beq.n	8000a7a <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000b26:	9b01      	ldr	r3, [sp, #4]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	e7f8      	b.n	8000b1e <HAL_ADC_ConfigChannel+0x10e>
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	40012300 	.word	0x40012300
 8000b34:	10000012 	.word	0x10000012
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	000f4240 	.word	0x000f4240

08000b40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b40:	4770      	bx	lr
	...

08000b44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b4c:	041b      	lsls	r3, r3, #16
 8000b4e:	0c1b      	lsrs	r3, r3, #16
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b54:	0200      	lsls	r0, r0, #8
 8000b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b5e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b60:	60d3      	str	r3, [r2, #12]
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b530      	push	{r4, r5, lr}
 8000b6c:	68dc      	ldr	r4, [r3, #12]
 8000b6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	bf28      	it	cs
 8000b7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 0501 	mov.w	r5, #1
 8000b84:	fa05 f303 	lsl.w	r3, r5, r3
 8000b88:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8c:	bf8c      	ite	hi
 8000b8e:	3c03      	subhi	r4, #3
 8000b90:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b92:	4019      	ands	r1, r3
 8000b94:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b96:	fa05 f404 	lsl.w	r4, r5, r4
 8000b9a:	3c01      	subs	r4, #1
 8000b9c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b9e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	ea42 0201 	orr.w	r2, r2, r1
 8000ba4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	bfaf      	iteee	ge
 8000baa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	f000 000f 	andlt.w	r0, r0, #15
 8000bb2:	4b06      	ldrlt	r3, [pc, #24]	; (8000bcc <HAL_NVIC_SetPriority+0x64>)
 8000bb4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	bfa5      	ittet	ge
 8000bb8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000bbc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bc4:	bd30      	pop	{r4, r5, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	e000ed14 	.word	0xe000ed14

08000bd0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bd0:	0942      	lsrs	r2, r0, #5
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f000 001f 	and.w	r0, r0, #31
 8000bd8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bdc:	4b01      	ldr	r3, [pc, #4]	; (8000be4 <HAL_NVIC_EnableIRQ+0x14>)
 8000bde:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000be8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d003      	beq.n	8000bf8 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000bf8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000c00:	6813      	ldr	r3, [r2, #0]
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000c08:	2000      	movs	r0, #0
}
 8000c0a:	4770      	bx	lr

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c10:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c14:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000db8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c18:	4a65      	ldr	r2, [pc, #404]	; (8000db0 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c1a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000dbc <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c20:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000c22:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000c28:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000c30:	45b6      	cmp	lr, r6
 8000c32:	f040 80aa 	bne.w	8000d8a <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c36:	684c      	ldr	r4, [r1, #4]
 8000c38:	f024 0710 	bic.w	r7, r4, #16
 8000c3c:	2f02      	cmp	r7, #2
 8000c3e:	d116      	bne.n	8000c6e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000c40:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c44:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c48:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000c4c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c50:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c54:	f04f 0c0f 	mov.w	ip, #15
 8000c58:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c5c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c60:	690d      	ldr	r5, [r1, #16]
 8000c62:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c66:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000c6a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c6e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c72:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c74:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c78:	fa05 f50a 	lsl.w	r5, r5, sl
 8000c7c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c7e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c82:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c86:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c8c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c90:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000c92:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c96:	d811      	bhi.n	8000cbc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000c98:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9e:	68cf      	ldr	r7, [r1, #12]
 8000ca0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ca4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ca8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000caa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cb0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000cb4:	409f      	lsls	r7, r3
 8000cb6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cbc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cbe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc0:	688f      	ldr	r7, [r1, #8]
 8000cc2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000cc6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000cc8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cca:	00e5      	lsls	r5, r4, #3
 8000ccc:	d55d      	bpl.n	8000d8a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	f04f 0b00 	mov.w	fp, #0
 8000cd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8000cd6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cda:	4d36      	ldr	r5, [pc, #216]	; (8000db4 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ce0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ce4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ce8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000cec:	9703      	str	r7, [sp, #12]
 8000cee:	9f03      	ldr	r7, [sp, #12]
 8000cf0:	f023 0703 	bic.w	r7, r3, #3
 8000cf4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000cf8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cfc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d00:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d08:	f04f 0e0f 	mov.w	lr, #15
 8000d0c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d10:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d12:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d16:	d03f      	beq.n	8000d98 <HAL_GPIO_Init+0x18c>
 8000d18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d1c:	42a8      	cmp	r0, r5
 8000d1e:	d03d      	beq.n	8000d9c <HAL_GPIO_Init+0x190>
 8000d20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d24:	42a8      	cmp	r0, r5
 8000d26:	d03b      	beq.n	8000da0 <HAL_GPIO_Init+0x194>
 8000d28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	d039      	beq.n	8000da4 <HAL_GPIO_Init+0x198>
 8000d30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d34:	42a8      	cmp	r0, r5
 8000d36:	d037      	beq.n	8000da8 <HAL_GPIO_Init+0x19c>
 8000d38:	4548      	cmp	r0, r9
 8000d3a:	d037      	beq.n	8000dac <HAL_GPIO_Init+0x1a0>
 8000d3c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000d40:	42a8      	cmp	r0, r5
 8000d42:	bf14      	ite	ne
 8000d44:	2507      	movne	r5, #7
 8000d46:	2506      	moveq	r5, #6
 8000d48:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d4c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d50:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000d52:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d54:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d56:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d5a:	bf0c      	ite	eq
 8000d5c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d5e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000d60:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000d62:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d64:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d68:	bf0c      	ite	eq
 8000d6a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d6c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000d6e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d70:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d72:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d76:	bf0c      	ite	eq
 8000d78:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d7a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000d7c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000d7e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d80:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000d82:	bf54      	ite	pl
 8000d84:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d86:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d88:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	2b10      	cmp	r3, #16
 8000d8e:	f47f af48 	bne.w	8000c22 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000d92:	b005      	add	sp, #20
 8000d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d98:	465d      	mov	r5, fp
 8000d9a:	e7d5      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000d9c:	2501      	movs	r5, #1
 8000d9e:	e7d3      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000da0:	2502      	movs	r5, #2
 8000da2:	e7d1      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000da4:	2503      	movs	r5, #3
 8000da6:	e7cf      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000da8:	2504      	movs	r5, #4
 8000daa:	e7cd      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000dac:	2505      	movs	r5, #5
 8000dae:	e7cb      	b.n	8000d48 <HAL_GPIO_Init+0x13c>
 8000db0:	40013c00 	.word	0x40013c00
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40021400 	.word	0x40021400

08000dc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dc0:	6903      	ldr	r3, [r0, #16]
 8000dc2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000dc4:	bf14      	ite	ne
 8000dc6:	2001      	movne	r0, #1
 8000dc8:	2000      	moveq	r0, #0
 8000dca:	4770      	bx	lr

08000dcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dcc:	b10a      	cbz	r2, 8000dd2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dce:	6181      	str	r1, [r0, #24]
 8000dd0:	4770      	bx	lr
 8000dd2:	0409      	lsls	r1, r1, #16
 8000dd4:	e7fb      	b.n	8000dce <HAL_GPIO_WritePin+0x2>

08000dd6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000dd6:	6943      	ldr	r3, [r0, #20]
 8000dd8:	4059      	eors	r1, r3
 8000dda:	6141      	str	r1, [r0, #20]
 8000ddc:	4770      	bx	lr
	...

08000de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000de4:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000de6:	4604      	mov	r4, r0
 8000de8:	b910      	cbnz	r0, 8000df0 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000dea:	2001      	movs	r0, #1
 8000dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000df0:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <HAL_RCC_ClockConfig+0x124>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	f002 020f 	and.w	r2, r2, #15
 8000df8:	428a      	cmp	r2, r1
 8000dfa:	d328      	bcc.n	8000e4e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dfc:	6821      	ldr	r1, [r4, #0]
 8000dfe:	078f      	lsls	r7, r1, #30
 8000e00:	d42d      	bmi.n	8000e5e <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e02:	07c8      	lsls	r0, r1, #31
 8000e04:	d440      	bmi.n	8000e88 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <HAL_RCC_ClockConfig+0x124>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	f002 020f 	and.w	r2, r2, #15
 8000e0e:	4295      	cmp	r5, r2
 8000e10:	d366      	bcc.n	8000ee0 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	0751      	lsls	r1, r2, #29
 8000e16:	d46c      	bmi.n	8000ef2 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e18:	0713      	lsls	r3, r2, #28
 8000e1a:	d507      	bpl.n	8000e2c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e1c:	4a3a      	ldr	r2, [pc, #232]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000e1e:	6921      	ldr	r1, [r4, #16]
 8000e20:	6893      	ldr	r3, [r2, #8]
 8000e22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e2a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e2c:	f000 f8b0 	bl	8000f90 <HAL_RCC_GetSysClockFreq>
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000e32:	4a36      	ldr	r2, [pc, #216]	; (8000f0c <HAL_RCC_ClockConfig+0x12c>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e3a:	5cd3      	ldrb	r3, [r2, r3]
 8000e3c:	40d8      	lsrs	r0, r3
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <HAL_RCC_ClockConfig+0x130>)
 8000e40:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f003 f898 	bl	8003f78 <HAL_InitTick>

  return HAL_OK;
 8000e48:	2000      	movs	r0, #0
 8000e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d1c6      	bne.n	8000dea <HAL_RCC_ClockConfig+0xa>
 8000e5c:	e7ce      	b.n	8000dfc <HAL_RCC_ClockConfig+0x1c>
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e60:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e64:	bf1e      	ittt	ne
 8000e66:	689a      	ldrne	r2, [r3, #8]
 8000e68:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000e6c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e6e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e70:	bf42      	ittt	mi
 8000e72:	689a      	ldrmi	r2, [r3, #8]
 8000e74:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000e78:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	68a0      	ldr	r0, [r4, #8]
 8000e7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e82:	4302      	orrs	r2, r0
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	e7bc      	b.n	8000e02 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e88:	6862      	ldr	r2, [r4, #4]
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000e8c:	2a01      	cmp	r2, #1
 8000e8e:	d11d      	bne.n	8000ecc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e96:	d0a8      	beq.n	8000dea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e98:	4e1b      	ldr	r6, [pc, #108]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000e9a:	68b3      	ldr	r3, [r6, #8]
 8000e9c:	f023 0303 	bic.w	r3, r3, #3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ea4:	f7ff fbba 	bl	800061c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ea8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000eac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eae:	68b3      	ldr	r3, [r6, #8]
 8000eb0:	6862      	ldr	r2, [r4, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000eba:	d0a4      	beq.n	8000e06 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ebc:	f7ff fbae 	bl	800061c <HAL_GetTick>
 8000ec0:	1bc0      	subs	r0, r0, r7
 8000ec2:	4540      	cmp	r0, r8
 8000ec4:	d9f3      	bls.n	8000eae <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000ec6:	2003      	movs	r0, #3
}
 8000ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ecc:	1e91      	subs	r1, r2, #2
 8000ece:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ed2:	d802      	bhi.n	8000eda <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ed8:	e7dd      	b.n	8000e96 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eda:	f013 0f02 	tst.w	r3, #2
 8000ede:	e7da      	b.n	8000e96 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ee0:	b2ea      	uxtb	r2, r5
 8000ee2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	429d      	cmp	r5, r3
 8000eec:	f47f af7d 	bne.w	8000dea <HAL_RCC_ClockConfig+0xa>
 8000ef0:	e78f      	b.n	8000e12 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ef2:	4905      	ldr	r1, [pc, #20]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000ef4:	68e0      	ldr	r0, [r4, #12]
 8000ef6:	688b      	ldr	r3, [r1, #8]
 8000ef8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000efc:	4303      	orrs	r3, r0
 8000efe:	608b      	str	r3, [r1, #8]
 8000f00:	e78a      	b.n	8000e18 <HAL_RCC_ClockConfig+0x38>
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	08004bcc 	.word	0x08004bcc
 8000f10:	20000008 	.word	0x20000008

08000f14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f22:	6810      	ldr	r0, [r2, #0]
}
 8000f24:	40d8      	lsrs	r0, r3
 8000f26:	4770      	bx	lr
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	08004bdc 	.word	0x08004bdc
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f3e:	5cd3      	ldrb	r3, [r2, r3]
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f42:	6810      	ldr	r0, [r2, #0]
}
 8000f44:	40d8      	lsrs	r0, r3
 8000f46:	4770      	bx	lr
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	08004bdc 	.word	0x08004bdc
 8000f50:	20000008 	.word	0x20000008

08000f54 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f54:	230f      	movs	r3, #15
 8000f56:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_RCC_GetClockConfig+0x34>)
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	f002 0203 	and.w	r2, r2, #3
 8000f60:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000f68:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000f70:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f7a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_RCC_GetClockConfig+0x38>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	600b      	str	r3, [r1, #0]
 8000f86:	4770      	bx	lr
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f90:	4920      	ldr	r1, [pc, #128]	; (8001014 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000f92:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f94:	688b      	ldr	r3, [r1, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d007      	beq.n	8000fae <HAL_RCC_GetSysClockFreq+0x1e>
 8000f9e:	2b0c      	cmp	r3, #12
 8000fa0:	d020      	beq.n	8000fe4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fa2:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <HAL_RCC_GetSysClockFreq+0x88>)
 8000fa4:	481d      	ldr	r0, [pc, #116]	; (800101c <HAL_RCC_GetSysClockFreq+0x8c>)
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	4610      	movne	r0, r2
 8000fac:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fae:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fb0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fb2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fb4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fb8:	bf14      	ite	ne
 8000fba:	4818      	ldrne	r0, [pc, #96]	; (800101c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fbc:	4816      	ldreq	r0, [pc, #88]	; (8001018 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fbe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fc2:	bf18      	it	ne
 8000fc4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fc6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fca:	fba1 0100 	umull	r0, r1, r1, r0
 8000fce:	f7ff f977 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_RCC_GetSysClockFreq+0x84>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fda:	3301      	adds	r3, #1
 8000fdc:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000fde:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fe2:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fe4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fe6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fe8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fee:	bf14      	ite	ne
 8000ff0:	480a      	ldrne	r0, [pc, #40]	; (800101c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff2:	4809      	ldreq	r0, [pc, #36]	; (8001018 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ff8:	bf18      	it	ne
 8000ffa:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ffc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001000:	fba1 0100 	umull	r0, r1, r1, r0
 8001004:	f7ff f95c 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <HAL_RCC_GetSysClockFreq+0x84>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001010:	e7e5      	b.n	8000fde <HAL_RCC_GetSysClockFreq+0x4e>
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	00f42400 	.word	0x00f42400
 800101c:	007a1200 	.word	0x007a1200

08001020 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001020:	6803      	ldr	r3, [r0, #0]
{
 8001022:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	07df      	lsls	r7, r3, #31
{
 8001028:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	d410      	bmi.n	800104e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	079e      	lsls	r6, r3, #30
 8001030:	d467      	bmi.n	8001102 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	071a      	lsls	r2, r3, #28
 8001036:	f100 80b2 	bmi.w	800119e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	075b      	lsls	r3, r3, #29
 800103e:	f100 80d0 	bmi.w	80011e2 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001042:	69a2      	ldr	r2, [r4, #24]
 8001044:	2a00      	cmp	r2, #0
 8001046:	f040 8139 	bne.w	80012bc <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800104a:	2000      	movs	r0, #0
 800104c:	e01e      	b.n	800108c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800104e:	4b97      	ldr	r3, [pc, #604]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	f002 020c 	and.w	r2, r2, #12
 8001056:	2a04      	cmp	r2, #4
 8001058:	d010      	beq.n	800107c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001060:	2a08      	cmp	r2, #8
 8001062:	d102      	bne.n	800106a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	025d      	lsls	r5, r3, #9
 8001068:	d408      	bmi.n	800107c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106a:	4b90      	ldr	r3, [pc, #576]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001072:	2a0c      	cmp	r2, #12
 8001074:	d10d      	bne.n	8001092 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	0250      	lsls	r0, r2, #9
 800107a:	d50a      	bpl.n	8001092 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0399      	lsls	r1, r3, #14
 8001082:	d5d3      	bpl.n	800102c <HAL_RCC_OscConfig+0xc>
 8001084:	6863      	ldr	r3, [r4, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1d0      	bne.n	800102c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
}
 800108c:	b002      	add	sp, #8
 800108e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001092:	6862      	ldr	r2, [r4, #4]
 8001094:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001098:	d111      	bne.n	80010be <HAL_RCC_OscConfig+0x9e>
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010a2:	f7ff fabb 	bl	800061c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	4d81      	ldr	r5, [pc, #516]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80010a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	682b      	ldr	r3, [r5, #0]
 80010ac:	039a      	lsls	r2, r3, #14
 80010ae:	d4bd      	bmi.n	800102c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fab4 	bl	800061c <HAL_GetTick>
 80010b4:	1b80      	subs	r0, r0, r6
 80010b6:	2864      	cmp	r0, #100	; 0x64
 80010b8:	d9f7      	bls.n	80010aa <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80010ba:	2003      	movs	r0, #3
 80010bc:	e7e6      	b.n	800108c <HAL_RCC_OscConfig+0x6c>
 80010be:	4d7b      	ldr	r5, [pc, #492]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	d107      	bne.n	80010d8 <HAL_RCC_OscConfig+0xb8>
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	602b      	str	r3, [r5, #0]
 80010ce:	682b      	ldr	r3, [r5, #0]
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	602b      	str	r3, [r5, #0]
 80010d6:	e7e4      	b.n	80010a2 <HAL_RCC_OscConfig+0x82>
 80010d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010dc:	602b      	str	r3, [r5, #0]
 80010de:	682b      	ldr	r3, [r5, #0]
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e6:	2a00      	cmp	r2, #0
 80010e8:	d1db      	bne.n	80010a2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80010ea:	f7ff fa97 	bl	800061c <HAL_GetTick>
 80010ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	039b      	lsls	r3, r3, #14
 80010f4:	d59a      	bpl.n	800102c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f6:	f7ff fa91 	bl	800061c <HAL_GetTick>
 80010fa:	1b80      	subs	r0, r0, r6
 80010fc:	2864      	cmp	r0, #100	; 0x64
 80010fe:	d9f7      	bls.n	80010f0 <HAL_RCC_OscConfig+0xd0>
 8001100:	e7db      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001102:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	f012 0f0c 	tst.w	r2, #12
 800110a:	d010      	beq.n	800112e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001112:	2a08      	cmp	r2, #8
 8001114:	d102      	bne.n	800111c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	025f      	lsls	r7, r3, #9
 800111a:	d508      	bpl.n	800112e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111c:	4a63      	ldr	r2, [pc, #396]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 800111e:	6893      	ldr	r3, [r2, #8]
 8001120:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001124:	2b0c      	cmp	r3, #12
 8001126:	d111      	bne.n	800114c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001128:	6853      	ldr	r3, [r2, #4]
 800112a:	025e      	lsls	r6, r3, #9
 800112c:	d40e      	bmi.n	800114c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	0795      	lsls	r5, r2, #30
 8001134:	d502      	bpl.n	800113c <HAL_RCC_OscConfig+0x11c>
 8001136:	68e2      	ldr	r2, [r4, #12]
 8001138:	2a01      	cmp	r2, #1
 800113a:	d1a6      	bne.n	800108a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	6921      	ldr	r1, [r4, #16]
 8001140:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001144:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001148:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	e772      	b.n	8001032 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800114c:	68e2      	ldr	r2, [r4, #12]
 800114e:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <HAL_RCC_OscConfig+0x290>)
 8001150:	b1b2      	cbz	r2, 8001180 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001156:	f7ff fa61 	bl	800061c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	4d54      	ldr	r5, [pc, #336]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800115c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	0798      	lsls	r0, r3, #30
 8001162:	d507      	bpl.n	8001174 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	6922      	ldr	r2, [r4, #16]
 8001168:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800116c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001170:	602b      	str	r3, [r5, #0]
 8001172:	e75e      	b.n	8001032 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fa52 	bl	800061c <HAL_GetTick>
 8001178:	1b80      	subs	r0, r0, r6
 800117a:	2802      	cmp	r0, #2
 800117c:	d9ef      	bls.n	800115e <HAL_RCC_OscConfig+0x13e>
 800117e:	e79c      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001180:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001182:	f7ff fa4b 	bl	800061c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4d49      	ldr	r5, [pc, #292]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001188:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	0799      	lsls	r1, r3, #30
 800118e:	f57f af50 	bpl.w	8001032 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fa43 	bl	800061c <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	2802      	cmp	r0, #2
 800119a:	d9f6      	bls.n	800118a <HAL_RCC_OscConfig+0x16a>
 800119c:	e78d      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800119e:	6962      	ldr	r2, [r4, #20]
 80011a0:	4b44      	ldr	r3, [pc, #272]	; (80012b4 <HAL_RCC_OscConfig+0x294>)
 80011a2:	b17a      	cbz	r2, 80011c4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011a8:	f7ff fa38 	bl	800061c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ac:	4d3f      	ldr	r5, [pc, #252]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80011ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011b2:	079f      	lsls	r7, r3, #30
 80011b4:	f53f af41 	bmi.w	800103a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fa30 	bl	800061c <HAL_GetTick>
 80011bc:	1b80      	subs	r0, r0, r6
 80011be:	2802      	cmp	r0, #2
 80011c0:	d9f6      	bls.n	80011b0 <HAL_RCC_OscConfig+0x190>
 80011c2:	e77a      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80011c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011c6:	f7ff fa29 	bl	800061c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ca:	4d38      	ldr	r5, [pc, #224]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80011cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011d0:	0798      	lsls	r0, r3, #30
 80011d2:	f57f af32 	bpl.w	800103a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff fa21 	bl	800061c <HAL_GetTick>
 80011da:	1b80      	subs	r0, r0, r6
 80011dc:	2802      	cmp	r0, #2
 80011de:	d9f6      	bls.n	80011ce <HAL_RCC_OscConfig+0x1ae>
 80011e0:	e76b      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 80011e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80011ea:	d128      	bne.n	800123e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	9201      	str	r2, [sp, #4]
 80011ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001200:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	4d2d      	ldr	r5, [pc, #180]	; (80012b8 <HAL_RCC_OscConfig+0x298>)
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	05d9      	lsls	r1, r3, #23
 8001208:	d51b      	bpl.n	8001242 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120a:	68a3      	ldr	r3, [r4, #8]
 800120c:	4d27      	ldr	r5, [pc, #156]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 800120e:	2b01      	cmp	r3, #1
 8001210:	d127      	bne.n	8001262 <HAL_RCC_OscConfig+0x242>
 8001212:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800121a:	f7ff f9ff 	bl	800061c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121e:	4d23      	ldr	r5, [pc, #140]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001220:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001226:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001228:	079b      	lsls	r3, r3, #30
 800122a:	d539      	bpl.n	80012a0 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 800122c:	2e00      	cmp	r6, #0
 800122e:	f43f af08 	beq.w	8001042 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_RCC_OscConfig+0x28c>)
 8001234:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	e701      	b.n	8001042 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800123e:	2600      	movs	r6, #0
 8001240:	e7df      	b.n	8001202 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	682b      	ldr	r3, [r5, #0]
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800124a:	f7ff f9e7 	bl	800061c <HAL_GetTick>
 800124e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	05da      	lsls	r2, r3, #23
 8001254:	d4d9      	bmi.n	800120a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001256:	f7ff f9e1 	bl	800061c <HAL_GetTick>
 800125a:	1bc0      	subs	r0, r0, r7
 800125c:	2802      	cmp	r0, #2
 800125e:	d9f7      	bls.n	8001250 <HAL_RCC_OscConfig+0x230>
 8001260:	e72b      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001262:	2b05      	cmp	r3, #5
 8001264:	d104      	bne.n	8001270 <HAL_RCC_OscConfig+0x250>
 8001266:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	672b      	str	r3, [r5, #112]	; 0x70
 800126e:	e7d0      	b.n	8001212 <HAL_RCC_OscConfig+0x1f2>
 8001270:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	672a      	str	r2, [r5, #112]	; 0x70
 8001278:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800127a:	f022 0204 	bic.w	r2, r2, #4
 800127e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1ca      	bne.n	800121a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001284:	f7ff f9ca 	bl	800061c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800128c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001290:	0798      	lsls	r0, r3, #30
 8001292:	d5cb      	bpl.n	800122c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff f9c2 	bl	800061c <HAL_GetTick>
 8001298:	1bc0      	subs	r0, r0, r7
 800129a:	4540      	cmp	r0, r8
 800129c:	d9f7      	bls.n	800128e <HAL_RCC_OscConfig+0x26e>
 800129e:	e70c      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a0:	f7ff f9bc 	bl	800061c <HAL_GetTick>
 80012a4:	1bc0      	subs	r0, r0, r7
 80012a6:	4540      	cmp	r0, r8
 80012a8:	d9bd      	bls.n	8001226 <HAL_RCC_OscConfig+0x206>
 80012aa:	e706      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	42470000 	.word	0x42470000
 80012b4:	42470e80 	.word	0x42470e80
 80012b8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012bc:	4d23      	ldr	r5, [pc, #140]	; (800134c <HAL_RCC_OscConfig+0x32c>)
 80012be:	68ab      	ldr	r3, [r5, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	f43f aee0 	beq.w	800108a <HAL_RCC_OscConfig+0x6a>
 80012ca:	4e21      	ldr	r6, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x330>)
 80012cc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ce:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80012d0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d2:	d12d      	bne.n	8001330 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 80012d4:	f7ff f9a2 	bl	800061c <HAL_GetTick>
 80012d8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012da:	682b      	ldr	r3, [r5, #0]
 80012dc:	0199      	lsls	r1, r3, #6
 80012de:	d421      	bmi.n	8001324 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e0:	6a22      	ldr	r2, [r4, #32]
 80012e2:	69e3      	ldr	r3, [r4, #28]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80012f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fa:	4c14      	ldr	r4, [pc, #80]	; (800134c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fc:	0852      	lsrs	r2, r2, #1
 80012fe:	3a01      	subs	r2, #1
 8001300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001304:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001306:	2301      	movs	r3, #1
 8001308:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800130a:	f7ff f987 	bl	800061c <HAL_GetTick>
 800130e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	019a      	lsls	r2, r3, #6
 8001314:	f53f ae99 	bmi.w	800104a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff f980 	bl	800061c <HAL_GetTick>
 800131c:	1b40      	subs	r0, r0, r5
 800131e:	2802      	cmp	r0, #2
 8001320:	d9f6      	bls.n	8001310 <HAL_RCC_OscConfig+0x2f0>
 8001322:	e6ca      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff f97a 	bl	800061c <HAL_GetTick>
 8001328:	1bc0      	subs	r0, r0, r7
 800132a:	2802      	cmp	r0, #2
 800132c:	d9d5      	bls.n	80012da <HAL_RCC_OscConfig+0x2ba>
 800132e:	e6c4      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001330:	f7ff f974 	bl	800061c <HAL_GetTick>
 8001334:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	f57f ae86 	bpl.w	800104a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133e:	f7ff f96d 	bl	800061c <HAL_GetTick>
 8001342:	1b00      	subs	r0, r0, r4
 8001344:	2802      	cmp	r0, #2
 8001346:	d9f6      	bls.n	8001336 <HAL_RCC_OscConfig+0x316>
 8001348:	e6b7      	b.n	80010ba <HAL_RCC_OscConfig+0x9a>
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	42470060 	.word	0x42470060

08001354 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001354:	6a03      	ldr	r3, [r0, #32]
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800135c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800135e:	6842      	ldr	r2, [r0, #4]
{
 8001360:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001362:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001364:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001366:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800136a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800136c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800136e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001372:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001374:	4c0c      	ldr	r4, [pc, #48]	; (80013a8 <TIM_OC1_SetConfig+0x54>)
 8001376:	42a0      	cmp	r0, r4
 8001378:	d009      	beq.n	800138e <TIM_OC1_SetConfig+0x3a>
 800137a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800137e:	42a0      	cmp	r0, r4
 8001380:	d005      	beq.n	800138e <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001382:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001384:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001386:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001388:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800138a:	6203      	str	r3, [r0, #32]
} 
 800138c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800138e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001390:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001392:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001396:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001398:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800139a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800139e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80013a0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80013a4:	4322      	orrs	r2, r4
 80013a6:	e7ec      	b.n	8001382 <TIM_OC1_SetConfig+0x2e>
 80013a8:	40010000 	.word	0x40010000

080013ac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013ac:	6a03      	ldr	r3, [r0, #32]
 80013ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013b4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80013b6:	6842      	ldr	r2, [r0, #4]
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013ba:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80013be:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013c2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013c4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80013c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013ca:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80013ce:	4c0e      	ldr	r4, [pc, #56]	; (8001408 <TIM_OC3_SetConfig+0x5c>)
 80013d0:	42a0      	cmp	r0, r4
 80013d2:	d009      	beq.n	80013e8 <TIM_OC3_SetConfig+0x3c>
 80013d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013d8:	42a0      	cmp	r0, r4
 80013da:	d005      	beq.n	80013e8 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013dc:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80013de:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80013e0:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80013e2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013e4:	6203      	str	r3, [r0, #32]
}
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013e8:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013ea:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80013ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013f0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80013f4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80013f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013fa:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80013fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001400:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001404:	e7ea      	b.n	80013dc <TIM_OC3_SetConfig+0x30>
 8001406:	bf00      	nop
 8001408:	40010000 	.word	0x40010000

0800140c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800140c:	6a03      	ldr	r3, [r0, #32]
 800140e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001412:	6203      	str	r3, [r0, #32]
{
 8001414:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001416:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001418:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800141a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800141c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800141e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001422:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001426:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001428:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800142c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001430:	4d09      	ldr	r5, [pc, #36]	; (8001458 <TIM_OC4_SetConfig+0x4c>)
 8001432:	42a8      	cmp	r0, r5
 8001434:	d009      	beq.n	800144a <TIM_OC4_SetConfig+0x3e>
 8001436:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800143a:	42a8      	cmp	r0, r5
 800143c:	d005      	beq.n	800144a <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800143e:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001440:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001442:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001444:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001446:	6204      	str	r4, [r0, #32]
}
 8001448:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800144a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800144c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001450:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001454:	e7f3      	b.n	800143e <TIM_OC4_SetConfig+0x32>
 8001456:	bf00      	nop
 8001458:	40010000 	.word	0x40010000

0800145c <HAL_TIM_Base_MspInit>:
 800145c:	4770      	bx	lr

0800145e <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 800145e:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001460:	2302      	movs	r3, #2
 8001462:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 800146e:	2301      	movs	r3, #1
 8001470:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8001474:	2000      	movs	r0, #0
 8001476:	4770      	bx	lr

08001478 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001478:	6803      	ldr	r3, [r0, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	f042 0201 	orr.w	r2, r2, #1
 8001480:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f042 0201 	orr.w	r2, r2, #1
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	2000      	movs	r0, #0
 800148c:	4770      	bx	lr

0800148e <HAL_TIM_OC_MspInit>:
 800148e:	4770      	bx	lr

08001490 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001490:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001494:	2b01      	cmp	r3, #1
{
 8001496:	b570      	push	{r4, r5, r6, lr}
 8001498:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800149c:	d01c      	beq.n	80014d8 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800149e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 80014a2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80014aa:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014ac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80014b0:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80014b4:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80014b6:	680a      	ldr	r2, [r1, #0]
 80014b8:	2a40      	cmp	r2, #64	; 0x40
 80014ba:	d079      	beq.n	80015b0 <HAL_TIM_ConfigClockSource+0x120>
 80014bc:	d819      	bhi.n	80014f2 <HAL_TIM_ConfigClockSource+0x62>
 80014be:	2a10      	cmp	r2, #16
 80014c0:	f000 8093 	beq.w	80015ea <HAL_TIM_ConfigClockSource+0x15a>
 80014c4:	d80a      	bhi.n	80014dc <HAL_TIM_ConfigClockSource+0x4c>
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	f000 8089 	beq.w	80015de <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80014d2:	2300      	movs	r3, #0
 80014d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80014d8:	4618      	mov	r0, r3
}
 80014da:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80014dc:	2a20      	cmp	r2, #32
 80014de:	f000 808a 	beq.w	80015f6 <HAL_TIM_ConfigClockSource+0x166>
 80014e2:	2a30      	cmp	r2, #48	; 0x30
 80014e4:	d1f2      	bne.n	80014cc <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80014e6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80014e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80014ec:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80014f0:	e036      	b.n	8001560 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80014f2:	2a70      	cmp	r2, #112	; 0x70
 80014f4:	d036      	beq.n	8001564 <HAL_TIM_ConfigClockSource+0xd4>
 80014f6:	d81b      	bhi.n	8001530 <HAL_TIM_ConfigClockSource+0xa0>
 80014f8:	2a50      	cmp	r2, #80	; 0x50
 80014fa:	d042      	beq.n	8001582 <HAL_TIM_ConfigClockSource+0xf2>
 80014fc:	2a60      	cmp	r2, #96	; 0x60
 80014fe:	d1e5      	bne.n	80014cc <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001500:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001502:	684d      	ldr	r5, [r1, #4]
 8001504:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001506:	f024 0410 	bic.w	r4, r4, #16
 800150a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800150c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800150e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001510:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001514:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001518:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800151c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001520:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001522:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001524:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001526:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800152a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800152e:	e017      	b.n	8001560 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001530:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001534:	d011      	beq.n	800155a <HAL_TIM_ConfigClockSource+0xca>
 8001536:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800153a:	d1c7      	bne.n	80014cc <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800153c:	688a      	ldr	r2, [r1, #8]
 800153e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001540:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001542:	68c9      	ldr	r1, [r1, #12]
 8001544:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001546:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800154a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800154e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001550:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001558:	e002      	b.n	8001560 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	e7b3      	b.n	80014cc <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001564:	688a      	ldr	r2, [r1, #8]
 8001566:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001568:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800156a:	68c9      	ldr	r1, [r1, #12]
 800156c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800156e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001572:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001576:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001578:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800157a:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800157c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001580:	e7ee      	b.n	8001560 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001582:	684c      	ldr	r4, [r1, #4]
 8001584:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001586:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001588:	6a1d      	ldr	r5, [r3, #32]
 800158a:	f025 0501 	bic.w	r5, r5, #1
 800158e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001590:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001592:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001596:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800159a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800159e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80015a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015a2:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80015a4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015aa:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80015ae:	e7d7      	b.n	8001560 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80015b0:	684c      	ldr	r4, [r1, #4]
 80015b2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80015b4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015b6:	6a1d      	ldr	r5, [r3, #32]
 80015b8:	f025 0501 	bic.w	r5, r5, #1
 80015bc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80015be:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015c0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80015c8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80015cc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80015ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015d0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80015d2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015d8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80015dc:	e7c0      	b.n	8001560 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015de:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015e4:	f042 0207 	orr.w	r2, r2, #7
 80015e8:	e7ba      	b.n	8001560 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015ea:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015f0:	f042 0217 	orr.w	r2, r2, #23
 80015f4:	e7b4      	b.n	8001560 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015f6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015fc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001600:	e7ae      	b.n	8001560 <HAL_TIM_ConfigClockSource+0xd0>

08001602 <HAL_TIM_OC_DelayElapsedCallback>:
 8001602:	4770      	bx	lr

08001604 <HAL_TIM_IC_CaptureCallback>:
 8001604:	4770      	bx	lr

08001606 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001606:	4770      	bx	lr

08001608 <HAL_TIM_TriggerCallback>:
 8001608:	4770      	bx	lr

0800160a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800160a:	6803      	ldr	r3, [r0, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	0791      	lsls	r1, r2, #30
{
 8001610:	b510      	push	{r4, lr}
 8001612:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001614:	d50e      	bpl.n	8001634 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	0792      	lsls	r2, r2, #30
 800161a:	d50b      	bpl.n	8001634 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800161c:	f06f 0202 	mvn.w	r2, #2
 8001620:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001622:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001624:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001626:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001628:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800162a:	d077      	beq.n	800171c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800162c:	f7ff ffea 	bl	8001604 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001630:	2300      	movs	r3, #0
 8001632:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	0750      	lsls	r0, r2, #29
 800163a:	d510      	bpl.n	800165e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	0751      	lsls	r1, r2, #29
 8001640:	d50d      	bpl.n	800165e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001642:	f06f 0204 	mvn.w	r2, #4
 8001646:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001648:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800164a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800164c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001650:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001652:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001654:	d068      	beq.n	8001728 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001656:	f7ff ffd5 	bl	8001604 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800165a:	2300      	movs	r3, #0
 800165c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	0712      	lsls	r2, r2, #28
 8001664:	d50f      	bpl.n	8001686 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	0710      	lsls	r0, r2, #28
 800166a:	d50c      	bpl.n	8001686 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800166c:	f06f 0208 	mvn.w	r2, #8
 8001670:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001672:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001674:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001676:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001678:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800167a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800167c:	d05a      	beq.n	8001734 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800167e:	f7ff ffc1 	bl	8001604 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	2300      	movs	r3, #0
 8001684:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	06d2      	lsls	r2, r2, #27
 800168c:	d510      	bpl.n	80016b0 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	06d0      	lsls	r0, r2, #27
 8001692:	d50d      	bpl.n	80016b0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001694:	f06f 0210 	mvn.w	r2, #16
 8001698:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800169a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800169c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800169e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016a2:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80016a4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016a6:	d04b      	beq.n	8001740 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80016a8:	f7ff ffac 	bl	8001604 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ac:	2300      	movs	r3, #0
 80016ae:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	07d1      	lsls	r1, r2, #31
 80016b6:	d508      	bpl.n	80016ca <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	07d2      	lsls	r2, r2, #31
 80016bc:	d505      	bpl.n	80016ca <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016be:	f06f 0201 	mvn.w	r2, #1
 80016c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016c4:	4620      	mov	r0, r4
 80016c6:	f002 fba3 	bl	8003e10 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	0610      	lsls	r0, r2, #24
 80016d0:	d508      	bpl.n	80016e4 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	0611      	lsls	r1, r2, #24
 80016d6:	d505      	bpl.n	80016e4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80016de:	4620      	mov	r0, r4
 80016e0:	f000 f94f 	bl	8001982 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	0652      	lsls	r2, r2, #25
 80016ea:	d508      	bpl.n	80016fe <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	0650      	lsls	r0, r2, #25
 80016f0:	d505      	bpl.n	80016fe <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff ff85 	bl	8001608 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	0691      	lsls	r1, r2, #26
 8001704:	d522      	bpl.n	800174c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	0692      	lsls	r2, r2, #26
 800170a:	d51f      	bpl.n	800174c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800170c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001710:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001712:	611a      	str	r2, [r3, #16]
}
 8001714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001718:	f000 b932 	b.w	8001980 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800171c:	f7ff ff71 	bl	8001602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff ff70 	bl	8001606 <HAL_TIM_PWM_PulseFinishedCallback>
 8001726:	e783      	b.n	8001630 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001728:	f7ff ff6b 	bl	8001602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff ff6a 	bl	8001606 <HAL_TIM_PWM_PulseFinishedCallback>
 8001732:	e792      	b.n	800165a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001734:	f7ff ff65 	bl	8001602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001738:	4620      	mov	r0, r4
 800173a:	f7ff ff64 	bl	8001606 <HAL_TIM_PWM_PulseFinishedCallback>
 800173e:	e7a0      	b.n	8001682 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001740:	f7ff ff5f 	bl	8001602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff ff5e 	bl	8001606 <HAL_TIM_PWM_PulseFinishedCallback>
 800174a:	e7af      	b.n	80016ac <HAL_TIM_IRQHandler+0xa2>
 800174c:	bd10      	pop	{r4, pc}
	...

08001750 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001750:	4a2e      	ldr	r2, [pc, #184]	; (800180c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001752:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001754:	4290      	cmp	r0, r2
 8001756:	d012      	beq.n	800177e <TIM_Base_SetConfig+0x2e>
 8001758:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800175c:	d00f      	beq.n	800177e <TIM_Base_SetConfig+0x2e>
 800175e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001762:	4290      	cmp	r0, r2
 8001764:	d00b      	beq.n	800177e <TIM_Base_SetConfig+0x2e>
 8001766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800176a:	4290      	cmp	r0, r2
 800176c:	d007      	beq.n	800177e <TIM_Base_SetConfig+0x2e>
 800176e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001772:	4290      	cmp	r0, r2
 8001774:	d003      	beq.n	800177e <TIM_Base_SetConfig+0x2e>
 8001776:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800177a:	4290      	cmp	r0, r2
 800177c:	d11d      	bne.n	80017ba <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800177e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001784:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001786:	4a21      	ldr	r2, [pc, #132]	; (800180c <TIM_Base_SetConfig+0xbc>)
 8001788:	4290      	cmp	r0, r2
 800178a:	d104      	bne.n	8001796 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800178c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800178e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001792:	4313      	orrs	r3, r2
 8001794:	e028      	b.n	80017e8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001796:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800179a:	d0f7      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 800179c:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <TIM_Base_SetConfig+0xc0>)
 800179e:	4290      	cmp	r0, r2
 80017a0:	d0f4      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 80017a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017a6:	4290      	cmp	r0, r2
 80017a8:	d0f0      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 80017aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ae:	4290      	cmp	r0, r2
 80017b0:	d0ec      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 80017b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017b6:	4290      	cmp	r0, r2
 80017b8:	d0e8      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <TIM_Base_SetConfig+0xc4>)
 80017bc:	4290      	cmp	r0, r2
 80017be:	d0e5      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 80017c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c4:	4290      	cmp	r0, r2
 80017c6:	d0e1      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 80017c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017cc:	4290      	cmp	r0, r2
 80017ce:	d0dd      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 80017d0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017d4:	4290      	cmp	r0, r2
 80017d6:	d0d9      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 80017d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017dc:	4290      	cmp	r0, r2
 80017de:	d0d5      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
 80017e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017e4:	4290      	cmp	r0, r2
 80017e6:	d0d1      	beq.n	800178c <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80017e8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ea:	688b      	ldr	r3, [r1, #8]
 80017ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017ee:	680b      	ldr	r3, [r1, #0]
 80017f0:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <TIM_Base_SetConfig+0xbc>)
 80017f4:	4298      	cmp	r0, r3
 80017f6:	d006      	beq.n	8001806 <TIM_Base_SetConfig+0xb6>
 80017f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017fc:	4298      	cmp	r0, r3
 80017fe:	d002      	beq.n	8001806 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001800:	2301      	movs	r3, #1
 8001802:	6143      	str	r3, [r0, #20]
}
 8001804:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001806:	690b      	ldr	r3, [r1, #16]
 8001808:	6303      	str	r3, [r0, #48]	; 0x30
 800180a:	e7f9      	b.n	8001800 <TIM_Base_SetConfig+0xb0>
 800180c:	40010000 	.word	0x40010000
 8001810:	40000400 	.word	0x40000400
 8001814:	40014000 	.word	0x40014000

08001818 <HAL_TIM_Base_Init>:
{ 
 8001818:	b510      	push	{r4, lr}
  if(htim == NULL)
 800181a:	4604      	mov	r4, r0
 800181c:	b1a0      	cbz	r0, 8001848 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800181e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001822:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001826:	b91b      	cbnz	r3, 8001830 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001828:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800182c:	f7ff fe16 	bl	800145c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001830:	2302      	movs	r3, #2
 8001832:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	1d21      	adds	r1, r4, #4
 800183a:	f7ff ff89 	bl	8001750 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800183e:	2301      	movs	r3, #1
 8001840:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001844:	2000      	movs	r0, #0
 8001846:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001848:	2001      	movs	r0, #1
}
 800184a:	bd10      	pop	{r4, pc}

0800184c <HAL_TIM_OC_Init>:
{
 800184c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800184e:	4604      	mov	r4, r0
 8001850:	b1a0      	cbz	r0, 800187c <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001852:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001856:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800185a:	b91b      	cbnz	r3, 8001864 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800185c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8001860:	f7ff fe15 	bl	800148e <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001864:	2302      	movs	r3, #2
 8001866:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800186a:	6820      	ldr	r0, [r4, #0]
 800186c:	1d21      	adds	r1, r4, #4
 800186e:	f7ff ff6f 	bl	8001750 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001872:	2301      	movs	r3, #1
 8001874:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001878:	2000      	movs	r0, #0
 800187a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800187c:	2001      	movs	r0, #1
}
 800187e:	bd10      	pop	{r4, pc}

08001880 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001880:	6a03      	ldr	r3, [r0, #32]
 8001882:	f023 0310 	bic.w	r3, r3, #16
 8001886:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001888:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800188a:	6842      	ldr	r2, [r0, #4]
{
 800188c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800188e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001890:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001892:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001896:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800189a:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800189c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80018a0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80018a4:	4c0d      	ldr	r4, [pc, #52]	; (80018dc <TIM_OC2_SetConfig+0x5c>)
 80018a6:	42a0      	cmp	r0, r4
 80018a8:	d009      	beq.n	80018be <TIM_OC2_SetConfig+0x3e>
 80018aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018ae:	42a0      	cmp	r0, r4
 80018b0:	d005      	beq.n	80018be <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80018b2:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80018b4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80018b6:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80018b8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80018ba:	6203      	str	r3, [r0, #32]
}
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80018be:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80018c0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80018c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80018c6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80018ca:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80018cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80018d0:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80018d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80018d6:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80018da:	e7ea      	b.n	80018b2 <TIM_OC2_SetConfig+0x32>
 80018dc:	40010000 	.word	0x40010000

080018e0 <HAL_TIM_OC_ConfigChannel>:
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 80018e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018e6:	2b01      	cmp	r3, #1
{
 80018e8:	4604      	mov	r4, r0
 80018ea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 80018ee:	d018      	beq.n	8001922 <HAL_TIM_OC_ConfigChannel+0x42>
 80018f0:	2301      	movs	r3, #1
 80018f2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80018f6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 80018fa:	461d      	mov	r5, r3
  switch (Channel)
 80018fc:	2a0c      	cmp	r2, #12
 80018fe:	d80b      	bhi.n	8001918 <HAL_TIM_OC_ConfigChannel+0x38>
 8001900:	e8df f002 	tbb	[pc, r2]
 8001904:	0a0a0a07 	.word	0x0a0a0a07
 8001908:	0a0a0a10 	.word	0x0a0a0a10
 800190c:	0a0a0a14 	.word	0x0a0a0a14
 8001910:	18          	.byte	0x18
 8001911:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001912:	6820      	ldr	r0, [r4, #0]
 8001914:	f7ff fd1e 	bl	8001354 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 8001918:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800191a:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 800191e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001922:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001924:	6820      	ldr	r0, [r4, #0]
 8001926:	f7ff ffab 	bl	8001880 <TIM_OC2_SetConfig>
    break;
 800192a:	e7f5      	b.n	8001918 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800192c:	6820      	ldr	r0, [r4, #0]
 800192e:	f7ff fd3d 	bl	80013ac <TIM_OC3_SetConfig>
    break;
 8001932:	e7f1      	b.n	8001918 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001934:	6820      	ldr	r0, [r4, #0]
 8001936:	f7ff fd69 	bl	800140c <TIM_OC4_SetConfig>
    break;
 800193a:	e7ed      	b.n	8001918 <HAL_TIM_OC_ConfigChannel+0x38>

0800193c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800193c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001940:	2b01      	cmp	r3, #1
{
 8001942:	b510      	push	{r4, lr}
 8001944:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001948:	d018      	beq.n	800197c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800194a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800194e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001950:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001952:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001954:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001956:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800195a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4322      	orrs	r2, r4
 8001960:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001968:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	430a      	orrs	r2, r1
 800196e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001970:	2301      	movs	r3, #1
 8001972:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001976:	2300      	movs	r3, #0
 8001978:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800197c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800197e:	bd10      	pop	{r4, pc}

08001980 <HAL_TIMEx_CommutationCallback>:
 8001980:	4770      	bx	lr

08001982 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001982:	4770      	bx	lr

08001984 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001984:	6803      	ldr	r3, [r0, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800198c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001996:	2320      	movs	r3, #32
 8001998:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800199c:	4770      	bx	lr
	...

080019a0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80019a4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019a6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80019a8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019aa:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80019ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019b0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80019b2:	6133      	str	r3, [r6, #16]
{
 80019b4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019b6:	6883      	ldr	r3, [r0, #8]
 80019b8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80019ba:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019bc:	4303      	orrs	r3, r0
 80019be:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019c0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019c4:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019c6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019ca:	430b      	orrs	r3, r1
 80019cc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80019ce:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80019d0:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80019d2:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80019d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80019d8:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019da:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80019de:	6173      	str	r3, [r6, #20]
 80019e0:	4b7a      	ldr	r3, [pc, #488]	; (8001bcc <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019e2:	d17c      	bne.n	8001ade <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80019e4:	429e      	cmp	r6, r3
 80019e6:	d003      	beq.n	80019f0 <UART_SetConfig+0x50>
 80019e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ec:	429e      	cmp	r6, r3
 80019ee:	d144      	bne.n	8001a7a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80019f0:	f7ff faa0 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 80019f4:	2519      	movs	r5, #25
 80019f6:	fb05 f300 	mul.w	r3, r5, r0
 80019fa:	6860      	ldr	r0, [r4, #4]
 80019fc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a00:	0040      	lsls	r0, r0, #1
 8001a02:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a06:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a0e:	f7ff fa91 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	4368      	muls	r0, r5
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a1c:	f7ff fa8a 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001a20:	6863      	ldr	r3, [r4, #4]
 8001a22:	4368      	muls	r0, r5
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a2e:	fb09 7313 	mls	r3, r9, r3, r7
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	3332      	adds	r3, #50	; 0x32
 8001a36:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001a40:	f7ff fa78 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001a44:	6862      	ldr	r2, [r4, #4]
 8001a46:	4368      	muls	r0, r5
 8001a48:	0052      	lsls	r2, r2, #1
 8001a4a:	fbb0 faf2 	udiv	sl, r0, r2
 8001a4e:	f7ff fa71 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a52:	6863      	ldr	r3, [r4, #4]
 8001a54:	4368      	muls	r0, r5
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a60:	fb09 a313 	mls	r3, r9, r3, sl
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	3332      	adds	r3, #50	; 0x32
 8001a68:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a72:	443b      	add	r3, r7
 8001a74:	60b3      	str	r3, [r6, #8]
 8001a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a7a:	f7ff fa4b 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001a7e:	2519      	movs	r5, #25
 8001a80:	fb05 f300 	mul.w	r3, r5, r0
 8001a84:	6860      	ldr	r0, [r4, #4]
 8001a86:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a8a:	0040      	lsls	r0, r0, #1
 8001a8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a90:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a98:	f7ff fa3c 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	6863      	ldr	r3, [r4, #4]
 8001a9e:	4368      	muls	r0, r5
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fbb0 f7f3 	udiv	r7, r0, r3
 8001aa6:	f7ff fa35 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001aaa:	6863      	ldr	r3, [r4, #4]
 8001aac:	4368      	muls	r0, r5
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ab8:	fb09 7313 	mls	r3, r9, r3, r7
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	3332      	adds	r3, #50	; 0x32
 8001ac0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001aca:	f7ff fa23 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001ace:	6862      	ldr	r2, [r4, #4]
 8001ad0:	4368      	muls	r0, r5
 8001ad2:	0052      	lsls	r2, r2, #1
 8001ad4:	fbb0 faf2 	udiv	sl, r0, r2
 8001ad8:	f7ff fa1c 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001adc:	e7b9      	b.n	8001a52 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ade:	429e      	cmp	r6, r3
 8001ae0:	d002      	beq.n	8001ae8 <UART_SetConfig+0x148>
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <UART_SetConfig+0x230>)
 8001ae4:	429e      	cmp	r6, r3
 8001ae6:	d140      	bne.n	8001b6a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ae8:	f7ff fa24 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001aec:	6867      	ldr	r7, [r4, #4]
 8001aee:	2519      	movs	r5, #25
 8001af0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001af4:	fb05 f300 	mul.w	r3, r5, r0
 8001af8:	00bf      	lsls	r7, r7, #2
 8001afa:	fbb3 f3f7 	udiv	r3, r3, r7
 8001afe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b02:	011f      	lsls	r7, r3, #4
 8001b04:	f7ff fa16 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001b08:	6863      	ldr	r3, [r4, #4]
 8001b0a:	4368      	muls	r0, r5
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b12:	f7ff fa0f 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001b16:	6863      	ldr	r3, [r4, #4]
 8001b18:	4368      	muls	r0, r5
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b20:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b24:	fb09 8313 	mls	r3, r9, r3, r8
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	3332      	adds	r3, #50	; 0x32
 8001b2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b30:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001b34:	f7ff f9fe 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
 8001b38:	6862      	ldr	r2, [r4, #4]
 8001b3a:	4368      	muls	r0, r5
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	fbb0 faf2 	udiv	sl, r0, r2
 8001b42:	f7ff f9f7 	bl	8000f34 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b46:	6863      	ldr	r3, [r4, #4]
 8001b48:	4368      	muls	r0, r5
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b50:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b54:	fb09 a313 	mls	r3, r9, r3, sl
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	3332      	adds	r3, #50	; 0x32
 8001b5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	ea43 0308 	orr.w	r3, r3, r8
 8001b68:	e783      	b.n	8001a72 <UART_SetConfig+0xd2>
 8001b6a:	f7ff f9d3 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001b6e:	6867      	ldr	r7, [r4, #4]
 8001b70:	2519      	movs	r5, #25
 8001b72:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b76:	fb05 f300 	mul.w	r3, r5, r0
 8001b7a:	00bf      	lsls	r7, r7, #2
 8001b7c:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b80:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b84:	011f      	lsls	r7, r3, #4
 8001b86:	f7ff f9c5 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001b8a:	6863      	ldr	r3, [r4, #4]
 8001b8c:	4368      	muls	r0, r5
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b94:	f7ff f9be 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001b98:	6863      	ldr	r3, [r4, #4]
 8001b9a:	4368      	muls	r0, r5
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ba6:	fb09 8313 	mls	r3, r9, r3, r8
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	3332      	adds	r3, #50	; 0x32
 8001bae:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bb2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001bb6:	f7ff f9ad 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001bba:	6862      	ldr	r2, [r4, #4]
 8001bbc:	4368      	muls	r0, r5
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	fbb0 faf2 	udiv	sl, r0, r2
 8001bc4:	f7ff f9a6 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
 8001bc8:	e7bd      	b.n	8001b46 <UART_SetConfig+0x1a6>
 8001bca:	bf00      	nop
 8001bcc:	40011000 	.word	0x40011000
 8001bd0:	40011400 	.word	0x40011400

08001bd4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	460e      	mov	r6, r1
 8001bda:	4617      	mov	r7, r2
 8001bdc:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001bde:	6821      	ldr	r1, [r4, #0]
 8001be0:	680b      	ldr	r3, [r1, #0]
 8001be2:	ea36 0303 	bics.w	r3, r6, r3
 8001be6:	d101      	bne.n	8001bec <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001be8:	2000      	movs	r0, #0
}
 8001bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001bec:	1c6b      	adds	r3, r5, #1
 8001bee:	d0f7      	beq.n	8001be0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001bf0:	b995      	cbnz	r5, 8001c18 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bfa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c04:	2320      	movs	r3, #32
 8001c06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c0a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001c14:	2003      	movs	r0, #3
 8001c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c18:	f7fe fd00 	bl	800061c <HAL_GetTick>
 8001c1c:	1bc0      	subs	r0, r0, r7
 8001c1e:	4285      	cmp	r5, r0
 8001c20:	d2dd      	bcs.n	8001bde <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001c22:	e7e6      	b.n	8001bf2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001c24 <HAL_UART_Init>:
{
 8001c24:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001c26:	4604      	mov	r4, r0
 8001c28:	b340      	cbz	r0, 8001c7c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c2a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c32:	b91b      	cbnz	r3, 8001c3c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c34:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001c38:	f002 f934 	bl	8003ea4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001c3c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c3e:	2324      	movs	r3, #36	; 0x24
 8001c40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c44:	68d3      	ldr	r3, [r2, #12]
 8001c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c4a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7ff fea7 	bl	80019a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c62:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c6a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001c6e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c70:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001c72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001c76:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001c7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c7c:	2001      	movs	r0, #1
}
 8001c7e:	bd10      	pop	{r4, pc}

08001c80 <HAL_UART_Transmit>:
{
 8001c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c84:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001c86:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c8a:	2b20      	cmp	r3, #32
{
 8001c8c:	4604      	mov	r4, r0
 8001c8e:	460d      	mov	r5, r1
 8001c90:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001c92:	d14f      	bne.n	8001d34 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001c94:	2900      	cmp	r1, #0
 8001c96:	d04a      	beq.n	8001d2e <HAL_UART_Transmit+0xae>
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d048      	beq.n	8001d2e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001c9c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d047      	beq.n	8001d34 <HAL_UART_Transmit+0xb4>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cae:	2321      	movs	r3, #33	; 0x21
 8001cb0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001cb4:	f7fe fcb2 	bl	800061c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001cb8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001cbc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001cbe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001cc2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b96b      	cbnz	r3, 8001ce4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4632      	mov	r2, r6
 8001ccc:	2140      	movs	r1, #64	; 0x40
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff ff80 	bl	8001bd4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001cd4:	b9b0      	cbnz	r0, 8001d04 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001cdc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001ce4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cec:	68a3      	ldr	r3, [r4, #8]
 8001cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001cfa:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cfc:	d10e      	bne.n	8001d1c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cfe:	f7ff ff69 	bl	8001bd4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d02:	b110      	cbz	r0, 8001d0a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001d04:	2003      	movs	r0, #3
 8001d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d0a:	882b      	ldrh	r3, [r5, #0]
 8001d0c:	6822      	ldr	r2, [r4, #0]
 8001d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d12:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001d14:	6923      	ldr	r3, [r4, #16]
 8001d16:	b943      	cbnz	r3, 8001d2a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001d18:	3502      	adds	r5, #2
 8001d1a:	e7d2      	b.n	8001cc2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1c:	f7ff ff5a 	bl	8001bd4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d1ef      	bne.n	8001d04 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	782a      	ldrb	r2, [r5, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	3501      	adds	r5, #1
 8001d2c:	e7c9      	b.n	8001cc2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001d2e:	2001      	movs	r0, #1
 8001d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001d34:	2002      	movs	r0, #2
}
 8001d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d3a <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8001d3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d118      	bne.n	8001d74 <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL ) || (Size == 0)) 
 8001d42:	b1a9      	cbz	r1, 8001d70 <HAL_UART_Transmit_IT+0x36>
 8001d44:	b1a2      	cbz	r2, 8001d70 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001d46:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d012      	beq.n	8001d74 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001d4e:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 8001d50:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001d52:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d54:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d56:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d58:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d5a:	2221      	movs	r2, #33	; 0x21
 8001d5c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d60:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8001d62:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d6a:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4770      	bx	lr
      return HAL_ERROR;
 8001d70:	2001      	movs	r0, #1
 8001d72:	4770      	bx	lr
    return HAL_BUSY;   
 8001d74:	2002      	movs	r0, #2
}
 8001d76:	4770      	bx	lr

08001d78 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d78:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d11c      	bne.n	8001dba <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 8001d80:	b1c9      	cbz	r1, 8001db6 <HAL_UART_Receive_IT+0x3e>
 8001d82:	b1c2      	cbz	r2, 8001db6 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8001d84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d016      	beq.n	8001dba <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 8001d8c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001d8e:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d90:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d92:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d94:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d96:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9a:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001d9c:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9e:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 8001da0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da4:	f041 0101 	orr.w	r1, r1, #1
 8001da8:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001daa:	68d1      	ldr	r1, [r2, #12]
 8001dac:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001db0:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001db2:	4618      	mov	r0, r3
 8001db4:	4770      	bx	lr
      return HAL_ERROR;
 8001db6:	2001      	movs	r0, #1
 8001db8:	4770      	bx	lr
    return HAL_BUSY; 
 8001dba:	2002      	movs	r0, #2
}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_UART_TxCpltCallback>:
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_UART_RxCpltCallback>:
 8001dc0:	4770      	bx	lr

08001dc2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001dc2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001dc6:	2b22      	cmp	r3, #34	; 0x22
{
 8001dc8:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001dca:	d132      	bne.n	8001e32 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dcc:	6883      	ldr	r3, [r0, #8]
 8001dce:	6901      	ldr	r1, [r0, #16]
 8001dd0:	6802      	ldr	r2, [r0, #0]
 8001dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001dd8:	d11f      	bne.n	8001e1a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001dda:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001ddc:	b9c9      	cbnz	r1, 8001e12 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001de2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001de6:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001de8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001dea:	3c01      	subs	r4, #1
 8001dec:	b2a4      	uxth	r4, r4
 8001dee:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001df0:	b96c      	cbnz	r4, 8001e0e <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001df2:	6803      	ldr	r3, [r0, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001dfa:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001e04:	2320      	movs	r3, #32
 8001e06:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001e0a:	f7ff ffd9 	bl	8001dc0 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001e0e:	2000      	movs	r0, #0
}
 8001e10:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f823 2b01 	strh.w	r2, [r3], #1
 8001e18:	e7e5      	b.n	8001de6 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e1a:	b921      	cbnz	r1, 8001e26 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	6852      	ldr	r2, [r2, #4]
 8001e20:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e7e0      	b.n	8001de8 <UART_Receive_IT+0x26>
 8001e26:	6852      	ldr	r2, [r2, #4]
 8001e28:	1c59      	adds	r1, r3, #1
 8001e2a:	6281      	str	r1, [r0, #40]	; 0x28
 8001e2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e30:	e7f7      	b.n	8001e22 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001e32:	2002      	movs	r0, #2
 8001e34:	bd10      	pop	{r4, pc}

08001e36 <HAL_UART_ErrorCallback>:
 8001e36:	4770      	bx	lr

08001e38 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e38:	6803      	ldr	r3, [r0, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e3c:	68d9      	ldr	r1, [r3, #12]
{
 8001e3e:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001e40:	0716      	lsls	r6, r2, #28
{
 8001e42:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e44:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001e46:	d107      	bne.n	8001e58 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e48:	0696      	lsls	r6, r2, #26
 8001e4a:	d55a      	bpl.n	8001f02 <HAL_UART_IRQHandler+0xca>
 8001e4c:	068d      	lsls	r5, r1, #26
 8001e4e:	d558      	bpl.n	8001f02 <HAL_UART_IRQHandler+0xca>
}
 8001e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001e54:	f7ff bfb5 	b.w	8001dc2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e58:	f015 0501 	ands.w	r5, r5, #1
 8001e5c:	d102      	bne.n	8001e64 <HAL_UART_IRQHandler+0x2c>
 8001e5e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001e62:	d04e      	beq.n	8001f02 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e64:	07d3      	lsls	r3, r2, #31
 8001e66:	d505      	bpl.n	8001e74 <HAL_UART_IRQHandler+0x3c>
 8001e68:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e6a:	bf42      	ittt	mi
 8001e6c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001e6e:	f043 0301 	orrmi.w	r3, r3, #1
 8001e72:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e74:	0750      	lsls	r0, r2, #29
 8001e76:	d504      	bpl.n	8001e82 <HAL_UART_IRQHandler+0x4a>
 8001e78:	b11d      	cbz	r5, 8001e82 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e82:	0793      	lsls	r3, r2, #30
 8001e84:	d504      	bpl.n	8001e90 <HAL_UART_IRQHandler+0x58>
 8001e86:	b11d      	cbz	r5, 8001e90 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e90:	0716      	lsls	r6, r2, #28
 8001e92:	d504      	bpl.n	8001e9e <HAL_UART_IRQHandler+0x66>
 8001e94:	b11d      	cbz	r5, 8001e9e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d066      	beq.n	8001f72 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ea4:	0695      	lsls	r5, r2, #26
 8001ea6:	d504      	bpl.n	8001eb2 <HAL_UART_IRQHandler+0x7a>
 8001ea8:	0688      	lsls	r0, r1, #26
 8001eaa:	d502      	bpl.n	8001eb2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7ff ff88 	bl	8001dc2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001eb8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001eba:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ebc:	d402      	bmi.n	8001ec4 <HAL_UART_IRQHandler+0x8c>
 8001ebe:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001ec2:	d01a      	beq.n	8001efa <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001ec4:	f7ff fd5e 	bl	8001984 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	0652      	lsls	r2, r2, #25
 8001ece:	d510      	bpl.n	8001ef2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ed0:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001ed2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ed8:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001eda:	b150      	cbz	r0, 8001ef2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_UART_IRQHandler+0x13c>)
 8001ede:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ee0:	f7fe fe82 	bl	8000be8 <HAL_DMA_Abort_IT>
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d044      	beq.n	8001f72 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ee8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001eee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ef0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7ff ff9f 	bl	8001e36 <HAL_UART_ErrorCallback>
 8001ef8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001efa:	f7ff ff9c 	bl	8001e36 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efe:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001f00:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f02:	0616      	lsls	r6, r2, #24
 8001f04:	d527      	bpl.n	8001f56 <HAL_UART_IRQHandler+0x11e>
 8001f06:	060d      	lsls	r5, r1, #24
 8001f08:	d525      	bpl.n	8001f56 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f0a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001f0e:	2a21      	cmp	r2, #33	; 0x21
 8001f10:	d12f      	bne.n	8001f72 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f12:	68a2      	ldr	r2, [r4, #8]
 8001f14:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f18:	6a22      	ldr	r2, [r4, #32]
 8001f1a:	d117      	bne.n	8001f4c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f1c:	8811      	ldrh	r1, [r2, #0]
 8001f1e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f22:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f24:	6921      	ldr	r1, [r4, #16]
 8001f26:	b979      	cbnz	r1, 8001f48 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001f28:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001f2a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001f2c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001f2e:	3a01      	subs	r2, #1
 8001f30:	b292      	uxth	r2, r2
 8001f32:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001f34:	b9ea      	cbnz	r2, 8001f72 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3c:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001f48:	3201      	adds	r2, #1
 8001f4a:	e7ee      	b.n	8001f2a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f4c:	1c51      	adds	r1, r2, #1
 8001f4e:	6221      	str	r1, [r4, #32]
 8001f50:	7812      	ldrb	r2, [r2, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	e7ea      	b.n	8001f2c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f56:	0650      	lsls	r0, r2, #25
 8001f58:	d50b      	bpl.n	8001f72 <HAL_UART_IRQHandler+0x13a>
 8001f5a:	064a      	lsls	r2, r1, #25
 8001f5c:	d509      	bpl.n	8001f72 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f64:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f66:	2320      	movs	r3, #32
 8001f68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7ff ff26 	bl	8001dbe <HAL_UART_TxCpltCallback>
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
 8001f74:	08001f79 	.word	0x08001f79

08001f78 <UART_DMAAbortOnError>:
{
 8001f78:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001f80:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001f82:	f7ff ff58 	bl	8001e36 <HAL_UART_ErrorCallback>
 8001f86:	bd08      	pop	{r3, pc}

08001f88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f88:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001f8a:	f000 feb1 	bl	8002cf0 <vTaskStartScheduler>
  
  return osOK;
}
 8001f8e:	2000      	movs	r0, #0
 8001f90:	bd08      	pop	{r3, pc}

08001f92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f92:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f94:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001f98:	8a02      	ldrh	r2, [r0, #16]
{
 8001f9a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f9c:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001fa0:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001fa2:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001fa4:	bf14      	ite	ne
 8001fa6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fa8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001faa:	a803      	add	r0, sp, #12
 8001fac:	9001      	str	r0, [sp, #4]
 8001fae:	9400      	str	r4, [sp, #0]
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f000 fd8d 	bl	8002ad0 <xTaskCreate>
 8001fb6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001fb8:	bf0c      	ite	eq
 8001fba:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001fbc:	2000      	movne	r0, #0
}
 8001fbe:	b005      	add	sp, #20
 8001fc0:	bd30      	pop	{r4, r5, pc}

08001fc2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001fc2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	bf08      	it	eq
 8001fc8:	2001      	moveq	r0, #1
 8001fca:	f000 ffe7 	bl	8002f9c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001fce:	2000      	movs	r0, #0
 8001fd0:	bd08      	pop	{r3, pc}

08001fd2 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f000 bc32 	b.w	800283c <xQueueCreateMutex>

08001fd8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001fd8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fda:	f001 fa69 	bl	80034b0 <xTaskGetSchedulerState>
 8001fde:	2801      	cmp	r0, #1
 8001fe0:	d003      	beq.n	8001fea <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001fe6:	f000 b905 	b.w	80021f4 <xPortSysTickHandler>
 8001fea:	bd08      	pop	{r3, pc}

08001fec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fec:	f100 0308 	add.w	r3, r0, #8
 8001ff0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ff2:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ffa:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ffc:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ffe:	6003      	str	r3, [r0, #0]
 8002000:	4770      	bx	lr

08002002 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002002:	2300      	movs	r3, #0
 8002004:	6103      	str	r3, [r0, #16]
 8002006:	4770      	bx	lr

08002008 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002008:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800200a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002014:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002016:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002018:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800201a:	3301      	adds	r3, #1
 800201c:	6003      	str	r3, [r0, #0]
 800201e:	4770      	bx	lr

08002020 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002020:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002022:	1c53      	adds	r3, r2, #1
{
 8002024:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002026:	d10a      	bne.n	800203e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002028:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800202e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002030:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002032:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002034:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002036:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002038:	3301      	adds	r3, #1
 800203a:	6003      	str	r3, [r0, #0]
 800203c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800203e:	f100 0308 	add.w	r3, r0, #8
 8002042:	685c      	ldr	r4, [r3, #4]
 8002044:	6825      	ldr	r5, [r4, #0]
 8002046:	42aa      	cmp	r2, r5
 8002048:	d3ef      	bcc.n	800202a <vListInsert+0xa>
 800204a:	4623      	mov	r3, r4
 800204c:	e7f9      	b.n	8002042 <vListInsert+0x22>

0800204e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800204e:	6841      	ldr	r1, [r0, #4]
 8002050:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002052:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002054:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002056:	6882      	ldr	r2, [r0, #8]
 8002058:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800205e:	bf08      	it	eq
 8002060:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002062:	2200      	movs	r2, #0
 8002064:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	3801      	subs	r0, #1
 800206a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800206c:	4770      	bx	lr
	...

08002070 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <prvTaskExitError+0x2c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	d008      	beq.n	800208a <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	e7fe      	b.n	8002088 <prvTaskExitError+0x18>
 800208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	f3bf 8f6f 	isb	sy
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	e7fe      	b.n	800209a <prvTaskExitError+0x2a>
 800209c:	20000004 	.word	0x20000004

080020a0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <prvPortStartFirstTask+0x1c>)
 80020a2:	6800      	ldr	r0, [r0, #0]
 80020a4:	6800      	ldr	r0, [r0, #0]
 80020a6:	f380 8808 	msr	MSP, r0
 80020aa:	b662      	cpsie	i
 80020ac:	b661      	cpsie	f
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	f3bf 8f6f 	isb	sy
 80020b6:	df00      	svc	0
 80020b8:	bf00      	nop
 80020ba:	0000      	.short	0x0000
 80020bc:	e000ed08 	.word	0xe000ed08

080020c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80020c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80020d0 <vPortEnableVFP+0x10>
 80020c4:	6801      	ldr	r1, [r0, #0]
 80020c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80020ca:	6001      	str	r1, [r0, #0]
 80020cc:	4770      	bx	lr
 80020ce:	0000      	.short	0x0000
 80020d0:	e000ed88 	.word	0xe000ed88

080020d4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80020d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <pxPortInitialiseStack+0x28>)
 80020de:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80020e2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80020e6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80020ea:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80020ee:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80020f2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80020f6:	3844      	subs	r0, #68	; 0x44
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	08002071 	.word	0x08002071

08002100 <SVC_Handler>:
	__asm volatile (
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <pxCurrentTCBConst2>)
 8002102:	6819      	ldr	r1, [r3, #0]
 8002104:	6808      	ldr	r0, [r1, #0]
 8002106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800210a:	f380 8809 	msr	PSP, r0
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	f380 8811 	msr	BASEPRI, r0
 800211a:	4770      	bx	lr
 800211c:	f3af 8000 	nop.w

08002120 <pxCurrentTCBConst2>:
 8002120:	20003cac 	.word	0x20003cac

08002124 <vPortEnterCritical>:
 8002124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <vPortEnterCritical+0x3c>)
 8002136:	6813      	ldr	r3, [r2, #0]
 8002138:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800213a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800213c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800213e:	d10d      	bne.n	800215c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <vPortEnterCritical+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002148:	d008      	beq.n	800215c <vPortEnterCritical+0x38>
 800214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214e:	f383 8811 	msr	BASEPRI, r3
 8002152:	f3bf 8f6f 	isb	sy
 8002156:	f3bf 8f4f 	dsb	sy
 800215a:	e7fe      	b.n	800215a <vPortEnterCritical+0x36>
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000004 	.word	0x20000004
 8002164:	e000ed04 	.word	0xe000ed04

08002168 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002168:	4a08      	ldr	r2, [pc, #32]	; (800218c <vPortExitCritical+0x24>)
 800216a:	6813      	ldr	r3, [r2, #0]
 800216c:	b943      	cbnz	r3, 8002180 <vPortExitCritical+0x18>
 800216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002172:	f383 8811 	msr	BASEPRI, r3
 8002176:	f3bf 8f6f 	isb	sy
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	e7fe      	b.n	800217e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002180:	3b01      	subs	r3, #1
 8002182:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002184:	b90b      	cbnz	r3, 800218a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	4770      	bx	lr
 800218c:	20000004 	.word	0x20000004

08002190 <PendSV_Handler>:
	__asm volatile
 8002190:	f3ef 8009 	mrs	r0, PSP
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <pxCurrentTCBConst>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f01e 0f10 	tst.w	lr, #16
 80021a0:	bf08      	it	eq
 80021a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80021a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021aa:	6010      	str	r0, [r2, #0]
 80021ac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80021b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80021b4:	f380 8811 	msr	BASEPRI, r0
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f000 ff4a 	bl	8003058 <vTaskSwitchContext>
 80021c4:	f04f 0000 	mov.w	r0, #0
 80021c8:	f380 8811 	msr	BASEPRI, r0
 80021cc:	bc08      	pop	{r3}
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	6808      	ldr	r0, [r1, #0]
 80021d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d6:	f01e 0f10 	tst.w	lr, #16
 80021da:	bf08      	it	eq
 80021dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80021e0:	f380 8809 	msr	PSP, r0
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	f3af 8000 	nop.w

080021f0 <pxCurrentTCBConst>:
 80021f0:	20003cac 	.word	0x20003cac

080021f4 <xPortSysTickHandler>:
{
 80021f4:	b508      	push	{r3, lr}
	__asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002206:	f000 fdbf 	bl	8002d88 <xTaskIncrementTick>
 800220a:	b118      	cbz	r0, 8002214 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <xPortSysTickHandler+0x28>)
 800220e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002212:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002214:	2300      	movs	r3, #0
 8002216:	f383 8811 	msr	BASEPRI, r3
 800221a:	bd08      	pop	{r3, pc}
 800221c:	e000ed04 	.word	0xe000ed04

08002220 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <vPortSetupTimerInterrupt+0x1c>)
 8002222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	fbb3 f3f2 	udiv	r3, r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <vPortSetupTimerInterrupt+0x20>)
 800222e:	3b01      	subs	r3, #1
 8002230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <vPortSetupTimerInterrupt+0x24>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000008 	.word	0x20000008
 8002240:	e000e014 	.word	0xe000e014
 8002244:	e000e010 	.word	0xe000e010

08002248 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002248:	4b31      	ldr	r3, [pc, #196]	; (8002310 <xPortStartScheduler+0xc8>)
 800224a:	4a32      	ldr	r2, [pc, #200]	; (8002314 <xPortStartScheduler+0xcc>)
{
 800224c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	4291      	cmp	r1, r2
 8002252:	d108      	bne.n	8002266 <xPortStartScheduler+0x1e>
	__asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	e7fe      	b.n	8002264 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <xPortStartScheduler+0xd0>)
 800226a:	429a      	cmp	r2, r3
 800226c:	d108      	bne.n	8002280 <xPortStartScheduler+0x38>
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	e7fe      	b.n	800227e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002280:	4b26      	ldr	r3, [pc, #152]	; (800231c <xPortStartScheduler+0xd4>)
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002288:	22ff      	movs	r2, #255	; 0xff
 800228a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800228c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800228e:	4a24      	ldr	r2, [pc, #144]	; (8002320 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002296:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800229a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800229e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <xPortStartScheduler+0xdc>)
 80022a2:	2207      	movs	r2, #7
 80022a4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80022a6:	2100      	movs	r1, #0
 80022a8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80022ac:	0600      	lsls	r0, r0, #24
 80022ae:	f102 34ff 	add.w	r4, r2, #4294967295
 80022b2:	d423      	bmi.n	80022fc <xPortStartScheduler+0xb4>
 80022b4:	b101      	cbz	r1, 80022b8 <xPortStartScheduler+0x70>
 80022b6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80022bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80022c0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80022c2:	9b01      	ldr	r3, [sp, #4]
 80022c4:	4a15      	ldr	r2, [pc, #84]	; (800231c <xPortStartScheduler+0xd4>)
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <xPortStartScheduler+0xe0>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80022d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80022da:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80022dc:	f7ff ffa0 	bl	8002220 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <xPortStartScheduler+0xe4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80022e6:	f7ff feeb 	bl	80020c0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80022ea:	4a11      	ldr	r2, [pc, #68]	; (8002330 <xPortStartScheduler+0xe8>)
 80022ec:	6813      	ldr	r3, [r2, #0]
 80022ee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80022f2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80022f4:	f7ff fed4 	bl	80020a0 <prvPortStartFirstTask>
	prvTaskExitError();
 80022f8:	f7ff feba 	bl	8002070 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80022fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002300:	0052      	lsls	r2, r2, #1
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f88d 2003 	strb.w	r2, [sp, #3]
 8002308:	2101      	movs	r1, #1
 800230a:	4622      	mov	r2, r4
 800230c:	e7cc      	b.n	80022a8 <xPortStartScheduler+0x60>
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00
 8002314:	410fc271 	.word	0x410fc271
 8002318:	410fc270 	.word	0x410fc270
 800231c:	e000e400 	.word	0xe000e400
 8002320:	2000008c 	.word	0x2000008c
 8002324:	20000090 	.word	0x20000090
 8002328:	e000ed20 	.word	0xe000ed20
 800232c:	20000004 	.word	0x20000004
 8002330:	e000ef34 	.word	0xe000ef34

08002334 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002334:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <prvInsertBlockIntoFreeList+0x40>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4282      	cmp	r2, r0
 800233c:	d318      	bcc.n	8002370 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800233e:	685c      	ldr	r4, [r3, #4]
 8002340:	1919      	adds	r1, r3, r4
 8002342:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002344:	bf01      	itttt	eq
 8002346:	6841      	ldreq	r1, [r0, #4]
 8002348:	4618      	moveq	r0, r3
 800234a:	1909      	addeq	r1, r1, r4
 800234c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800234e:	6844      	ldr	r4, [r0, #4]
 8002350:	1901      	adds	r1, r0, r4
 8002352:	428a      	cmp	r2, r1
 8002354:	d107      	bne.n	8002366 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <prvInsertBlockIntoFreeList+0x44>)
 8002358:	6809      	ldr	r1, [r1, #0]
 800235a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800235c:	bf1f      	itttt	ne
 800235e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002360:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002362:	1909      	addne	r1, r1, r4
 8002364:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002366:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002368:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800236a:	bf18      	it	ne
 800236c:	6018      	strne	r0, [r3, #0]
 800236e:	bd10      	pop	{r4, pc}
 8002370:	4613      	mov	r3, r2
 8002372:	e7e1      	b.n	8002338 <prvInsertBlockIntoFreeList+0x4>
 8002374:	20003ca4 	.word	0x20003ca4
 8002378:	20000094 	.word	0x20000094

0800237c <pvPortMalloc>:
{
 800237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002380:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002382:	f000 fcf3 	bl	8002d6c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002386:	493e      	ldr	r1, [pc, #248]	; (8002480 <pvPortMalloc+0x104>)
 8002388:	4d3e      	ldr	r5, [pc, #248]	; (8002484 <pvPortMalloc+0x108>)
 800238a:	680b      	ldr	r3, [r1, #0]
 800238c:	bb0b      	cbnz	r3, 80023d2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800238e:	4a3e      	ldr	r2, [pc, #248]	; (8002488 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002390:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002392:	bf1f      	itttt	ne
 8002394:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002396:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800239a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800239e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023a0:	bf14      	ite	ne
 80023a2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80023a4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80023a8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80023aa:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023ac:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023b0:	4e36      	ldr	r6, [pc, #216]	; (800248c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80023b2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80023b4:	2000      	movs	r0, #0
 80023b6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023b8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80023ba:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80023bc:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023be:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80023c0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023c2:	4b33      	ldr	r3, [pc, #204]	; (8002490 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023c4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023c6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023c8:	4b32      	ldr	r3, [pc, #200]	; (8002494 <pvPortMalloc+0x118>)
 80023ca:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80023cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023d0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023d2:	682f      	ldr	r7, [r5, #0]
 80023d4:	4227      	tst	r7, r4
 80023d6:	d116      	bne.n	8002406 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80023d8:	2c00      	cmp	r4, #0
 80023da:	d041      	beq.n	8002460 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80023dc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023e0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80023e2:	bf1c      	itt	ne
 80023e4:	f023 0307 	bicne.w	r3, r3, #7
 80023e8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023ea:	b163      	cbz	r3, 8002406 <pvPortMalloc+0x8a>
 80023ec:	4a29      	ldr	r2, [pc, #164]	; (8002494 <pvPortMalloc+0x118>)
 80023ee:	6816      	ldr	r6, [r2, #0]
 80023f0:	42b3      	cmp	r3, r6
 80023f2:	4690      	mov	r8, r2
 80023f4:	d807      	bhi.n	8002406 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <pvPortMalloc+0x110>)
 80023f8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023fa:	6868      	ldr	r0, [r5, #4]
 80023fc:	4283      	cmp	r3, r0
 80023fe:	d804      	bhi.n	800240a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002400:	6809      	ldr	r1, [r1, #0]
 8002402:	428d      	cmp	r5, r1
 8002404:	d107      	bne.n	8002416 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002406:	2400      	movs	r4, #0
 8002408:	e02a      	b.n	8002460 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800240a:	682c      	ldr	r4, [r5, #0]
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0f7      	beq.n	8002400 <pvPortMalloc+0x84>
 8002410:	462a      	mov	r2, r5
 8002412:	4625      	mov	r5, r4
 8002414:	e7f1      	b.n	80023fa <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002416:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002418:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800241a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800241c:	1ac2      	subs	r2, r0, r3
 800241e:	2a10      	cmp	r2, #16
 8002420:	d90f      	bls.n	8002442 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002422:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002424:	0741      	lsls	r1, r0, #29
 8002426:	d008      	beq.n	800243a <pvPortMalloc+0xbe>
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	e7fe      	b.n	8002438 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800243a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800243c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800243e:	f7ff ff79 	bl	8002334 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002442:	4913      	ldr	r1, [pc, #76]	; (8002490 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002444:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002446:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002448:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800244a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800244c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800244e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002452:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002456:	bf38      	it	cc
 8002458:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800245a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800245c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800245e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002460:	f000 fd24 	bl	8002eac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002464:	0763      	lsls	r3, r4, #29
 8002466:	d008      	beq.n	800247a <pvPortMalloc+0xfe>
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	e7fe      	b.n	8002478 <pvPortMalloc+0xfc>
}
 800247a:	4620      	mov	r0, r4
 800247c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002480:	20000094 	.word	0x20000094
 8002484:	20003c98 	.word	0x20003c98
 8002488:	20000098 	.word	0x20000098
 800248c:	20003ca4 	.word	0x20003ca4
 8002490:	20003ca0 	.word	0x20003ca0
 8002494:	20003c9c 	.word	0x20003c9c

08002498 <vPortFree>:
{
 8002498:	b510      	push	{r4, lr}
	if( pv != NULL )
 800249a:	4604      	mov	r4, r0
 800249c:	b370      	cbz	r0, 80024fc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800249e:	4a18      	ldr	r2, [pc, #96]	; (8002500 <vPortFree+0x68>)
 80024a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	4213      	tst	r3, r2
 80024a8:	d108      	bne.n	80024bc <vPortFree+0x24>
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	e7fe      	b.n	80024ba <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024bc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80024c0:	b141      	cbz	r1, 80024d4 <vPortFree+0x3c>
 80024c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c6:	f383 8811 	msr	BASEPRI, r3
 80024ca:	f3bf 8f6f 	isb	sy
 80024ce:	f3bf 8f4f 	dsb	sy
 80024d2:	e7fe      	b.n	80024d2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80024d4:	ea23 0302 	bic.w	r3, r3, r2
 80024d8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80024dc:	f000 fc46 	bl	8002d6c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024e0:	4a08      	ldr	r2, [pc, #32]	; (8002504 <vPortFree+0x6c>)
 80024e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80024e6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024e8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024ec:	440b      	add	r3, r1
 80024ee:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024f0:	f7ff ff20 	bl	8002334 <prvInsertBlockIntoFreeList>
}
 80024f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80024f8:	f000 bcd8 	b.w	8002eac <xTaskResumeAll>
 80024fc:	bd10      	pop	{r4, pc}
 80024fe:	bf00      	nop
 8002500:	20003c98 	.word	0x20003c98
 8002504:	20003c9c 	.word	0x20003c9c

08002508 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800250c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800250e:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002510:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002512:	b942      	cbnz	r2, 8002526 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002514:	6805      	ldr	r5, [r0, #0]
 8002516:	b99d      	cbnz	r5, 8002540 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002518:	6840      	ldr	r0, [r0, #4]
 800251a:	f001 f81f 	bl	800355c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800251e:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002520:	3601      	adds	r6, #1
 8002522:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002524:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002526:	b96d      	cbnz	r5, 8002544 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002528:	6880      	ldr	r0, [r0, #8]
 800252a:	f001 fe21 	bl	8004170 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800252e:	68a3      	ldr	r3, [r4, #8]
 8002530:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002532:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002534:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002536:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002538:	4293      	cmp	r3, r2
 800253a:	d301      	bcc.n	8002540 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002540:	2000      	movs	r0, #0
 8002542:	e7ed      	b.n	8002520 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002544:	68c0      	ldr	r0, [r0, #12]
 8002546:	f001 fe13 	bl	8004170 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800254a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800254c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800254e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002550:	425b      	negs	r3, r3
 8002552:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002554:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002556:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002558:	bf3e      	ittt	cc
 800255a:	6862      	ldrcc	r2, [r4, #4]
 800255c:	189b      	addcc	r3, r3, r2
 800255e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002560:	2d02      	cmp	r5, #2
 8002562:	d1ed      	bne.n	8002540 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002564:	b10e      	cbz	r6, 800256a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002566:	3e01      	subs	r6, #1
 8002568:	e7ea      	b.n	8002540 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800256a:	4630      	mov	r0, r6
 800256c:	e7d8      	b.n	8002520 <prvCopyDataToQueue+0x18>

0800256e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800256e:	4603      	mov	r3, r0
 8002570:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002574:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002576:	b162      	cbz	r2, 8002592 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002578:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800257a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800257c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800257e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002580:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002582:	bf24      	itt	cs
 8002584:	6819      	ldrcs	r1, [r3, #0]
 8002586:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002588:	68d9      	ldr	r1, [r3, #12]
	}
}
 800258a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800258e:	f001 bdef 	b.w	8004170 <memcpy>
}
 8002592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002596:	4770      	bx	lr

08002598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800259c:	f7ff fdc2 	bl	8002124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025a0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025a4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80025a8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	dc14      	bgt.n	80025d8 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80025ae:	23ff      	movs	r3, #255	; 0xff
 80025b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80025b4:	f7ff fdd8 	bl	8002168 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025b8:	f7ff fdb4 	bl	8002124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80025bc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025c0:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80025c4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025c6:	2d00      	cmp	r5, #0
 80025c8:	dc12      	bgt.n	80025f0 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025ca:	23ff      	movs	r3, #255	; 0xff
 80025cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80025d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80025d4:	f7ff bdc8 	b.w	8002168 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0e7      	beq.n	80025ae <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025de:	4630      	mov	r0, r6
 80025e0:	f000 fe02 	bl	80031e8 <xTaskRemoveFromEventList>
 80025e4:	b108      	cbz	r0, 80025ea <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80025e6:	f000 fe8b 	bl	8003300 <vTaskMissedYield>
 80025ea:	3d01      	subs	r5, #1
 80025ec:	b26d      	sxtb	r5, r5
 80025ee:	e7dc      	b.n	80025aa <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025f0:	6923      	ldr	r3, [r4, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0e9      	beq.n	80025ca <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025f6:	4630      	mov	r0, r6
 80025f8:	f000 fdf6 	bl	80031e8 <xTaskRemoveFromEventList>
 80025fc:	b108      	cbz	r0, 8002602 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80025fe:	f000 fe7f 	bl	8003300 <vTaskMissedYield>
 8002602:	3d01      	subs	r5, #1
 8002604:	b26d      	sxtb	r5, r5
 8002606:	e7de      	b.n	80025c6 <prvUnlockQueue+0x2e>

08002608 <xQueueGenericReset>:
{
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800260c:	4604      	mov	r4, r0
 800260e:	b940      	cbnz	r0, 8002622 <xQueueGenericReset+0x1a>
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	e7fe      	b.n	8002620 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002622:	f7ff fd7f 	bl	8002124 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002626:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800262a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800262c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800262e:	4343      	muls	r3, r0
 8002630:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002632:	1a1b      	subs	r3, r3, r0
 8002634:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002636:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002638:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800263a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800263c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800263e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002640:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002644:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002648:	b995      	cbnz	r5, 8002670 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800264a:	6923      	ldr	r3, [r4, #16]
 800264c:	b163      	cbz	r3, 8002668 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800264e:	f104 0010 	add.w	r0, r4, #16
 8002652:	f000 fdc9 	bl	80031e8 <xTaskRemoveFromEventList>
 8002656:	b138      	cbz	r0, 8002668 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <xQueueGenericReset+0x7c>)
 800265a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002668:	f7ff fd7e 	bl	8002168 <vPortExitCritical>
}
 800266c:	2001      	movs	r0, #1
 800266e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002670:	f104 0010 	add.w	r0, r4, #16
 8002674:	f7ff fcba 	bl	8001fec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002678:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800267c:	f7ff fcb6 	bl	8001fec <vListInitialise>
 8002680:	e7f2      	b.n	8002668 <xQueueGenericReset+0x60>
 8002682:	bf00      	nop
 8002684:	e000ed04 	.word	0xe000ed04

08002688 <xQueueGenericCreate>:
	{
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	460d      	mov	r5, r1
 800268c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800268e:	4606      	mov	r6, r0
 8002690:	b940      	cbnz	r0, 80026a4 <xQueueGenericCreate+0x1c>
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	e7fe      	b.n	80026a2 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80026a6:	3050      	adds	r0, #80	; 0x50
 80026a8:	f7ff fe68 	bl	800237c <pvPortMalloc>
		if( pxNewQueue != NULL )
 80026ac:	4604      	mov	r4, r0
 80026ae:	b148      	cbz	r0, 80026c4 <xQueueGenericCreate+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80026b0:	b955      	cbnz	r5, 80026c8 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026b2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80026b4:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026b6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026b8:	2101      	movs	r1, #1
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff ffa4 	bl	8002608 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80026c0:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80026c4:	4620      	mov	r0, r4
 80026c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80026c8:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026cc:	6003      	str	r3, [r0, #0]
 80026ce:	e7f1      	b.n	80026b4 <xQueueGenericCreate+0x2c>

080026d0 <xQueueGenericSend>:
{
 80026d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026d4:	4689      	mov	r9, r1
 80026d6:	9201      	str	r2, [sp, #4]
 80026d8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80026da:	4604      	mov	r4, r0
 80026dc:	b940      	cbnz	r0, 80026f0 <xQueueGenericSend+0x20>
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	e7fe      	b.n	80026ee <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f0:	2900      	cmp	r1, #0
 80026f2:	f040 8088 	bne.w	8002806 <xQueueGenericSend+0x136>
 80026f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8084 	beq.w	8002806 <xQueueGenericSend+0x136>
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	e7fe      	b.n	800270e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002710:	9e01      	ldr	r6, [sp, #4]
 8002712:	2e00      	cmp	r6, #0
 8002714:	f000 8082 	beq.w	800281c <xQueueGenericSend+0x14c>
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	e7fe      	b.n	8002728 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800272a:	9d01      	ldr	r5, [sp, #4]
 800272c:	b91d      	cbnz	r5, 8002736 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800272e:	f7ff fd1b 	bl	8002168 <vPortExitCritical>
			return errQUEUE_FULL;
 8002732:	2000      	movs	r0, #0
 8002734:	e058      	b.n	80027e8 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002736:	b916      	cbnz	r6, 800273e <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8002738:	a802      	add	r0, sp, #8
 800273a:	f000 fd97 	bl	800326c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800273e:	f7ff fd13 	bl	8002168 <vPortExitCritical>
		vTaskSuspendAll();
 8002742:	f000 fb13 	bl	8002d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002746:	f7ff fced 	bl	8002124 <vPortEnterCritical>
 800274a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800274e:	2bff      	cmp	r3, #255	; 0xff
 8002750:	bf08      	it	eq
 8002752:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002756:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800275a:	2bff      	cmp	r3, #255	; 0xff
 800275c:	bf08      	it	eq
 800275e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002762:	f7ff fd01 	bl	8002168 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002766:	a901      	add	r1, sp, #4
 8002768:	a802      	add	r0, sp, #8
 800276a:	f000 fd8f 	bl	800328c <xTaskCheckForTimeOut>
 800276e:	2800      	cmp	r0, #0
 8002770:	d143      	bne.n	80027fa <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002772:	f7ff fcd7 	bl	8002124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002776:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002778:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800277a:	f7ff fcf5 	bl	8002168 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800277e:	42ae      	cmp	r6, r5
 8002780:	d135      	bne.n	80027ee <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002782:	9901      	ldr	r1, [sp, #4]
 8002784:	f104 0010 	add.w	r0, r4, #16
 8002788:	f000 fd14 	bl	80031b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff ff03 	bl	8002598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002792:	f000 fb8b 	bl	8002eac <xTaskResumeAll>
 8002796:	b938      	cbnz	r0, 80027a8 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002798:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800279c:	f8ca 3000 	str.w	r3, [sl]
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80027aa:	f7ff fcbb 	bl	8002124 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80027b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d301      	bcc.n	80027ba <xQueueGenericSend+0xea>
 80027b6:	2f02      	cmp	r7, #2
 80027b8:	d1b7      	bne.n	800272a <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027ba:	463a      	mov	r2, r7
 80027bc:	4649      	mov	r1, r9
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff fea2 	bl	8002508 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027c6:	b11b      	cbz	r3, 80027d0 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027cc:	f000 fd0c 	bl	80031e8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80027d0:	b138      	cbz	r0, 80027e2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <xQueueGenericSend+0x168>)
 80027d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80027e2:	f7ff fcc1 	bl	8002168 <vPortExitCritical>
				return pdPASS;
 80027e6:	2001      	movs	r0, #1
}
 80027e8:	b004      	add	sp, #16
 80027ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff fed2 	bl	8002598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027f4:	f000 fb5a 	bl	8002eac <xTaskResumeAll>
 80027f8:	e7d6      	b.n	80027a8 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff fecc 	bl	8002598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002800:	f000 fb54 	bl	8002eac <xTaskResumeAll>
 8002804:	e795      	b.n	8002732 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002806:	2f02      	cmp	r7, #2
 8002808:	d102      	bne.n	8002810 <xQueueGenericSend+0x140>
 800280a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d10a      	bne.n	8002826 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002810:	f000 fe4e 	bl	80034b0 <xTaskGetSchedulerState>
 8002814:	2800      	cmp	r0, #0
 8002816:	f43f af7b 	beq.w	8002710 <xQueueGenericSend+0x40>
 800281a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800281c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002820:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002838 <xQueueGenericSend+0x168>
 8002824:	e7c1      	b.n	80027aa <xQueueGenericSend+0xda>
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	e7fe      	b.n	8002836 <xQueueGenericSend+0x166>
 8002838:	e000ed04 	.word	0xe000ed04

0800283c <xQueueCreateMutex>:
	{
 800283c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800283e:	4602      	mov	r2, r0
 8002840:	2100      	movs	r1, #0
 8002842:	2001      	movs	r0, #1
 8002844:	f7ff ff20 	bl	8002688 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8002848:	4604      	mov	r4, r0
 800284a:	b138      	cbz	r0, 800285c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002850:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002852:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002854:	461a      	mov	r2, r3
 8002856:	4619      	mov	r1, r3
 8002858:	f7ff ff3a 	bl	80026d0 <xQueueGenericSend>
	}
 800285c:	4620      	mov	r0, r4
 800285e:	bd10      	pop	{r4, pc}

08002860 <xQueueGenericReceive>:
{
 8002860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002864:	4688      	mov	r8, r1
 8002866:	9201      	str	r2, [sp, #4]
 8002868:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800286a:	4604      	mov	r4, r0
 800286c:	b940      	cbnz	r0, 8002880 <xQueueGenericReceive+0x20>
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	e7fe      	b.n	800287e <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002880:	2900      	cmp	r1, #0
 8002882:	f040 80a5 	bne.w	80029d0 <xQueueGenericReceive+0x170>
 8002886:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80a1 	beq.w	80029d0 <xQueueGenericReceive+0x170>
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	e7fe      	b.n	800289e <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028a0:	9e01      	ldr	r6, [sp, #4]
 80028a2:	2e00      	cmp	r6, #0
 80028a4:	f000 809a 	beq.w	80029dc <xQueueGenericReceive+0x17c>
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	e7fe      	b.n	80028b8 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80028bc:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d06d      	beq.n	800299e <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028c6:	e05f      	b.n	8002988 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 80028c8:	9d01      	ldr	r5, [sp, #4]
 80028ca:	b91d      	cbnz	r5, 80028d4 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 80028cc:	f7ff fc4c 	bl	8002168 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80028d0:	4628      	mov	r0, r5
 80028d2:	e067      	b.n	80029a4 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 80028d4:	b916      	cbnz	r6, 80028dc <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 80028d6:	a802      	add	r0, sp, #8
 80028d8:	f000 fcc8 	bl	800326c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80028dc:	f7ff fc44 	bl	8002168 <vPortExitCritical>
		vTaskSuspendAll();
 80028e0:	f000 fa44 	bl	8002d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028e4:	f7ff fc1e 	bl	8002124 <vPortEnterCritical>
 80028e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80028ec:	2bff      	cmp	r3, #255	; 0xff
 80028ee:	bf08      	it	eq
 80028f0:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80028f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80028f8:	2bff      	cmp	r3, #255	; 0xff
 80028fa:	bf08      	it	eq
 80028fc:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002900:	f7ff fc32 	bl	8002168 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002904:	a901      	add	r1, sp, #4
 8002906:	a802      	add	r0, sp, #8
 8002908:	f000 fcc0 	bl	800328c <xTaskCheckForTimeOut>
 800290c:	2800      	cmp	r0, #0
 800290e:	d152      	bne.n	80029b6 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8002910:	f7ff fc08 	bl	8002124 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002914:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8002916:	f7ff fc27 	bl	8002168 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800291a:	2d00      	cmp	r5, #0
 800291c:	d145      	bne.n	80029aa <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	b933      	cbnz	r3, 8002930 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8002922:	f7ff fbff 	bl	8002124 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002926:	6860      	ldr	r0, [r4, #4]
 8002928:	f000 fdd2 	bl	80034d0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800292c:	f7ff fc1c 	bl	8002168 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002930:	9901      	ldr	r1, [sp, #4]
 8002932:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002936:	f000 fc3d 	bl	80031b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800293a:	4620      	mov	r0, r4
 800293c:	f7ff fe2c 	bl	8002598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002940:	f000 fab4 	bl	8002eac <xTaskResumeAll>
 8002944:	b938      	cbnz	r0, 8002956 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8002946:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800294a:	f8ca 3000 	str.w	r3, [sl]
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002958:	f7ff fbe4 	bl	8002124 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800295c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800295e:	2d00      	cmp	r5, #0
 8002960:	d0b2      	beq.n	80028c8 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002962:	4641      	mov	r1, r8
 8002964:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002966:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002968:	f7ff fe01 	bl	800256e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800296c:	f1b9 0f00 	cmp.w	r9, #0
 8002970:	d1a3      	bne.n	80028ba <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002972:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002974:	3d01      	subs	r5, #1
 8002976:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002978:	b913      	cbnz	r3, 8002980 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800297a:	f000 fe97 	bl	80036ac <pvTaskIncrementMutexHeldCount>
 800297e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002980:	6923      	ldr	r3, [r4, #16]
 8002982:	b163      	cbz	r3, 800299e <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002984:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002988:	f000 fc2e 	bl	80031e8 <xTaskRemoveFromEventList>
 800298c:	b138      	cbz	r0, 800299e <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <xQueueGenericReceive+0x184>)
 8002990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800299e:	f7ff fbe3 	bl	8002168 <vPortExitCritical>
				return pdPASS;
 80029a2:	2001      	movs	r0, #1
}
 80029a4:	b004      	add	sp, #16
 80029a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff fdf4 	bl	8002598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029b0:	f000 fa7c 	bl	8002eac <xTaskResumeAll>
 80029b4:	e7cf      	b.n	8002956 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7ff fdee 	bl	8002598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029bc:	f000 fa76 	bl	8002eac <xTaskResumeAll>
	taskENTER_CRITICAL();
 80029c0:	f7ff fbb0 	bl	8002124 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80029c6:	f7ff fbcf 	bl	8002168 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029ca:	2d00      	cmp	r5, #0
 80029cc:	d1c3      	bne.n	8002956 <xQueueGenericReceive+0xf6>
 80029ce:	e77f      	b.n	80028d0 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029d0:	f000 fd6e 	bl	80034b0 <xTaskGetSchedulerState>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	f43f af63 	beq.w	80028a0 <xQueueGenericReceive+0x40>
 80029da:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80029dc:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80029de:	f8df a004 	ldr.w	sl, [pc, #4]	; 80029e4 <xQueueGenericReceive+0x184>
 80029e2:	e7b9      	b.n	8002958 <xQueueGenericReceive+0xf8>
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80029e8:	b510      	push	{r4, lr}
 80029ea:	4604      	mov	r4, r0
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80029ec:	f001 fbf8 	bl	80041e0 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7fd fc0d 	bl	8000210 <strlen>
		{
			pcBuffer[ x ] = ' ';
 80029f6:	2320      	movs	r3, #32
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80029f8:	280e      	cmp	r0, #14
 80029fa:	d903      	bls.n	8002a04 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 80029fc:	2300      	movs	r3, #0
 80029fe:	5423      	strb	r3, [r4, r0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 8002a00:	4420      	add	r0, r4
 8002a02:	bd10      	pop	{r4, pc}
			pcBuffer[ x ] = ' ';
 8002a04:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8002a06:	3001      	adds	r0, #1
 8002a08:	e7f6      	b.n	80029f8 <prvWriteNameToBuffer+0x10>
	...

08002a0c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <prvResetNextTaskUnblockTime+0x1c>)
 8002a0e:	6813      	ldr	r3, [r2, #0]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <prvResetNextTaskUnblockTime+0x20>)
 8002a14:	b919      	cbnz	r1, 8002a1e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a16:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a22:	68d2      	ldr	r2, [r2, #12]
 8002a24:	6852      	ldr	r2, [r2, #4]
 8002a26:	e7f8      	b.n	8002a1a <prvResetNextTaskUnblockTime+0xe>
 8002a28:	20003cb0 	.word	0x20003cb0
 8002a2c:	20003d8c 	.word	0x20003d8c

08002a30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a34:	4e1b      	ldr	r6, [pc, #108]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002a36:	681d      	ldr	r5, [r3, #0]
{
 8002a38:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a3a:	6830      	ldr	r0, [r6, #0]
 8002a3c:	3004      	adds	r0, #4
{
 8002a3e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a40:	f7ff fb05 	bl	800204e <uxListRemove>
 8002a44:	4633      	mov	r3, r6
 8002a46:	b940      	cbnz	r0, 8002a5a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a48:	6831      	ldr	r1, [r6, #0]
 8002a4a:	4e17      	ldr	r6, [pc, #92]	; (8002aa8 <prvAddCurrentTaskToDelayedList+0x78>)
 8002a4c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002a4e:	6832      	ldr	r2, [r6, #0]
 8002a50:	2001      	movs	r0, #1
 8002a52:	4088      	lsls	r0, r1
 8002a54:	ea22 0200 	bic.w	r2, r2, r0
 8002a58:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a5a:	1c62      	adds	r2, r4, #1
 8002a5c:	d107      	bne.n	8002a6e <prvAddCurrentTaskToDelayedList+0x3e>
 8002a5e:	b137      	cbz	r7, 8002a6e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	4812      	ldr	r0, [pc, #72]	; (8002aac <prvAddCurrentTaskToDelayedList+0x7c>)
 8002a64:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a6a:	f7ff bacd 	b.w	8002008 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a6e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a70:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002a72:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a74:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002a76:	d907      	bls.n	8002a88 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <prvAddCurrentTaskToDelayedList+0x80>)
 8002a7a:	6810      	ldr	r0, [r2, #0]
 8002a7c:	6819      	ldr	r1, [r3, #0]
}
 8002a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a82:	3104      	adds	r1, #4
 8002a84:	f7ff bacc 	b.w	8002020 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a88:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <prvAddCurrentTaskToDelayedList+0x84>)
 8002a8a:	6810      	ldr	r0, [r2, #0]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	3104      	adds	r1, #4
 8002a90:	f7ff fac6 	bl	8002020 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0x88>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002a9a:	bf38      	it	cc
 8002a9c:	601c      	strcc	r4, [r3, #0]
 8002a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aa0:	20003dd4 	.word	0x20003dd4
 8002aa4:	20003cac 	.word	0x20003cac
 8002aa8:	20003d5c 	.word	0x20003d5c
 8002aac:	20003dac 	.word	0x20003dac
 8002ab0:	20003cb4 	.word	0x20003cb4
 8002ab4:	20003cb0 	.word	0x20003cb0
 8002ab8:	20003d8c 	.word	0x20003d8c

08002abc <eTaskGetState.part.4>:
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	e7fe      	b.n	8002acc <eTaskGetState.part.4+0x10>
	...

08002ad0 <xTaskCreate>:
	{
 8002ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ad4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002ad8:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ada:	4650      	mov	r0, sl
	{
 8002adc:	460d      	mov	r5, r1
 8002ade:	4699      	mov	r9, r3
 8002ae0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ae2:	f7ff fc4b 	bl	800237c <pvPortMalloc>
			if( pxStack != NULL )
 8002ae6:	4607      	mov	r7, r0
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	f000 809f 	beq.w	8002c2c <xTaskCreate+0x15c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002aee:	2060      	movs	r0, #96	; 0x60
 8002af0:	f7ff fc44 	bl	800237c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002af4:	4604      	mov	r4, r0
 8002af6:	2800      	cmp	r0, #0
 8002af8:	f000 8095 	beq.w	8002c26 <xTaskCreate+0x156>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002afc:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 8002afe:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b00:	21a5      	movs	r1, #165	; 0xa5
 8002b02:	4638      	mov	r0, r7
 8002b04:	f001 fb3f 	bl	8004186 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b0a:	f1aa 0a04 	sub.w	sl, sl, #4
 8002b0e:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b10:	f02a 0a07 	bic.w	sl, sl, #7
 8002b14:	1e6b      	subs	r3, r5, #1
 8002b16:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002b1a:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b1c:	7859      	ldrb	r1, [r3, #1]
 8002b1e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002b22:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002b26:	b109      	cbz	r1, 8002b2c <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b28:	42ab      	cmp	r3, r5
 8002b2a:	d1f7      	bne.n	8002b1c <xTaskCreate+0x4c>
 8002b2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002b2e:	2d06      	cmp	r5, #6
 8002b30:	bf28      	it	cs
 8002b32:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b34:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b38:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002b3a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002b3c:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b3e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b40:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002b44:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b48:	f7ff fa5b 	bl	8002002 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b4c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b50:	f104 0018 	add.w	r0, r4, #24
 8002b54:	f7ff fa55 	bl	8002002 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002b58:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b5c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b60:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8002b62:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b66:	f884 b05c 	strb.w	fp, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b6a:	464a      	mov	r2, r9
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	4650      	mov	r0, sl
 8002b70:	f7ff fab0 	bl	80020d4 <pxPortInitialiseStack>
 8002b74:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002b76:	b106      	cbz	r6, 8002b7a <xTaskCreate+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b78:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002b7a:	f7ff fad3 	bl	8002124 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002b7e:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 8002b80:	4e32      	ldr	r6, [pc, #200]	; (8002c4c <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002c78 <xTaskCreate+0x1a8>
 8002b88:	3201      	adds	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002b8c:	6835      	ldr	r5, [r6, #0]
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	d14f      	bne.n	8002c32 <xTaskCreate+0x162>
			pxCurrentTCB = pxNewTCB;
 8002b92:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d11d      	bne.n	8002bd6 <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b9a:	eb08 0005 	add.w	r0, r8, r5
 8002b9e:	3514      	adds	r5, #20
 8002ba0:	f7ff fa24 	bl	8001fec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ba4:	2d8c      	cmp	r5, #140	; 0x8c
 8002ba6:	d1f8      	bne.n	8002b9a <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 8002ba8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002c7c <xTaskCreate+0x1ac>
	vListInitialise( &xDelayedTaskList2 );
 8002bac:	4d28      	ldr	r5, [pc, #160]	; (8002c50 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList1 );
 8002bae:	4648      	mov	r0, r9
 8002bb0:	f7ff fa1c 	bl	8001fec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f7ff fa19 	bl	8001fec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bba:	4826      	ldr	r0, [pc, #152]	; (8002c54 <xTaskCreate+0x184>)
 8002bbc:	f7ff fa16 	bl	8001fec <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002bc0:	4825      	ldr	r0, [pc, #148]	; (8002c58 <xTaskCreate+0x188>)
 8002bc2:	f7ff fa13 	bl	8001fec <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002bc6:	4825      	ldr	r0, [pc, #148]	; (8002c5c <xTaskCreate+0x18c>)
 8002bc8:	f7ff fa10 	bl	8001fec <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bcc:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <xTaskCreate+0x190>)
 8002bce:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <xTaskCreate+0x194>)
 8002bd4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002bd6:	4a24      	ldr	r2, [pc, #144]	; (8002c68 <xTaskCreate+0x198>)
		prvAddTaskToReadyList( pxNewTCB );
 8002bd8:	4924      	ldr	r1, [pc, #144]	; (8002c6c <xTaskCreate+0x19c>)
		uxTaskNumber++;
 8002bda:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002bdc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002bde:	3301      	adds	r3, #1
 8002be0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002be2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002be4:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002be6:	2501      	movs	r5, #1
 8002be8:	fa05 f302 	lsl.w	r3, r5, r2
 8002bec:	4303      	orrs	r3, r0
 8002bee:	2014      	movs	r0, #20
 8002bf0:	600b      	str	r3, [r1, #0]
 8002bf2:	fb00 8002 	mla	r0, r0, r2, r8
 8002bf6:	4639      	mov	r1, r7
 8002bf8:	f7ff fa06 	bl	8002008 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002bfc:	f7ff fab4 	bl	8002168 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <xTaskCreate+0x1a0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	b163      	cbz	r3, 8002c20 <xTaskCreate+0x150>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c06:	6833      	ldr	r3, [r6, #0]
 8002c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d207      	bcs.n	8002c20 <xTaskCreate+0x150>
			taskYIELD_IF_USING_PREEMPTION();
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <xTaskCreate+0x1a4>)
 8002c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
	}
 8002c20:	4628      	mov	r0, r5
 8002c22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002c26:	4638      	mov	r0, r7
 8002c28:	f7ff fc36 	bl	8002498 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c2c:	f04f 35ff 	mov.w	r5, #4294967295
 8002c30:	e7f6      	b.n	8002c20 <xTaskCreate+0x150>
			if( xSchedulerRunning == pdFALSE )
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <xTaskCreate+0x1a0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1cd      	bne.n	8002bd6 <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c3a:	6833      	ldr	r3, [r6, #0]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c40:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002c42:	bf98      	it	ls
 8002c44:	6034      	strls	r4, [r6, #0]
 8002c46:	e7c6      	b.n	8002bd6 <xTaskCreate+0x106>
 8002c48:	20003d48 	.word	0x20003d48
 8002c4c:	20003cac 	.word	0x20003cac
 8002c50:	20003d74 	.word	0x20003d74
 8002c54:	20003d94 	.word	0x20003d94
 8002c58:	20003dc0 	.word	0x20003dc0
 8002c5c:	20003dac 	.word	0x20003dac
 8002c60:	20003cb0 	.word	0x20003cb0
 8002c64:	20003cb4 	.word	0x20003cb4
 8002c68:	20003d58 	.word	0x20003d58
 8002c6c:	20003d5c 	.word	0x20003d5c
 8002c70:	20003da8 	.word	0x20003da8
 8002c74:	e000ed04 	.word	0xe000ed04
 8002c78:	20003cb8 	.word	0x20003cb8
 8002c7c:	20003d60 	.word	0x20003d60

08002c80 <eTaskGetState>:
	{
 8002c80:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
 8002c82:	4605      	mov	r5, r0
 8002c84:	b908      	cbnz	r0, 8002c8a <eTaskGetState+0xa>
 8002c86:	f7ff ff19 	bl	8002abc <eTaskGetState.part.4>
		if( pxTCB == pxCurrentTCB )
 8002c8a:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <eTaskGetState+0x5c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4298      	cmp	r0, r3
 8002c90:	d01d      	beq.n	8002cce <eTaskGetState+0x4e>
			taskENTER_CRITICAL();
 8002c92:	f7ff fa47 	bl	8002124 <vPortEnterCritical>
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002c96:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
 8002c98:	f7ff fa66 	bl	8002168 <vPortExitCritical>
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8002c9c:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <eTaskGetState+0x60>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	429c      	cmp	r4, r3
 8002ca2:	d016      	beq.n	8002cd2 <eTaskGetState+0x52>
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <eTaskGetState+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	429c      	cmp	r4, r3
 8002caa:	d012      	beq.n	8002cd2 <eTaskGetState+0x52>
				else if( pxStateList == &xSuspendedTaskList )
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <eTaskGetState+0x68>)
 8002cae:	429c      	cmp	r4, r3
 8002cb0:	d105      	bne.n	8002cbe <eTaskGetState+0x3e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002cb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
						eReturn = eSuspended;
 8002cb6:	bf14      	ite	ne
 8002cb8:	2002      	movne	r0, #2
 8002cba:	2003      	moveq	r0, #3
 8002cbc:	bd38      	pop	{r3, r4, r5, pc}
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <eTaskGetState+0x6c>)
 8002cc0:	429c      	cmp	r4, r3
 8002cc2:	d008      	beq.n	8002cd6 <eTaskGetState+0x56>
 8002cc4:	2c00      	cmp	r4, #0
				eReturn = eReady;
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2004      	moveq	r0, #4
 8002cca:	2001      	movne	r0, #1
 8002ccc:	bd38      	pop	{r3, r4, r5, pc}
			eReturn = eRunning;
 8002cce:	2000      	movs	r0, #0
 8002cd0:	bd38      	pop	{r3, r4, r5, pc}
						eReturn = eBlocked;
 8002cd2:	2002      	movs	r0, #2
 8002cd4:	bd38      	pop	{r3, r4, r5, pc}
					eReturn = eDeleted;
 8002cd6:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002cd8:	bd38      	pop	{r3, r4, r5, pc}
 8002cda:	bf00      	nop
 8002cdc:	20003cac 	.word	0x20003cac
 8002ce0:	20003cb0 	.word	0x20003cb0
 8002ce4:	20003cb4 	.word	0x20003cb4
 8002ce8:	20003dac 	.word	0x20003dac
 8002cec:	20003dc0 	.word	0x20003dc0

08002cf0 <vTaskStartScheduler>:
{
 8002cf0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <vTaskStartScheduler+0x64>)
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	2400      	movs	r4, #0
 8002cf8:	9400      	str	r4, [sp, #0]
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	4916      	ldr	r1, [pc, #88]	; (8002d58 <vTaskStartScheduler+0x68>)
 8002d00:	4816      	ldr	r0, [pc, #88]	; (8002d5c <vTaskStartScheduler+0x6c>)
 8002d02:	f7ff fee5 	bl	8002ad0 <xTaskCreate>
	if( xReturn == pdPASS )
 8002d06:	2801      	cmp	r0, #1
 8002d08:	d116      	bne.n	8002d38 <vTaskStartScheduler+0x48>
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <vTaskStartScheduler+0x70>)
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <vTaskStartScheduler+0x74>)
 8002d24:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <vTaskStartScheduler+0x78>)
 8002d28:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8002d2a:	f000 fd79 	bl	8003820 <configureTimerForRunTimeStats>
}
 8002d2e:	b002      	add	sp, #8
 8002d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002d34:	f7ff ba88 	b.w	8002248 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d38:	3001      	adds	r0, #1
 8002d3a:	d108      	bne.n	8002d4e <vTaskStartScheduler+0x5e>
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	e7fe      	b.n	8002d4c <vTaskStartScheduler+0x5c>
}
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	bf00      	nop
 8002d54:	20003d88 	.word	0x20003d88
 8002d58:	08004aa4 	.word	0x08004aa4
 8002d5c:	08002fe5 	.word	0x08002fe5
 8002d60:	20003d8c 	.word	0x20003d8c
 8002d64:	20003da8 	.word	0x20003da8
 8002d68:	20003dd4 	.word	0x20003dd4

08002d6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002d6c:	4a02      	ldr	r2, [pc, #8]	; (8002d78 <vTaskSuspendAll+0xc>)
 8002d6e:	6813      	ldr	r3, [r2, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20003d54 	.word	0x20003d54

08002d7c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002d7c:	4b01      	ldr	r3, [pc, #4]	; (8002d84 <xTaskGetTickCount+0x8>)
 8002d7e:	6818      	ldr	r0, [r3, #0]
}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20003dd4 	.word	0x20003dd4

08002d88 <xTaskIncrementTick>:
{
 8002d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d8c:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <xTaskIncrementTick+0xf8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d153      	bne.n	8002e3c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002d94:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <xTaskIncrementTick+0xfc>)
 8002d96:	681c      	ldr	r4, [r3, #0]
 8002d98:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002d9a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002d9c:	b9bc      	cbnz	r4, 8002dce <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002d9e:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <xTaskIncrementTick+0x100>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	b142      	cbz	r2, 8002db8 <xTaskIncrementTick+0x30>
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	e7fe      	b.n	8002db6 <xTaskIncrementTick+0x2e>
 8002db8:	4a34      	ldr	r2, [pc, #208]	; (8002e8c <xTaskIncrementTick+0x104>)
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	6810      	ldr	r0, [r2, #0]
 8002dbe:	6018      	str	r0, [r3, #0]
 8002dc0:	6011      	str	r1, [r2, #0]
 8002dc2:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <xTaskIncrementTick+0x108>)
 8002dc4:	6813      	ldr	r3, [r2, #0]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	f7ff fe1f 	bl	8002a0c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dce:	4d31      	ldr	r5, [pc, #196]	; (8002e94 <xTaskIncrementTick+0x10c>)
 8002dd0:	4f31      	ldr	r7, [pc, #196]	; (8002e98 <xTaskIncrementTick+0x110>)
 8002dd2:	682b      	ldr	r3, [r5, #0]
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	f04f 0b00 	mov.w	fp, #0
 8002dda:	d33e      	bcc.n	8002e5a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ddc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002e88 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002de0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002ea8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de4:	f8d8 2000 	ldr.w	r2, [r8]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	bb72      	cbnz	r2, 8002e4a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	602a      	str	r2, [r5, #0]
					break;
 8002df2:	e032      	b.n	8002e5a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002df4:	f106 0a04 	add.w	sl, r6, #4
 8002df8:	4650      	mov	r0, sl
 8002dfa:	f7ff f928 	bl	800204e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dfe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002e00:	b119      	cbz	r1, 8002e0a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e02:	f106 0018 	add.w	r0, r6, #24
 8002e06:	f7ff f922 	bl	800204e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e0a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002e0c:	f8d9 3000 	ldr.w	r3, [r9]
 8002e10:	2201      	movs	r2, #1
 8002e12:	fa02 f100 	lsl.w	r1, r2, r0
 8002e16:	4319      	orrs	r1, r3
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <xTaskIncrementTick+0x114>)
 8002e1a:	f8c9 1000 	str.w	r1, [r9]
 8002e1e:	f04f 0e14 	mov.w	lr, #20
 8002e22:	4651      	mov	r1, sl
 8002e24:	fb0e 3000 	mla	r0, lr, r0, r3
 8002e28:	f7ff f8ee 	bl	8002008 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e2c:	6838      	ldr	r0, [r7, #0]
 8002e2e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002e30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002e32:	4291      	cmp	r1, r2
 8002e34:	bf28      	it	cs
 8002e36:	f04f 0b01 	movcs.w	fp, #1
 8002e3a:	e7d3      	b.n	8002de4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002e3c:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <xTaskIncrementTick+0x118>)
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002e44:	f04f 0b00 	mov.w	fp, #0
 8002e48:	e011      	b.n	8002e6e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e4a:	f8d8 2000 	ldr.w	r2, [r8]
 8002e4e:	68d2      	ldr	r2, [r2, #12]
 8002e50:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e52:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002e54:	428c      	cmp	r4, r1
 8002e56:	d2cd      	bcs.n	8002df4 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002e58:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <xTaskIncrementTick+0x114>)
 8002e5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e60:	2214      	movs	r2, #20
 8002e62:	434a      	muls	r2, r1
 8002e64:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002e66:	2a02      	cmp	r2, #2
 8002e68:	bf28      	it	cs
 8002e6a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002e6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <xTaskIncrementTick+0x11c>)
 8002e70:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002e72:	2a00      	cmp	r2, #0
 8002e74:	bf18      	it	ne
 8002e76:	f04f 0b01 	movne.w	fp, #1
}
 8002e7a:	4658      	mov	r0, fp
 8002e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e80:	20003d54 	.word	0x20003d54
 8002e84:	20003dd4 	.word	0x20003dd4
 8002e88:	20003cb0 	.word	0x20003cb0
 8002e8c:	20003cb4 	.word	0x20003cb4
 8002e90:	20003d90 	.word	0x20003d90
 8002e94:	20003d8c 	.word	0x20003d8c
 8002e98:	20003cac 	.word	0x20003cac
 8002e9c:	20003cb8 	.word	0x20003cb8
 8002ea0:	20003d50 	.word	0x20003d50
 8002ea4:	20003dd8 	.word	0x20003dd8
 8002ea8:	20003d5c 	.word	0x20003d5c

08002eac <xTaskResumeAll>:
{
 8002eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002eb0:	4c31      	ldr	r4, [pc, #196]	; (8002f78 <xTaskResumeAll+0xcc>)
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	b943      	cbnz	r3, 8002ec8 <xTaskResumeAll+0x1c>
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	e7fe      	b.n	8002ec6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002ec8:	f7ff f92c 	bl	8002124 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ed2:	6824      	ldr	r4, [r4, #0]
 8002ed4:	b12c      	cbz	r4, 8002ee2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002ed6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002ed8:	f7ff f946 	bl	8002168 <vPortExitCritical>
}
 8002edc:	4620      	mov	r0, r4
 8002ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <xTaskResumeAll+0xd0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f5      	beq.n	8002ed6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eea:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002f94 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002eee:	4f24      	ldr	r7, [pc, #144]	; (8002f80 <xTaskResumeAll+0xd4>)
 8002ef0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002f98 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ef4:	f8d9 3000 	ldr.w	r3, [r9]
 8002ef8:	b9e3      	cbnz	r3, 8002f34 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002efa:	b10c      	cbz	r4, 8002f00 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002efc:	f7ff fd86 	bl	8002a0c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f00:	4d20      	ldr	r5, [pc, #128]	; (8002f84 <xTaskResumeAll+0xd8>)
 8002f02:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f04:	b144      	cbz	r4, 8002f18 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002f06:	4e20      	ldr	r6, [pc, #128]	; (8002f88 <xTaskResumeAll+0xdc>)
 8002f08:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002f0a:	f7ff ff3d 	bl	8002d88 <xTaskIncrementTick>
 8002f0e:	b100      	cbz	r0, 8002f12 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002f10:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f12:	3c01      	subs	r4, #1
 8002f14:	d1f9      	bne.n	8002f0a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002f16:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <xTaskResumeAll+0xdc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0da      	beq.n	8002ed6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <xTaskResumeAll+0xe0>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002f30:	2401      	movs	r4, #1
 8002f32:	e7d1      	b.n	8002ed8 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f34:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002f38:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f3a:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f3c:	f104 0018 	add.w	r0, r4, #24
 8002f40:	f7ff f885 	bl	800204e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f44:	4630      	mov	r0, r6
 8002f46:	f7ff f882 	bl	800204e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	2501      	movs	r5, #1
 8002f50:	fa05 f302 	lsl.w	r3, r5, r2
 8002f54:	2014      	movs	r0, #20
 8002f56:	430b      	orrs	r3, r1
 8002f58:	fb00 8002 	mla	r0, r0, r2, r8
 8002f5c:	4631      	mov	r1, r6
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	f7ff f852 	bl	8002008 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <xTaskResumeAll+0xe4>)
 8002f66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002f6e:	bf24      	itt	cs
 8002f70:	4b05      	ldrcs	r3, [pc, #20]	; (8002f88 <xTaskResumeAll+0xdc>)
 8002f72:	601d      	strcs	r5, [r3, #0]
 8002f74:	e7be      	b.n	8002ef4 <xTaskResumeAll+0x48>
 8002f76:	bf00      	nop
 8002f78:	20003d54 	.word	0x20003d54
 8002f7c:	20003d48 	.word	0x20003d48
 8002f80:	20003d5c 	.word	0x20003d5c
 8002f84:	20003d50 	.word	0x20003d50
 8002f88:	20003dd8 	.word	0x20003dd8
 8002f8c:	e000ed04 	.word	0xe000ed04
 8002f90:	20003cac 	.word	0x20003cac
 8002f94:	20003d94 	.word	0x20003d94
 8002f98:	20003cb8 	.word	0x20003cb8

08002f9c <vTaskDelay>:
	{
 8002f9c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f9e:	b940      	cbnz	r0, 8002fb2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <vTaskDelay+0x40>)
 8002fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <vTaskDelay+0x44>)
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	b141      	cbz	r1, 8002fca <vTaskDelay+0x2e>
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	e7fe      	b.n	8002fc8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002fca:	f7ff fecf 	bl	8002d6c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fce:	f7ff fd2f 	bl	8002a30 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002fd2:	f7ff ff6b 	bl	8002eac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d0e2      	beq.n	8002fa0 <vTaskDelay+0x4>
 8002fda:	bd08      	pop	{r3, pc}
 8002fdc:	e000ed04 	.word	0xe000ed04
 8002fe0:	20003d54 	.word	0x20003d54

08002fe4 <prvIdleTask>:
{
 8002fe4:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002fe6:	4e17      	ldr	r6, [pc, #92]	; (8003044 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fe8:	4c17      	ldr	r4, [pc, #92]	; (8003048 <prvIdleTask+0x64>)
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	b963      	cbnz	r3, 8003008 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <prvIdleTask+0x68>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d9f8      	bls.n	8002fe8 <prvIdleTask+0x4>
				taskYIELD();
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <prvIdleTask+0x6c>)
 8002ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	e7ef      	b.n	8002fe8 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003008:	f7ff feb0 	bl	8002d6c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800300c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800300e:	f7ff ff4d 	bl	8002eac <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003012:	2d00      	cmp	r5, #0
 8003014:	d0e9      	beq.n	8002fea <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003016:	f7ff f885 	bl	8002124 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800301a:	68f3      	ldr	r3, [r6, #12]
 800301c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800301e:	1d28      	adds	r0, r5, #4
 8003020:	f7ff f815 	bl	800204e <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003024:	4a0b      	ldr	r2, [pc, #44]	; (8003054 <prvIdleTask+0x70>)
 8003026:	6813      	ldr	r3, [r2, #0]
 8003028:	3b01      	subs	r3, #1
 800302a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	3b01      	subs	r3, #1
 8003030:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8003032:	f7ff f899 	bl	8002168 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003036:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003038:	f7ff fa2e 	bl	8002498 <vPortFree>
			vPortFree( pxTCB );
 800303c:	4628      	mov	r0, r5
 800303e:	f7ff fa2b 	bl	8002498 <vPortFree>
 8003042:	e7d2      	b.n	8002fea <prvIdleTask+0x6>
 8003044:	20003dc0 	.word	0x20003dc0
 8003048:	20003d4c 	.word	0x20003d4c
 800304c:	20003cb8 	.word	0x20003cb8
 8003050:	e000ed04 	.word	0xe000ed04
 8003054:	20003d48 	.word	0x20003d48

08003058 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <vTaskSwitchContext+0x78>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <vTaskSwitchContext+0x7c>)
{
 800305e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003060:	b112      	cbz	r2, 8003068 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003062:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003068:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800306a:	f000 fbdb 	bl	8003824 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800306e:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <vTaskSwitchContext+0x80>)
 8003070:	6814      	ldr	r4, [r2, #0]
 8003072:	42a0      	cmp	r0, r4
 8003074:	d905      	bls.n	8003082 <vTaskSwitchContext+0x2a>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <vTaskSwitchContext+0x84>)
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800307c:	1b1b      	subs	r3, r3, r4
 800307e:	4403      	add	r3, r0
 8003080:	654b      	str	r3, [r1, #84]	; 0x54
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <vTaskSwitchContext+0x88>)
				ulTaskSwitchedInTime = ulTotalRunTime;
 8003084:	6010      	str	r0, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003086:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f1c3 031f 	rsb	r3, r3, #31
 8003092:	2214      	movs	r2, #20
 8003094:	4913      	ldr	r1, [pc, #76]	; (80030e4 <vTaskSwitchContext+0x8c>)
 8003096:	435a      	muls	r2, r3
 8003098:	1888      	adds	r0, r1, r2
 800309a:	588c      	ldr	r4, [r1, r2]
 800309c:	b944      	cbnz	r4, 80030b0 <vTaskSwitchContext+0x58>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	e7fe      	b.n	80030ae <vTaskSwitchContext+0x56>
 80030b0:	6844      	ldr	r4, [r0, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	6864      	ldr	r4, [r4, #4]
 80030b6:	6044      	str	r4, [r0, #4]
 80030b8:	440a      	add	r2, r1
 80030ba:	4294      	cmp	r4, r2
 80030bc:	bf04      	itt	eq
 80030be:	6862      	ldreq	r2, [r4, #4]
 80030c0:	6042      	streq	r2, [r0, #4]
 80030c2:	2214      	movs	r2, #20
 80030c4:	fb02 1303 	mla	r3, r2, r3, r1
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <vTaskSwitchContext+0x84>)
 80030ce:	e7c9      	b.n	8003064 <vTaskSwitchContext+0xc>
 80030d0:	20003d54 	.word	0x20003d54
 80030d4:	20003dd8 	.word	0x20003dd8
 80030d8:	20003d44 	.word	0x20003d44
 80030dc:	20003cac 	.word	0x20003cac
 80030e0:	20003d5c 	.word	0x20003d5c
 80030e4:	20003cb8 	.word	0x20003cb8

080030e8 <vTaskSuspend>:
	{
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	4604      	mov	r4, r0
 80030ec:	4e29      	ldr	r6, [pc, #164]	; (8003194 <vTaskSuspend+0xac>)
		taskENTER_CRITICAL();
 80030ee:	f7ff f819 	bl	8002124 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80030f2:	b904      	cbnz	r4, 80030f6 <vTaskSuspend+0xe>
 80030f4:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030f6:	1d25      	adds	r5, r4, #4
 80030f8:	4628      	mov	r0, r5
 80030fa:	f7fe ffa8 	bl	800204e <uxListRemove>
 80030fe:	b960      	cbnz	r0, 800311a <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003100:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <vTaskSuspend+0xb0>)
 8003104:	2114      	movs	r1, #20
 8003106:	4341      	muls	r1, r0
 8003108:	585b      	ldr	r3, [r3, r1]
 800310a:	b933      	cbnz	r3, 800311a <vTaskSuspend+0x32>
 800310c:	4923      	ldr	r1, [pc, #140]	; (800319c <vTaskSuspend+0xb4>)
 800310e:	2201      	movs	r2, #1
 8003110:	680b      	ldr	r3, [r1, #0]
 8003112:	4082      	lsls	r2, r0
 8003114:	ea23 0302 	bic.w	r3, r3, r2
 8003118:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800311a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800311c:	b11b      	cbz	r3, 8003126 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800311e:	f104 0018 	add.w	r0, r4, #24
 8003122:	f7fe ff94 	bl	800204e <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003126:	4629      	mov	r1, r5
		if( xSchedulerRunning != pdFALSE )
 8003128:	4d1d      	ldr	r5, [pc, #116]	; (80031a0 <vTaskSuspend+0xb8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800312a:	481e      	ldr	r0, [pc, #120]	; (80031a4 <vTaskSuspend+0xbc>)
 800312c:	f7fe ff6c 	bl	8002008 <vListInsertEnd>
		taskEXIT_CRITICAL();
 8003130:	f7ff f81a 	bl	8002168 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003134:	682a      	ldr	r2, [r5, #0]
 8003136:	b12a      	cbz	r2, 8003144 <vTaskSuspend+0x5c>
			taskENTER_CRITICAL();
 8003138:	f7fe fff4 	bl	8002124 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 800313c:	f7ff fc66 	bl	8002a0c <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8003140:	f7ff f812 	bl	8002168 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8003144:	6833      	ldr	r3, [r6, #0]
 8003146:	429c      	cmp	r4, r3
 8003148:	d122      	bne.n	8003190 <vTaskSuspend+0xa8>
			if( xSchedulerRunning != pdFALSE )
 800314a:	682b      	ldr	r3, [r5, #0]
 800314c:	b1a3      	cbz	r3, 8003178 <vTaskSuspend+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <vTaskSuspend+0xc0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	b143      	cbz	r3, 8003166 <vTaskSuspend+0x7e>
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	e7fe      	b.n	8003164 <vTaskSuspend+0x7c>
				portYIELD_WITHIN_API();
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <vTaskSuspend+0xc4>)
 8003168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003178:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <vTaskSuspend+0xc8>)
 800317a:	490a      	ldr	r1, [pc, #40]	; (80031a4 <vTaskSuspend+0xbc>)
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	6809      	ldr	r1, [r1, #0]
 8003180:	4291      	cmp	r1, r2
 8003182:	d101      	bne.n	8003188 <vTaskSuspend+0xa0>
					pxCurrentTCB = NULL;
 8003184:	6033      	str	r3, [r6, #0]
 8003186:	bd70      	pop	{r4, r5, r6, pc}
	}
 8003188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800318c:	f7ff bf64 	b.w	8003058 <vTaskSwitchContext>
 8003190:	bd70      	pop	{r4, r5, r6, pc}
 8003192:	bf00      	nop
 8003194:	20003cac 	.word	0x20003cac
 8003198:	20003cb8 	.word	0x20003cb8
 800319c:	20003d5c 	.word	0x20003d5c
 80031a0:	20003da8 	.word	0x20003da8
 80031a4:	20003dac 	.word	0x20003dac
 80031a8:	20003d54 	.word	0x20003d54
 80031ac:	e000ed04 	.word	0xe000ed04
 80031b0:	20003d48 	.word	0x20003d48

080031b4 <vTaskPlaceOnEventList>:
{
 80031b4:	b510      	push	{r4, lr}
 80031b6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80031b8:	b940      	cbnz	r0, 80031cc <vTaskPlaceOnEventList+0x18>
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	e7fe      	b.n	80031ca <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <vTaskPlaceOnEventList+0x30>)
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	3118      	adds	r1, #24
 80031d2:	f7fe ff25 	bl	8002020 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031d6:	4620      	mov	r0, r4
 80031d8:	2101      	movs	r1, #1
}
 80031da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031de:	f7ff bc27 	b.w	8002a30 <prvAddCurrentTaskToDelayedList>
 80031e2:	bf00      	nop
 80031e4:	20003cac 	.word	0x20003cac

080031e8 <xTaskRemoveFromEventList>:
{
 80031e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80031ea:	68c3      	ldr	r3, [r0, #12]
 80031ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80031ee:	b944      	cbnz	r4, 8003202 <xTaskRemoveFromEventList+0x1a>
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	e7fe      	b.n	8003200 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003202:	f104 0518 	add.w	r5, r4, #24
 8003206:	4628      	mov	r0, r5
 8003208:	f7fe ff21 	bl	800204e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <xTaskRemoveFromEventList+0x6c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	b9e3      	cbnz	r3, 800324c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003212:	1d25      	adds	r5, r4, #4
 8003214:	4628      	mov	r0, r5
 8003216:	f7fe ff1a 	bl	800204e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800321a:	490f      	ldr	r1, [pc, #60]	; (8003258 <xTaskRemoveFromEventList+0x70>)
 800321c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800321e:	6808      	ldr	r0, [r1, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	4093      	lsls	r3, r2
 8003224:	4303      	orrs	r3, r0
 8003226:	600b      	str	r3, [r1, #0]
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <xTaskRemoveFromEventList+0x74>)
 800322a:	2014      	movs	r0, #20
 800322c:	4629      	mov	r1, r5
 800322e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003232:	f7fe fee9 	bl	8002008 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003236:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <xTaskRemoveFromEventList+0x78>)
 8003238:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003240:	bf83      	ittte	hi
 8003242:	4b08      	ldrhi	r3, [pc, #32]	; (8003264 <xTaskRemoveFromEventList+0x7c>)
 8003244:	2001      	movhi	r0, #1
 8003246:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003248:	2000      	movls	r0, #0
}
 800324a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800324c:	4629      	mov	r1, r5
 800324e:	4806      	ldr	r0, [pc, #24]	; (8003268 <xTaskRemoveFromEventList+0x80>)
 8003250:	e7ef      	b.n	8003232 <xTaskRemoveFromEventList+0x4a>
 8003252:	bf00      	nop
 8003254:	20003d54 	.word	0x20003d54
 8003258:	20003d5c 	.word	0x20003d5c
 800325c:	20003cb8 	.word	0x20003cb8
 8003260:	20003cac 	.word	0x20003cac
 8003264:	20003dd8 	.word	0x20003dd8
 8003268:	20003d94 	.word	0x20003d94

0800326c <vTaskSetTimeOutState>:
{
 800326c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800326e:	b908      	cbnz	r0, 8003274 <vTaskSetTimeOutState+0x8>
 8003270:	f7ff fc24 	bl	8002abc <eTaskGetState.part.4>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <vTaskSetTimeOutState+0x18>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800327a:	4b03      	ldr	r3, [pc, #12]	; (8003288 <vTaskSetTimeOutState+0x1c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6043      	str	r3, [r0, #4]
 8003280:	bd08      	pop	{r3, pc}
 8003282:	bf00      	nop
 8003284:	20003d90 	.word	0x20003d90
 8003288:	20003dd4 	.word	0x20003dd4

0800328c <xTaskCheckForTimeOut>:
{
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8003290:	4604      	mov	r4, r0
 8003292:	b940      	cbnz	r0, 80032a6 <xTaskCheckForTimeOut+0x1a>
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	e7fe      	b.n	80032a4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80032a6:	b941      	cbnz	r1, 80032ba <xTaskCheckForTimeOut+0x2e>
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	e7fe      	b.n	80032b8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80032ba:	f7fe ff33 	bl	8002124 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <xTaskCheckForTimeOut+0x6c>)
 80032c0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80032c2:	682b      	ldr	r3, [r5, #0]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	d010      	beq.n	80032ea <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032c8:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <xTaskCheckForTimeOut+0x70>)
 80032ca:	6820      	ldr	r0, [r4, #0]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	4290      	cmp	r0, r2
 80032d0:	6862      	ldr	r2, [r4, #4]
 80032d2:	d001      	beq.n	80032d8 <xTaskCheckForTimeOut+0x4c>
 80032d4:	4291      	cmp	r1, r2
 80032d6:	d20d      	bcs.n	80032f4 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032d8:	1a88      	subs	r0, r1, r2
 80032da:	4283      	cmp	r3, r0
 80032dc:	d90a      	bls.n	80032f4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80032de:	1a5b      	subs	r3, r3, r1
 80032e0:	4413      	add	r3, r2
 80032e2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80032e4:	4620      	mov	r0, r4
 80032e6:	f7ff ffc1 	bl	800326c <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80032ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80032ec:	f7fe ff3c 	bl	8002168 <vPortExitCritical>
}
 80032f0:	4620      	mov	r0, r4
 80032f2:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80032f4:	2401      	movs	r4, #1
 80032f6:	e7f9      	b.n	80032ec <xTaskCheckForTimeOut+0x60>
 80032f8:	20003dd4 	.word	0x20003dd4
 80032fc:	20003d90 	.word	0x20003d90

08003300 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003300:	4b01      	ldr	r3, [pc, #4]	; (8003308 <vTaskMissedYield+0x8>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	4770      	bx	lr
 8003308:	20003dd8 	.word	0x20003dd8

0800330c <vTaskGetInfo>:
	{
 800330c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003310:	460c      	mov	r4, r1
 8003312:	4617      	mov	r7, r2
 8003314:	4698      	mov	r8, r3
		pxTCB = prvGetTCBFromHandle( xTask );
 8003316:	4606      	mov	r6, r0
 8003318:	bb58      	cbnz	r0, 8003372 <vTaskGetInfo+0x66>
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <vTaskGetInfo+0x7c>)
 800331c:	681d      	ldr	r5, [r3, #0]
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800331e:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8003320:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8003324:	6063      	str	r3, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003326:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003328:	6123      	str	r3, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800332a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800332c:	61e3      	str	r3, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800332e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003330:	60a3      	str	r3, [r4, #8]
			if( pxTaskStatus->eCurrentState == eSuspended )
 8003332:	7b23      	ldrb	r3, [r4, #12]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d107      	bne.n	8003348 <vTaskGetInfo+0x3c>
				vTaskSuspendAll();
 8003338:	f7ff fd18 	bl	8002d6c <vTaskSuspendAll>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800333c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800333e:	b10b      	cbz	r3, 8003344 <vTaskGetInfo+0x38>
						pxTaskStatus->eCurrentState = eBlocked;
 8003340:	2302      	movs	r3, #2
 8003342:	7323      	strb	r3, [r4, #12]
				xTaskResumeAll();
 8003344:	f7ff fdb2 	bl	8002eac <xTaskResumeAll>
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003348:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800334a:	6163      	str	r3, [r4, #20]
		if( eState != eInvalid )
 800334c:	f1b8 0f05 	cmp.w	r8, #5
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8003350:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003352:	61a3      	str	r3, [r4, #24]
		if( eState != eInvalid )
 8003354:	d00f      	beq.n	8003376 <vTaskGetInfo+0x6a>
			pxTaskStatus->eCurrentState = eState;
 8003356:	f884 800c 	strb.w	r8, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 800335a:	b18f      	cbz	r7, 8003380 <vTaskGetInfo+0x74>
 800335c:	6b29      	ldr	r1, [r5, #48]	; 0x30
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800335e:	460a      	mov	r2, r1
 8003360:	1a53      	subs	r3, r2, r1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003362:	f812 0b01 	ldrb.w	r0, [r2], #1
 8003366:	28a5      	cmp	r0, #165	; 0xa5
 8003368:	d0fa      	beq.n	8003360 <vTaskGetInfo+0x54>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800336a:	089b      	lsrs	r3, r3, #2
		return ( uint16_t ) ulCount;
 800336c:	8423      	strh	r3, [r4, #32]
 800336e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003372:	4605      	mov	r5, r0
 8003374:	e7d3      	b.n	800331e <vTaskGetInfo+0x12>
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 8003376:	4630      	mov	r0, r6
 8003378:	f7ff fc82 	bl	8002c80 <eTaskGetState>
 800337c:	7320      	strb	r0, [r4, #12]
 800337e:	e7ec      	b.n	800335a <vTaskGetInfo+0x4e>
			pxTaskStatus->usStackHighWaterMark = 0;
 8003380:	8427      	strh	r7, [r4, #32]
 8003382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003386:	bf00      	nop
 8003388:	20003cac 	.word	0x20003cac

0800338c <prvListTasksWithinSingleList>:
	{
 800338c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003390:	680d      	ldr	r5, [r1, #0]
	{
 8003392:	4681      	mov	r9, r0
 8003394:	460c      	mov	r4, r1
 8003396:	4693      	mov	fp, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003398:	b315      	cbz	r5, 80033e0 <prvListTasksWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800339a:	684b      	ldr	r3, [r1, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	f101 0708 	add.w	r7, r1, #8
 80033a4:	42bb      	cmp	r3, r7
 80033a6:	bf04      	itt	eq
 80033a8:	68cb      	ldreq	r3, [r1, #12]
 80033aa:	604b      	streq	r3, [r1, #4]
 80033ac:	684b      	ldr	r3, [r1, #4]
 80033ae:	f8d3 800c 	ldr.w	r8, [r3, #12]
	UBaseType_t uxTask = 0;
 80033b2:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80033b4:	f04f 0a24 	mov.w	sl, #36	; 0x24
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80033b8:	6863      	ldr	r3, [r4, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	6063      	str	r3, [r4, #4]
 80033be:	429f      	cmp	r7, r3
 80033c0:	bf04      	itt	eq
 80033c2:	68e3      	ldreq	r3, [r4, #12]
 80033c4:	6063      	streq	r3, [r4, #4]
 80033c6:	6863      	ldr	r3, [r4, #4]
 80033c8:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80033ca:	fb0a 9105 	mla	r1, sl, r5, r9
 80033ce:	465b      	mov	r3, fp
 80033d0:	2201      	movs	r2, #1
 80033d2:	4630      	mov	r0, r6
 80033d4:	f7ff ff9a 	bl	800330c <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 80033d8:	45b0      	cmp	r8, r6
				uxTask++;
 80033da:	f105 0501 	add.w	r5, r5, #1
			} while( pxNextTCB != pxFirstTCB );
 80033de:	d1eb      	bne.n	80033b8 <prvListTasksWithinSingleList+0x2c>
	}
 80033e0:	4628      	mov	r0, r5
 80033e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080033e8 <uxTaskGetSystemState>:
	{
 80033e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033ec:	4605      	mov	r5, r0
 80033ee:	4617      	mov	r7, r2
		vTaskSuspendAll();
 80033f0:	f7ff fcbc 	bl	8002d6c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <uxTaskGetSystemState+0x90>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	428b      	cmp	r3, r1
 80033fa:	d83a      	bhi.n	8003472 <uxTaskGetSystemState+0x8a>
 80033fc:	f04f 0800 	mov.w	r8, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003400:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800348c <uxTaskGetSystemState+0xa4>
 8003404:	4644      	mov	r4, r8
 8003406:	2624      	movs	r6, #36	; 0x24
 8003408:	f108 0178 	add.w	r1, r8, #120	; 0x78
 800340c:	fb06 5004 	mla	r0, r6, r4, r5
 8003410:	2201      	movs	r2, #1
 8003412:	4449      	add	r1, r9
 8003414:	f7ff ffba 	bl	800338c <prvListTasksWithinSingleList>
 8003418:	f1a8 0814 	sub.w	r8, r8, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800341c:	f118 0f8c 	cmn.w	r8, #140	; 0x8c
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003420:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003422:	d1f1      	bne.n	8003408 <uxTaskGetSystemState+0x20>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <uxTaskGetSystemState+0x94>)
 8003426:	2202      	movs	r2, #2
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	fb06 5004 	mla	r0, r6, r4, r5
 800342e:	f7ff ffad 	bl	800338c <prvListTasksWithinSingleList>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <uxTaskGetSystemState+0x98>)
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003434:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	2202      	movs	r2, #2
 800343a:	fb06 5004 	mla	r0, r6, r4, r5
 800343e:	f7ff ffa5 	bl	800338c <prvListTasksWithinSingleList>
 8003442:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003444:	2204      	movs	r2, #4
 8003446:	490f      	ldr	r1, [pc, #60]	; (8003484 <uxTaskGetSystemState+0x9c>)
 8003448:	fb06 5004 	mla	r0, r6, r4, r5
 800344c:	f7ff ff9e 	bl	800338c <prvListTasksWithinSingleList>
 8003450:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8003452:	fb06 5004 	mla	r0, r6, r4, r5
 8003456:	2203      	movs	r2, #3
 8003458:	490b      	ldr	r1, [pc, #44]	; (8003488 <uxTaskGetSystemState+0xa0>)
 800345a:	f7ff ff97 	bl	800338c <prvListTasksWithinSingleList>
 800345e:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8003460:	b117      	cbz	r7, 8003468 <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003462:	f000 f9df 	bl	8003824 <getRunTimeCounterValue>
 8003466:	6038      	str	r0, [r7, #0]
		( void ) xTaskResumeAll();
 8003468:	f7ff fd20 	bl	8002eac <xTaskResumeAll>
	}
 800346c:	4620      	mov	r0, r4
 800346e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003472:	2400      	movs	r4, #0
 8003474:	e7f8      	b.n	8003468 <uxTaskGetSystemState+0x80>
 8003476:	bf00      	nop
 8003478:	20003d48 	.word	0x20003d48
 800347c:	20003cb0 	.word	0x20003cb0
 8003480:	20003cb4 	.word	0x20003cb4
 8003484:	20003dc0 	.word	0x20003dc0
 8003488:	20003dac 	.word	0x20003dac
 800348c:	20003cb8 	.word	0x20003cb8

08003490 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 8003490:	b908      	cbnz	r0, 8003496 <uxTaskGetStackHighWaterMark+0x6>
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <uxTaskGetStackHighWaterMark+0x1c>)
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	6b02      	ldr	r2, [r0, #48]	; 0x30
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003498:	4613      	mov	r3, r2
 800349a:	1a98      	subs	r0, r3, r2
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800349c:	f813 1b01 	ldrb.w	r1, [r3], #1
 80034a0:	29a5      	cmp	r1, #165	; 0xa5
 80034a2:	d0fa      	beq.n	800349a <uxTaskGetStackHighWaterMark+0xa>
	}
 80034a4:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20003cac 	.word	0x20003cac

080034b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <xTaskGetSchedulerState+0x18>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	b133      	cbz	r3, 80034c4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <xTaskGetSchedulerState+0x1c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80034bc:	bf0c      	ite	eq
 80034be:	2002      	moveq	r0, #2
 80034c0:	2000      	movne	r0, #0
 80034c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034c4:	2001      	movs	r0, #1
	}
 80034c6:	4770      	bx	lr
 80034c8:	20003da8 	.word	0x20003da8
 80034cc:	20003d54 	.word	0x20003d54

080034d0 <vTaskPriorityInherit>:
	{
 80034d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80034d4:	4604      	mov	r4, r0
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d038      	beq.n	800354c <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80034da:	4d1d      	ldr	r5, [pc, #116]	; (8003550 <vTaskPriorityInherit+0x80>)
 80034dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80034de:	682a      	ldr	r2, [r5, #0]
 80034e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d232      	bcs.n	800354c <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034e6:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034e8:	4e1a      	ldr	r6, [pc, #104]	; (8003554 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034ea:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ec:	bfa1      	itttt	ge
 80034ee:	682a      	ldrge	r2, [r5, #0]
 80034f0:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80034f2:	f1c2 0207 	rsbge	r2, r2, #7
 80034f6:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034f8:	2714      	movs	r7, #20
 80034fa:	6942      	ldr	r2, [r0, #20]
 80034fc:	fb07 6303 	mla	r3, r7, r3, r6
 8003500:	429a      	cmp	r2, r3
 8003502:	d120      	bne.n	8003546 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003504:	f100 0804 	add.w	r8, r0, #4
 8003508:	4640      	mov	r0, r8
 800350a:	f7fe fda0 	bl	800204e <uxListRemove>
 800350e:	4a12      	ldr	r2, [pc, #72]	; (8003558 <vTaskPriorityInherit+0x88>)
 8003510:	b948      	cbnz	r0, 8003526 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003512:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003514:	4347      	muls	r7, r0
 8003516:	59f3      	ldr	r3, [r6, r7]
 8003518:	b92b      	cbnz	r3, 8003526 <vTaskPriorityInherit+0x56>
 800351a:	6813      	ldr	r3, [r2, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	4081      	lsls	r1, r0
 8003520:	ea23 0301 	bic.w	r3, r3, r1
 8003524:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003526:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8003528:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800352a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800352c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800352e:	2301      	movs	r3, #1
 8003530:	4083      	lsls	r3, r0
 8003532:	430b      	orrs	r3, r1
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	2314      	movs	r3, #20
 8003538:	4641      	mov	r1, r8
 800353a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800353e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003542:	f7fe bd61 	b.w	8002008 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800354c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003550:	20003cac 	.word	0x20003cac
 8003554:	20003cb8 	.word	0x20003cb8
 8003558:	20003d5c 	.word	0x20003d5c

0800355c <xTaskPriorityDisinherit>:
	{
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800355e:	4604      	mov	r4, r0
 8003560:	b908      	cbnz	r0, 8003566 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003562:	2000      	movs	r0, #0
 8003564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <xTaskPriorityDisinherit+0x94>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4298      	cmp	r0, r3
 800356c:	d008      	beq.n	8003580 <xTaskPriorityDisinherit+0x24>
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	e7fe      	b.n	800357e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003580:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003582:	b943      	cbnz	r3, 8003596 <xTaskPriorityDisinherit+0x3a>
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	e7fe      	b.n	8003594 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003596:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003598:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800359a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800359c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800359e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035a0:	d0df      	beq.n	8003562 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1dd      	bne.n	8003562 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035a6:	1d05      	adds	r5, r0, #4
 80035a8:	4628      	mov	r0, r5
 80035aa:	f7fe fd50 	bl	800204e <uxListRemove>
 80035ae:	4e11      	ldr	r6, [pc, #68]	; (80035f4 <xTaskPriorityDisinherit+0x98>)
 80035b0:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <xTaskPriorityDisinherit+0x9c>)
 80035b2:	b950      	cbnz	r0, 80035ca <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80035b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80035b6:	2114      	movs	r1, #20
 80035b8:	4379      	muls	r1, r7
 80035ba:	5873      	ldr	r3, [r6, r1]
 80035bc:	b92b      	cbnz	r3, 80035ca <xTaskPriorityDisinherit+0x6e>
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	2001      	movs	r0, #1
 80035c2:	40b8      	lsls	r0, r7
 80035c4:	ea23 0300 	bic.w	r3, r3, r0
 80035c8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80035cc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ce:	f1c3 0107 	rsb	r1, r3, #7
 80035d2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80035d4:	6811      	ldr	r1, [r2, #0]
 80035d6:	2401      	movs	r4, #1
 80035d8:	fa04 f003 	lsl.w	r0, r4, r3
 80035dc:	4308      	orrs	r0, r1
 80035de:	6010      	str	r0, [r2, #0]
 80035e0:	2014      	movs	r0, #20
 80035e2:	fb00 6003 	mla	r0, r0, r3, r6
 80035e6:	4629      	mov	r1, r5
 80035e8:	f7fe fd0e 	bl	8002008 <vListInsertEnd>
					xReturn = pdTRUE;
 80035ec:	4620      	mov	r0, r4
	}
 80035ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f0:	20003cac 	.word	0x20003cac
 80035f4:	20003cb8 	.word	0x20003cb8
 80035f8:	20003d5c 	.word	0x20003d5c

080035fc <vTaskGetRunTimeStats>:
	{
 80035fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <vTaskGetRunTimeStats+0xa4>)
	{
 8003602:	b085      	sub	sp, #20
		uxArraySize = uxCurrentNumberOfTasks;
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	9201      	str	r2, [sp, #4]
		*pcWriteBuffer = 0x00;
 8003608:	2700      	movs	r7, #0
 800360a:	7007      	strb	r7, [r0, #0]
	{
 800360c:	4605      	mov	r5, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	2424      	movs	r4, #36	; 0x24
 8003612:	4360      	muls	r0, r4
 8003614:	f7fe feb2 	bl	800237c <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8003618:	4606      	mov	r6, r0
 800361a:	b168      	cbz	r0, 8003638 <vTaskGetRunTimeStats+0x3c>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800361c:	aa03      	add	r2, sp, #12
 800361e:	9901      	ldr	r1, [sp, #4]
 8003620:	f7ff fee2 	bl	80033e8 <uxTaskGetSystemState>
			ulTotalTime /= 100UL;
 8003624:	9b03      	ldr	r3, [sp, #12]
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8003626:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 8003628:	2264      	movs	r2, #100	; 0x64
 800362a:	fbb3 f3f2 	udiv	r3, r3, r2
 800362e:	9303      	str	r3, [sp, #12]
			if( ulTotalTime > 0 )
 8003630:	b92b      	cbnz	r3, 800363e <vTaskGetRunTimeStats+0x42>
			vPortFree( pxTaskStatusArray );
 8003632:	4630      	mov	r0, r6
 8003634:	f7fe ff30 	bl	8002498 <vPortFree>
	}
 8003638:	b005      	add	sp, #20
 800363a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800363e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80036a4 <vTaskGetRunTimeStats+0xa8>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8003642:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80036a8 <vTaskGetRunTimeStats+0xac>
				for( x = 0; x < uxArraySize; x++ )
 8003646:	9702      	str	r7, [sp, #8]
 8003648:	9a02      	ldr	r2, [sp, #8]
 800364a:	9b01      	ldr	r3, [sp, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d2f0      	bcs.n	8003632 <vTaskGetRunTimeStats+0x36>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8003650:	9b02      	ldr	r3, [sp, #8]
 8003652:	fb04 6303 	mla	r3, r4, r3, r6
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8003656:	4628      	mov	r0, r5
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8003658:	699f      	ldr	r7, [r3, #24]
 800365a:	9b03      	ldr	r3, [sp, #12]
 800365c:	fbb7 f7f3 	udiv	r7, r7, r3
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8003660:	9b02      	ldr	r3, [sp, #8]
 8003662:	fb04 6303 	mla	r3, r4, r3, r6
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	f7ff f9be 	bl	80029e8 <prvWriteNameToBuffer>
 800366c:	4605      	mov	r5, r0
					if( ulStatsAsPercentage > 0UL )
 800366e:	b17f      	cbz	r7, 8003690 <vTaskGetRunTimeStats+0x94>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8003670:	9a02      	ldr	r2, [sp, #8]
 8003672:	fb04 6202 	mla	r2, r4, r2, r6
 8003676:	463b      	mov	r3, r7
 8003678:	6992      	ldr	r2, [r2, #24]
 800367a:	4649      	mov	r1, r9
 800367c:	f000 fd8c 	bl	8004198 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 8003680:	4628      	mov	r0, r5
 8003682:	f7fc fdc5 	bl	8000210 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 8003686:	9b02      	ldr	r3, [sp, #8]
 8003688:	3301      	adds	r3, #1
					pcWriteBuffer += strlen( pcWriteBuffer );
 800368a:	4405      	add	r5, r0
				for( x = 0; x < uxArraySize; x++ )
 800368c:	9302      	str	r3, [sp, #8]
 800368e:	e7db      	b.n	8003648 <vTaskGetRunTimeStats+0x4c>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8003690:	9b02      	ldr	r3, [sp, #8]
 8003692:	fb04 6303 	mla	r3, r4, r3, r6
 8003696:	4641      	mov	r1, r8
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	f000 fd7d 	bl	8004198 <siprintf>
 800369e:	e7ef      	b.n	8003680 <vTaskGetRunTimeStats+0x84>
 80036a0:	20003d48 	.word	0x20003d48
 80036a4:	08004a98 	.word	0x08004a98
 80036a8:	08004a8c 	.word	0x08004a8c

080036ac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <pvTaskIncrementMutexHeldCount+0x14>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	b11a      	cbz	r2, 80036ba <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80036b6:	3201      	adds	r2, #1
 80036b8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80036ba:	6818      	ldr	r0, [r3, #0]
	}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20003cac 	.word	0x20003cac

080036c4 <xTaskNotifyWait>:
	{
 80036c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80036c8:	4c1f      	ldr	r4, [pc, #124]	; (8003748 <xTaskNotifyWait+0x84>)
	{
 80036ca:	461e      	mov	r6, r3
 80036cc:	4680      	mov	r8, r0
 80036ce:	460f      	mov	r7, r1
 80036d0:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 80036d2:	f7fe fd27 	bl	8002124 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d014      	beq.n	800370a <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036e4:	ea22 0208 	bic.w	r2, r2, r8
 80036e8:	659a      	str	r2, [r3, #88]	; 0x58
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	2101      	movs	r1, #1
 80036ee:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
				if( xTicksToWait > ( TickType_t ) 0 )
 80036f2:	b156      	cbz	r6, 800370a <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036f4:	4630      	mov	r0, r6
 80036f6:	f7ff f99b 	bl	8002a30 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <xTaskNotifyWait+0x88>)
 80036fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800370a:	f7fe fd2d 	bl	8002168 <vPortExitCritical>
		taskENTER_CRITICAL();
 800370e:	f7fe fd09 	bl	8002124 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8003712:	b115      	cbz	r5, 800371a <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003720:	2b01      	cmp	r3, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003722:	bf1f      	itttt	ne
 8003724:	6823      	ldrne	r3, [r4, #0]
 8003726:	6d99      	ldrne	r1, [r3, #88]	; 0x58
 8003728:	43b9      	bicne	r1, r7
 800372a:	6599      	strne	r1, [r3, #88]	; 0x58
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 8003732:	bf14      	ite	ne
 8003734:	2501      	movne	r5, #1
				xReturn = pdFALSE;
 8003736:	2500      	moveq	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		taskEXIT_CRITICAL();
 800373c:	f7fe fd14 	bl	8002168 <vPortExitCritical>
	}
 8003740:	4628      	mov	r0, r5
 8003742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003746:	bf00      	nop
 8003748:	20003cac 	.word	0x20003cac
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <xTaskGenericNotify>:
	{
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	460f      	mov	r7, r1
 8003754:	4616      	mov	r6, r2
 8003756:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8003758:	4604      	mov	r4, r0
 800375a:	b940      	cbnz	r0, 800376e <xTaskGenericNotify+0x1e>
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	e7fe      	b.n	800376c <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 800376e:	f7fe fcd9 	bl	8002124 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8003772:	b10d      	cbz	r5, 8003778 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003774:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003776:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003778:	f894 505c 	ldrb.w	r5, [r4, #92]	; 0x5c
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800377c:	2302      	movs	r3, #2
			switch( eAction )
 800377e:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003780:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003782:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
			switch( eAction )
 8003786:	2a03      	cmp	r2, #3
 8003788:	d80a      	bhi.n	80037a0 <xTaskGenericNotify+0x50>
 800378a:	e8df f002 	tbb	[pc, r2]
 800378e:	0602      	.short	0x0602
 8003790:	1004      	.short	0x1004
					pxTCB->ulNotifiedValue |= ulValue;
 8003792:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003794:	430f      	orrs	r7, r1
						pxTCB->ulNotifiedValue = ulValue;
 8003796:	65a7      	str	r7, [r4, #88]	; 0x58
 8003798:	e002      	b.n	80037a0 <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 800379a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800379c:	3301      	adds	r3, #1
 800379e:	65a3      	str	r3, [r4, #88]	; 0x58
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80037a0:	2d01      	cmp	r5, #1
 80037a2:	d008      	beq.n	80037b6 <xTaskGenericNotify+0x66>
	{
 80037a4:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 80037a6:	f7fe fcdf 	bl	8002168 <vPortExitCritical>
	}
 80037aa:	4628      	mov	r0, r5
 80037ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80037ae:	2d02      	cmp	r5, #2
 80037b0:	d1f1      	bne.n	8003796 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 80037b2:	2500      	movs	r5, #0
 80037b4:	e7f7      	b.n	80037a6 <xTaskGenericNotify+0x56>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037b6:	1d26      	adds	r6, r4, #4
 80037b8:	4630      	mov	r0, r6
 80037ba:	f7fe fc48 	bl	800204e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80037be:	4914      	ldr	r1, [pc, #80]	; (8003810 <xTaskGenericNotify+0xc0>)
 80037c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037c2:	6808      	ldr	r0, [r1, #0]
 80037c4:	fa05 f302 	lsl.w	r3, r5, r2
 80037c8:	4303      	orrs	r3, r0
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <xTaskGenericNotify+0xc4>)
 80037ce:	2014      	movs	r0, #20
 80037d0:	fb00 3002 	mla	r0, r0, r2, r3
 80037d4:	4631      	mov	r1, r6
 80037d6:	f7fe fc17 	bl	8002008 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80037da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037dc:	b143      	cbz	r3, 80037f0 <xTaskGenericNotify+0xa0>
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	e7fe      	b.n	80037ee <xTaskGenericNotify+0x9e>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <xTaskGenericNotify+0xc8>)
 80037f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d9d3      	bls.n	80037a4 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <xTaskGenericNotify+0xcc>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	e7cb      	b.n	80037a6 <xTaskGenericNotify+0x56>
 800380e:	bf00      	nop
 8003810:	20003d5c 	.word	0x20003d5c
 8003814:	20003cb8 	.word	0x20003cb8
 8003818:	20003cac 	.word	0x20003cac
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003820:	4770      	bx	lr
	...

08003824 <getRunTimeCounterValue>:

extern TIM_HandleTypeDef htim4;
extern uint32_t tim4_ov_counter;
__weak unsigned long getRunTimeCounterValue(void)
{
	return ((tim4_ov_counter << 16) + (uint32_t)__HAL_TIM_GET_COUNTER(&htim4));
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <getRunTimeCounterValue+0x10>)
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <getRunTimeCounterValue+0x14>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6810      	ldr	r0, [r2, #0]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 800382e:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8003832:	4770      	bx	lr
 8003834:	20003df4 	.word	0x20003df4
 8003838:	20003ddc 	.word	0x20003ddc

0800383c <Thread_LED>:
/* USER CODE END Header_Thread_LED */
#define CAL_MAX 10
#define CAL_DIV 10

void Thread_LED(void const * argument)
{
 800383c:	b508      	push	{r3, lr}

  /* Infinite loop */

  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_G_PORT, LED_G_PIN);
 800383e:	4c05      	ldr	r4, [pc, #20]	; (8003854 <Thread_LED+0x18>)
 8003840:	4620      	mov	r0, r4
 8003842:	2120      	movs	r1, #32
 8003844:	f7fd fac7 	bl	8000dd6 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8003848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800384c:	f7fe fbb9 	bl	8001fc2 <osDelay>
 8003850:	e7f6      	b.n	8003840 <Thread_LED+0x4>
 8003852:	bf00      	nop
 8003854:	40020000 	.word	0x40020000

08003858 <Thread_UART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread_UART */
void Thread_UART(void const * argument)
{
 8003858:	b507      	push	{r0, r1, r2, lr}


  /* Infinite loop */
  for(;;)
  {
	  if((HAL_UART_Receive_IT(&huart2, Rx_data, 1))== HAL_OK)
 800385a:	4c13      	ldr	r4, [pc, #76]	; (80038a8 <Thread_UART+0x50>)
	  		{
	  			xTaskNotify(myTask05Handle, 0x01, eSetBits);
	  		}
	  		if ((Rx_data[0]=='t')||(Rx_data[0]=='T'))
	  		{
	  			xTaskNotify(myTask04Handle, 0x10, eSetBits);
 800385c:	4d13      	ldr	r5, [pc, #76]	; (80038ac <Thread_UART+0x54>)
	  if((HAL_UART_Receive_IT(&huart2, Rx_data, 1))== HAL_OK)
 800385e:	2201      	movs	r2, #1
 8003860:	a901      	add	r1, sp, #4
 8003862:	4620      	mov	r0, r4
 8003864:	f7fe fa88 	bl	8001d78 <HAL_UART_Receive_IT>
 8003868:	b9d0      	cbnz	r0, 80038a0 <Thread_UART+0x48>
	  		if ((Rx_data[0]=='h')||(Rx_data[0]=='H')||(Rx_data[0] == '?'))
 800386a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800386e:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8003872:	2a48      	cmp	r2, #72	; 0x48
 8003874:	d001      	beq.n	800387a <Thread_UART+0x22>
 8003876:	2b3f      	cmp	r3, #63	; 0x3f
 8003878:	d106      	bne.n	8003888 <Thread_UART+0x30>
	  			xTaskNotify(myTask05Handle, 0x01, eSetBits);
 800387a:	480d      	ldr	r0, [pc, #52]	; (80038b0 <Thread_UART+0x58>)
 800387c:	2201      	movs	r2, #1
 800387e:	2300      	movs	r3, #0
 8003880:	4611      	mov	r1, r2
 8003882:	6800      	ldr	r0, [r0, #0]
 8003884:	f7ff ff64 	bl	8003750 <xTaskGenericNotify>
	  		if ((Rx_data[0]=='t')||(Rx_data[0]=='T'))
 8003888:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800388c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003890:	2b54      	cmp	r3, #84	; 0x54
 8003892:	d105      	bne.n	80038a0 <Thread_UART+0x48>
	  			xTaskNotify(myTask04Handle, 0x10, eSetBits);
 8003894:	2300      	movs	r3, #0
 8003896:	2201      	movs	r2, #1
 8003898:	2110      	movs	r1, #16
 800389a:	6828      	ldr	r0, [r5, #0]
 800389c:	f7ff ff58 	bl	8003750 <xTaskGenericNotify>
	  		}
	  	  }

    osDelay(1);
 80038a0:	2001      	movs	r0, #1
 80038a2:	f7fe fb8e 	bl	8001fc2 <osDelay>
	  if((HAL_UART_Receive_IT(&huart2, Rx_data, 1))== HAL_OK)
 80038a6:	e7da      	b.n	800385e <Thread_UART+0x6>
 80038a8:	20003e90 	.word	0x20003e90
 80038ac:	20003e34 	.word	0x20003e34
 80038b0:	20003e30 	.word	0x20003e30

080038b4 <Thread_GPIO>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread_GPIO */
void Thread_GPIO(void const * argument)
{
 80038b4:	b58f      	push	{r0, r1, r2, r3, r7, lr}
  /* USER CODE BEGIN Thread_GPIO */
	uint8_t msg1[] = "Triggered!";
 80038b6:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <Thread_GPIO+0x6c>)

  /* Infinite loop */
  for(;;)
  {
	  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80038b8:	4e1a      	ldr	r6, [pc, #104]	; (8003924 <Thread_GPIO+0x70>)
	uint8_t msg1[] = "Triggered!";
 80038ba:	6851      	ldr	r1, [r2, #4]
 80038bc:	6810      	ldr	r0, [r2, #0]
	  	{
		 xTaskNotify(myTask06Handle, 0x10, eSetBits);
 80038be:	4f1a      	ldr	r7, [pc, #104]	; (8003928 <Thread_GPIO+0x74>)
		 vTaskSuspend(defaultTaskHandle);
 80038c0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003934 <Thread_GPIO+0x80>
	uint8_t msg1[] = "Triggered!";
 80038c4:	ab01      	add	r3, sp, #4
 80038c6:	c303      	stmia	r3!, {r0, r1}
 80038c8:	8911      	ldrh	r1, [r2, #8]
 80038ca:	7a92      	ldrb	r2, [r2, #10]
 80038cc:	8019      	strh	r1, [r3, #0]
 80038ce:	709a      	strb	r2, [r3, #2]
	  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80038d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038d4:	4630      	mov	r0, r6
 80038d6:	f7fd fa73 	bl	8000dc0 <HAL_GPIO_ReadPin>
 80038da:	4604      	mov	r4, r0
 80038dc:	b9e0      	cbnz	r0, 8003918 <Thread_GPIO+0x64>
		 xTaskNotify(myTask06Handle, 0x10, eSetBits);
 80038de:	4603      	mov	r3, r0
 80038e0:	2201      	movs	r2, #1
 80038e2:	2110      	movs	r1, #16
		 xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);
 80038e4:	4d11      	ldr	r5, [pc, #68]	; (800392c <Thread_GPIO+0x78>)
		 xTaskNotify(myTask06Handle, 0x10, eSetBits);
 80038e6:	6838      	ldr	r0, [r7, #0]
 80038e8:	f7ff ff32 	bl	8003750 <xTaskGenericNotify>
		 vTaskSuspend(defaultTaskHandle);
 80038ec:	f8d8 0000 	ldr.w	r0, [r8]
 80038f0:	f7ff fbfa 	bl	80030e8 <vTaskSuspend>
		 xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);
 80038f4:	4623      	mov	r3, r4
 80038f6:	f04f 32ff 	mov.w	r2, #4294967295
 80038fa:	4621      	mov	r1, r4
 80038fc:	6828      	ldr	r0, [r5, #0]
 80038fe:	f7fe ffaf 	bl	8002860 <xQueueGenericReceive>
	  	 HAL_UART_Transmit_IT(&huart2, msg1, 11);
 8003902:	220b      	movs	r2, #11
 8003904:	a901      	add	r1, sp, #4
 8003906:	480a      	ldr	r0, [pc, #40]	; (8003930 <Thread_GPIO+0x7c>)
 8003908:	f7fe fa17 	bl	8001d3a <HAL_UART_Transmit_IT>
	  	 xSemaphoreGive(Mutex_UARTHandle);
 800390c:	4623      	mov	r3, r4
 800390e:	4622      	mov	r2, r4
 8003910:	4621      	mov	r1, r4
 8003912:	6828      	ldr	r0, [r5, #0]
 8003914:	f7fe fedc 	bl	80026d0 <xQueueGenericSend>

	  	}
	    osDelay(175);
 8003918:	20af      	movs	r0, #175	; 0xaf
 800391a:	f7fe fb52 	bl	8001fc2 <osDelay>
	  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800391e:	e7d7      	b.n	80038d0 <Thread_GPIO+0x1c>
 8003920:	08004aa9 	.word	0x08004aa9
 8003924:	40020800 	.word	0x40020800
 8003928:	20003ed0 	.word	0x20003ed0
 800392c:	20003e8c 	.word	0x20003e8c
 8003930:	20003e90 	.word	0x20003e90
 8003934:	20003df0 	.word	0x20003df0

08003938 <Thread_Help>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread_Help */
void Thread_Help(void const * argument)
{
 8003938:	b500      	push	{lr}
 800393a:	b099      	sub	sp, #100	; 0x64
  /* USER CODE BEGIN Thread_Help */
    uint8_t msg_help[] = "This code monitors for blue/user button trigger, and reads ADC1 when asked with letter 't'";
 800393c:	225b      	movs	r2, #91	; 0x5b
 800393e:	4911      	ldr	r1, [pc, #68]	; (8003984 <Thread_Help+0x4c>)
  for(;;)
  {
	  xTaskNotifyWait(pdFALSE, 0xFF, &notifValueHelp, portMAX_DELAY);
	  if((notifValueHelp & 0x01)!= 0x00)
	  {
	  xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);
 8003940:	4c11      	ldr	r4, [pc, #68]	; (8003988 <Thread_Help+0x50>)
    uint8_t msg_help[] = "This code monitors for blue/user button trigger, and reads ADC1 when asked with letter 't'";
 8003942:	a801      	add	r0, sp, #4
 8003944:	f000 fc14 	bl	8004170 <memcpy>
	  xTaskNotifyWait(pdFALSE, 0xFF, &notifValueHelp, portMAX_DELAY);
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	466a      	mov	r2, sp
 800394e:	21ff      	movs	r1, #255	; 0xff
 8003950:	2000      	movs	r0, #0
 8003952:	f7ff feb7 	bl	80036c4 <xTaskNotifyWait>
	  if((notifValueHelp & 0x01)!= 0x00)
 8003956:	9b00      	ldr	r3, [sp, #0]
 8003958:	07db      	lsls	r3, r3, #31
 800395a:	d5f5      	bpl.n	8003948 <Thread_Help+0x10>
	  xSemaphoreTake(Mutex_UARTHandle, portMAX_DELAY);
 800395c:	2300      	movs	r3, #0
 800395e:	4619      	mov	r1, r3
 8003960:	f04f 32ff 	mov.w	r2, #4294967295
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	f7fe ff7b 	bl	8002860 <xQueueGenericReceive>
	  HAL_UART_Transmit_IT(&huart2, msg_help,91);
 800396a:	a901      	add	r1, sp, #4
 800396c:	225b      	movs	r2, #91	; 0x5b
 800396e:	4807      	ldr	r0, [pc, #28]	; (800398c <Thread_Help+0x54>)
 8003970:	f7fe f9e3 	bl	8001d3a <HAL_UART_Transmit_IT>
	  xSemaphoreGive(Mutex_UARTHandle);
 8003974:	2300      	movs	r3, #0
 8003976:	461a      	mov	r2, r3
 8003978:	4619      	mov	r1, r3
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	f7fe fea8 	bl	80026d0 <xQueueGenericSend>
 8003980:	e7e2      	b.n	8003948 <Thread_Help+0x10>
 8003982:	bf00      	nop
 8003984:	08004ab4 	.word	0x08004ab4
 8003988:	20003e8c 	.word	0x20003e8c
 800398c:	20003e90 	.word	0x20003e90

08003990 <Thread_ADC>:
{
 8003990:	b507      	push	{r0, r1, r2, lr}
	HAL_ADC_Start_IT(&hadc1);
 8003992:	4c07      	ldr	r4, [pc, #28]	; (80039b0 <Thread_ADC+0x20>)
	xTaskNotifyWait(pdFALSE, 0xFF, &notifValueADC, portMAX_DELAY);
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	aa01      	add	r2, sp, #4
 800399a:	21ff      	movs	r1, #255	; 0xff
 800399c:	2000      	movs	r0, #0
 800399e:	f7ff fe91 	bl	80036c4 <xTaskNotifyWait>
	if((notifValueADC & 0x10)!= 0x00)
 80039a2:	9b01      	ldr	r3, [sp, #4]
 80039a4:	06db      	lsls	r3, r3, #27
 80039a6:	d5f5      	bpl.n	8003994 <Thread_ADC+0x4>
	HAL_ADC_Start_IT(&hadc1);
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7fc ff31 	bl	8000810 <HAL_ADC_Start_IT>
 80039ae:	e7f1      	b.n	8003994 <Thread_ADC+0x4>
 80039b0:	20003e38 	.word	0x20003e38

080039b4 <Thread_GPIO_Trig>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread_GPIO_Trig */
void Thread_GPIO_Trig(void const * argument)
{
 80039b4:	b513      	push	{r0, r1, r4, lr}
	const TickType_t xDelay = 500 / portTICK_PERIOD_MS;

  /* Infinite loop */
  for(;;)
  {
	  xTaskNotifyWait(pdFALSE, 0xFF, &notifValueTrig, portMAX_DELAY);
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ba:	aa01      	add	r2, sp, #4
 80039bc:	21ff      	movs	r1, #255	; 0xff
 80039be:	2000      	movs	r0, #0
 80039c0:	f7ff fe80 	bl	80036c4 <xTaskNotifyWait>
	  if((notifValueTrig & 0x10)!= 0x00){
 80039c4:	9b01      	ldr	r3, [sp, #4]
 80039c6:	06db      	lsls	r3, r3, #27
 80039c8:	d5f5      	bpl.n	80039b6 <Thread_GPIO_Trig+0x2>
		  while(1){
		  HAL_GPIO_TogglePin(LED_G_PORT, LED_G_PIN);
 80039ca:	4c05      	ldr	r4, [pc, #20]	; (80039e0 <Thread_GPIO_Trig+0x2c>)
 80039cc:	4620      	mov	r0, r4
 80039ce:	2120      	movs	r1, #32
 80039d0:	f7fd fa01 	bl	8000dd6 <HAL_GPIO_TogglePin>
		  vTaskDelay( xDelay );
 80039d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039d8:	f7ff fae0 	bl	8002f9c <vTaskDelay>
 80039dc:	e7f6      	b.n	80039cc <Thread_GPIO_Trig+0x18>
 80039de:	bf00      	nop
 80039e0:	40020000 	.word	0x40020000

080039e4 <Thread_StartStats>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread_StartStats */
void Thread_StartStats(void const * argument)
{
 80039e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  for(;;)
	  {
		  {
		  		    vTaskDelay(1000);	    //
		  		    vTaskGetRunTimeStats((char*) ps_buffer );
		  		 sprintf((char*)msg_buffer, "Time: %s \n\r", ps_buffer);
 80039e8:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8003acc <Thread_StartStats+0xe8>
		  			t5stack = uxTaskGetStackHighWaterMark(myTask05Handle);
		  			t6stack = uxTaskGetStackHighWaterMark(myTask06Handle);
		  			t7stack = uxTaskGetStackHighWaterMark(myTask07Handle);
		  			sprintf((char*)msg_buffer, "Stack High Mark: T_default=%ld,T_2=%ld, T_3=%ld, T_4=%ld  T_5=%ld  T_6=%ld  T_7=%ld\n\r", dstack, t2stack, t3stack,t4stack, t5stack, t6stack, t7stack);
		  			pTxBuff = msg_buffer;
		  		HAL_UART_Transmit(&huart2, pTxBuff, strlen((const char*)pTxBuff),1000);
 80039ec:	4c2d      	ldr	r4, [pc, #180]	; (8003aa4 <Thread_StartStats+0xc0>)
{
 80039ee:	b0c3      	sub	sp, #268	; 0x10c
		  		    vTaskDelay(1000);	    //
 80039f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039f4:	f7ff fad2 	bl	8002f9c <vTaskDelay>
		  		    vTaskGetRunTimeStats((char*) ps_buffer );
 80039f8:	a81a      	add	r0, sp, #104	; 0x68
 80039fa:	f7ff fdff 	bl	80035fc <vTaskGetRunTimeStats>
		  		 sprintf((char*)msg_buffer, "Time: %s \n\r", ps_buffer);
 80039fe:	aa1a      	add	r2, sp, #104	; 0x68
 8003a00:	4659      	mov	r1, fp
 8003a02:	a806      	add	r0, sp, #24
 8003a04:	f000 fbc8 	bl	8004198 <siprintf>
		  			dstack = uxTaskGetStackHighWaterMark(defaultTaskHandle);
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <Thread_StartStats+0xc4>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	f7ff fd40 	bl	8003490 <uxTaskGetStackHighWaterMark>
		  			t2stack = uxTaskGetStackHighWaterMark(myTask02Handle);
 8003a10:	4b26      	ldr	r3, [pc, #152]	; (8003aac <Thread_StartStats+0xc8>)
		  			dstack = uxTaskGetStackHighWaterMark(defaultTaskHandle);
 8003a12:	4605      	mov	r5, r0
		  			t2stack = uxTaskGetStackHighWaterMark(myTask02Handle);
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	f7ff fd3b 	bl	8003490 <uxTaskGetStackHighWaterMark>
		  			t3stack = uxTaskGetStackHighWaterMark(myTask03Handle);
 8003a1a:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <Thread_StartStats+0xcc>)
		  			t2stack = uxTaskGetStackHighWaterMark(myTask02Handle);
 8003a1c:	4606      	mov	r6, r0
		  			t3stack = uxTaskGetStackHighWaterMark(myTask03Handle);
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	f7ff fd36 	bl	8003490 <uxTaskGetStackHighWaterMark>
		  			t4stack = uxTaskGetStackHighWaterMark(myTask04Handle);
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <Thread_StartStats+0xd0>)
		  			t3stack = uxTaskGetStackHighWaterMark(myTask03Handle);
 8003a26:	4607      	mov	r7, r0
		  			t4stack = uxTaskGetStackHighWaterMark(myTask04Handle);
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	f7ff fd31 	bl	8003490 <uxTaskGetStackHighWaterMark>
		  			t5stack = uxTaskGetStackHighWaterMark(myTask05Handle);
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <Thread_StartStats+0xd4>)
		  			t4stack = uxTaskGetStackHighWaterMark(myTask04Handle);
 8003a30:	4680      	mov	r8, r0
		  			t5stack = uxTaskGetStackHighWaterMark(myTask05Handle);
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	f7ff fd2c 	bl	8003490 <uxTaskGetStackHighWaterMark>
		  			t6stack = uxTaskGetStackHighWaterMark(myTask06Handle);
 8003a38:	4b20      	ldr	r3, [pc, #128]	; (8003abc <Thread_StartStats+0xd8>)
		  			t5stack = uxTaskGetStackHighWaterMark(myTask05Handle);
 8003a3a:	4681      	mov	r9, r0
		  			t6stack = uxTaskGetStackHighWaterMark(myTask06Handle);
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f7ff fd27 	bl	8003490 <uxTaskGetStackHighWaterMark>
		  			t7stack = uxTaskGetStackHighWaterMark(myTask07Handle);
 8003a42:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <Thread_StartStats+0xdc>)
		  			t6stack = uxTaskGetStackHighWaterMark(myTask06Handle);
 8003a44:	4682      	mov	sl, r0
		  			t7stack = uxTaskGetStackHighWaterMark(myTask07Handle);
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	f7ff fd22 	bl	8003490 <uxTaskGetStackHighWaterMark>
		  			sprintf((char*)msg_buffer, "Stack High Mark: T_default=%ld,T_2=%ld, T_3=%ld, T_4=%ld  T_5=%ld  T_6=%ld  T_7=%ld\n\r", dstack, t2stack, t3stack,t4stack, t5stack, t6stack, t7stack);
 8003a4c:	4633      	mov	r3, r6
 8003a4e:	462a      	mov	r2, r5
 8003a50:	9004      	str	r0, [sp, #16]
 8003a52:	491c      	ldr	r1, [pc, #112]	; (8003ac4 <Thread_StartStats+0xe0>)
 8003a54:	e88d 0780 	stmia.w	sp, {r7, r8, r9, sl}
 8003a58:	a806      	add	r0, sp, #24
 8003a5a:	f000 fb9d 	bl	8004198 <siprintf>
		  		HAL_UART_Transmit(&huart2, pTxBuff, strlen((const char*)pTxBuff),1000);
 8003a5e:	a806      	add	r0, sp, #24
 8003a60:	f7fc fbd6 	bl	8000210 <strlen>
 8003a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a68:	b282      	uxth	r2, r0
 8003a6a:	a906      	add	r1, sp, #24
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7fe f907 	bl	8001c80 <HAL_UART_Transmit>
		  		  TickType_t FinalTicks1=xTaskGetTickCount( );
 8003a72:	f7ff f983 	bl	8002d7c <xTaskGetTickCount>
		  		sprintf((char*)msg_buffer, "Total_Ticks: =%ld\n\r", FinalTicks1);
 8003a76:	4914      	ldr	r1, [pc, #80]	; (8003ac8 <Thread_StartStats+0xe4>)
 8003a78:	4602      	mov	r2, r0
 8003a7a:	a806      	add	r0, sp, #24
 8003a7c:	f000 fb8c 	bl	8004198 <siprintf>
		  		vTaskDelay(1000);
 8003a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a84:	f7ff fa8a 	bl	8002f9c <vTaskDelay>
		  		pTxBuff = msg_buffer;
		  		HAL_UART_Transmit(&huart2, pTxBuff, strlen((const char*)pTxBuff),1000);
 8003a88:	a806      	add	r0, sp, #24
 8003a8a:	f7fc fbc1 	bl	8000210 <strlen>
 8003a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a92:	b282      	uxth	r2, r0
 8003a94:	a906      	add	r1, sp, #24
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7fe f8f2 	bl	8001c80 <HAL_UART_Transmit>
		  		  }
		  osDelay(1);
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	f7fe fa90 	bl	8001fc2 <osDelay>
 8003aa2:	e7a5      	b.n	80039f0 <Thread_StartStats+0xc>
 8003aa4:	20003e90 	.word	0x20003e90
 8003aa8:	20003df0 	.word	0x20003df0
 8003aac:	20003e80 	.word	0x20003e80
 8003ab0:	20003e84 	.word	0x20003e84
 8003ab4:	20003e34 	.word	0x20003e34
 8003ab8:	20003e30 	.word	0x20003e30
 8003abc:	20003ed0 	.word	0x20003ed0
 8003ac0:	20003e88 	.word	0x20003e88
 8003ac4:	08004b1b 	.word	0x08004b1b
 8003ac8:	08004b71 	.word	0x08004b71
 8003acc:	08004b0f 	.word	0x08004b0f

08003ad0 <SystemClock_Config>:
{
 8003ad0:	b530      	push	{r4, r5, lr}
 8003ad2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ad4:	2234      	movs	r2, #52	; 0x34
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	a807      	add	r0, sp, #28
 8003ada:	f000 fb54 	bl	8004186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ade:	2100      	movs	r1, #0
 8003ae0:	2214      	movs	r2, #20
 8003ae2:	a802      	add	r0, sp, #8
 8003ae4:	f000 fb4f 	bl	8004186 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae8:	2500      	movs	r5, #0
 8003aea:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <SystemClock_Config+0x8c>)
 8003aec:	9500      	str	r5, [sp, #0]
 8003aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003b02:	9501      	str	r5, [sp, #4]
 8003b04:	6813      	ldr	r3, [r2, #0]
 8003b06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b12:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b20:	2310      	movs	r3, #16
 8003b22:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003b24:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003b26:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b2a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003b2c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b2e:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003b30:	2304      	movs	r3, #4
 8003b32:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b34:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b36:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b38:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b3a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b3c:	f7fd fa70 	bl	8001020 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b40:	230f      	movs	r3, #15
 8003b42:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b44:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b4a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b4c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b4e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b50:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b52:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b54:	f7fd f944 	bl	8000de0 <HAL_RCC_ClockConfig>
}
 8003b58:	b015      	add	sp, #84	; 0x54
 8003b5a:	bd30      	pop	{r4, r5, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40007000 	.word	0x40007000

08003b64 <main>:
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b0aa      	sub	sp, #168	; 0xa8
  HAL_Init();
 8003b68:	f7fc fd32 	bl	80005d0 <HAL_Init>
  SystemClock_Config();
 8003b6c:	f7ff ffb0 	bl	8003ad0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b70:	2214      	movs	r2, #20
 8003b72:	2100      	movs	r1, #0
 8003b74:	a823      	add	r0, sp, #140	; 0x8c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b76:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	f000 fb05 	bl	8004186 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b7c:	4b8f      	ldr	r3, [pc, #572]	; (8003dbc <main+0x258>)
 8003b7e:	9401      	str	r4, [sp, #4]
 8003b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003b82:	488f      	ldr	r0, [pc, #572]	; (8003dc0 <main+0x25c>)
  hadc1.Instance = ADC1;
 8003b84:	4d8f      	ldr	r5, [pc, #572]	; (8003dc4 <main+0x260>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b86:	f042 0204 	orr.w	r2, r2, #4
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8e:	f002 0204 	and.w	r2, r2, #4
 8003b92:	9201      	str	r2, [sp, #4]
 8003b94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b96:	9402      	str	r4, [sp, #8]
 8003b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003ba6:	9202      	str	r2, [sp, #8]
 8003ba8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	9403      	str	r4, [sp, #12]
 8003bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb6:	f002 0201 	and.w	r2, r2, #1
 8003bba:	9203      	str	r2, [sp, #12]
 8003bbc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbe:	9404      	str	r4, [sp, #16]
 8003bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc2:	f042 0202 	orr.w	r2, r2, #2
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003bce:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003bd2:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003bd6:	f7fd f8f9 	bl	8000dcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8003bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bde:	9323      	str	r3, [sp, #140]	; 0x8c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003be0:	a923      	add	r1, sp, #140	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003be2:	4b79      	ldr	r3, [pc, #484]	; (8003dc8 <main+0x264>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003be4:	4879      	ldr	r0, [pc, #484]	; (8003dcc <main+0x268>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003be6:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be8:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003bec:	f7fd f80e 	bl	8000c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8003bf0:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003bf2:	a923      	add	r1, sp, #140	; 0x8c
 8003bf4:	4872      	ldr	r0, [pc, #456]	; (8003dc0 <main+0x25c>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8003bf6:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf8:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfc:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003bfe:	f7fd f805 	bl	8000c0c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8003c02:	4873      	ldr	r0, [pc, #460]	; (8003dd0 <main+0x26c>)
  huart2.Init.BaudRate = 115200;
 8003c04:	4a73      	ldr	r2, [pc, #460]	; (8003dd4 <main+0x270>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c06:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8003c08:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003c0c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c10:	230c      	movs	r3, #12
 8003c12:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c14:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c16:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c18:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c1a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c1c:	f7fe f802 	bl	8001c24 <HAL_UART_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8003c20:	4632      	mov	r2, r6
 8003c22:	4621      	mov	r1, r4
 8003c24:	2026      	movs	r0, #38	; 0x26
 8003c26:	f7fc ff9f 	bl	8000b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c2a:	2026      	movs	r0, #38	; 0x26
 8003c2c:	f7fc ffd0 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c30:	2210      	movs	r2, #16
 8003c32:	4621      	mov	r1, r4
 8003c34:	a823      	add	r0, sp, #140	; 0x8c
 8003c36:	f000 faa6 	bl	8004186 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003c3a:	4967      	ldr	r1, [pc, #412]	; (8003dd8 <main+0x274>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c3c:	61ae      	str	r6, [r5, #24]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003c3e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003c42:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c46:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c48:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <main+0x278>)
 8003c4a:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 8003c4c:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c4e:	616e      	str	r6, [r5, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c50:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003c52:	612c      	str	r4, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c54:	622c      	str	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c56:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c58:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c5a:	632c      	str	r4, [r5, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c5c:	f7fc fce4 	bl	8000628 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003c60:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <main+0x27c>)
 8003c62:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c64:	a923      	add	r1, sp, #140	; 0x8c
 8003c66:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8003c68:	9624      	str	r6, [sp, #144]	; 0x90
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003c6a:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c6c:	f7fc fed0 	bl	8000a10 <HAL_ADC_ConfigChannel>
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003c70:	4622      	mov	r2, r4
 8003c72:	4621      	mov	r1, r4
 8003c74:	2012      	movs	r0, #18
 8003c76:	f7fc ff77 	bl	8000b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003c7a:	2012      	movs	r0, #18
 8003c7c:	f7fc ffa8 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c80:	2210      	movs	r2, #16
 8003c82:	4621      	mov	r1, r4
 8003c84:	a81e      	add	r0, sp, #120	; 0x78
 8003c86:	f000 fa7e 	bl	8004186 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c8a:	221c      	movs	r2, #28
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	a823      	add	r0, sp, #140	; 0x8c
  htim4.Instance = TIM4;
 8003c90:	4d54      	ldr	r5, [pc, #336]	; (8003de4 <main+0x280>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c92:	9419      	str	r4, [sp, #100]	; 0x64
 8003c94:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c96:	f000 fa76 	bl	8004186 <memset>
  htim4.Init.Prescaler = 83;
 8003c9a:	4853      	ldr	r0, [pc, #332]	; (8003de8 <main+0x284>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9c:	60ac      	str	r4, [r5, #8]
  htim4.Init.Prescaler = 83;
 8003c9e:	2353      	movs	r3, #83	; 0x53
 8003ca0:	e885 0009 	stmia.w	r5, {r0, r3}
  htim4.Init.Period = 65535;
 8003ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003ca8:	4628      	mov	r0, r5
  htim4.Init.Period = 65535;
 8003caa:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cac:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003cae:	f7fd fdb3 	bl	8001818 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003cb6:	a91e      	add	r1, sp, #120	; 0x78
 8003cb8:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cba:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003cbc:	f7fd fbe8 	bl	8001490 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f7fd fdc3 	bl	800184c <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cc6:	a919      	add	r1, sp, #100	; 0x64
 8003cc8:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cca:	9419      	str	r4, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ccc:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cce:	f7fd fe35 	bl	800193c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003cd2:	2330      	movs	r3, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	a923      	add	r1, sp, #140	; 0x8c
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003cd8:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cda:	4628      	mov	r0, r5
  sConfigOC.Pulse = 10;
 8003cdc:	230a      	movs	r3, #10
 8003cde:	9324      	str	r3, [sp, #144]	; 0x90
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ce0:	9425      	str	r4, [sp, #148]	; 0x94
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ce2:	9427      	str	r4, [sp, #156]	; 0x9c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ce4:	f7fd fdfc 	bl	80018e0 <HAL_TIM_OC_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f000 f91b 	bl	8003f24 <HAL_TIM_MspPostInit>
  	HAL_TIM_Base_Start(&htim4);
 8003cee:	4628      	mov	r0, r5
 8003cf0:	f7fd fbb5 	bl	800145e <HAL_TIM_Base_Start>
  osMutexDef(Mutex_UART);
 8003cf4:	a82a      	add	r0, sp, #168	; 0xa8
  osThreadDef(defaultTask, Thread_LED, osPriorityNormal, 0, 128);
 8003cf6:	4d3d      	ldr	r5, [pc, #244]	; (8003dec <main+0x288>)
  osMutexDef(Mutex_UART);
 8003cf8:	f840 4da8 	str.w	r4, [r0, #-168]!
  Mutex_UARTHandle = osMutexCreate(osMutex(Mutex_UART));
 8003cfc:	f7fe f969 	bl	8001fd2 <osMutexCreate>
 8003d00:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <main+0x28c>)
 8003d02:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, Thread_LED, osPriorityNormal, 0, 128);
 8003d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d06:	af05      	add	r7, sp, #20
 8003d08:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d0a:	462e      	mov	r6, r5
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003d0c:	4621      	mov	r1, r4
  osThreadDef(defaultTask, Thread_LED, osPriorityNormal, 0, 128);
 8003d0e:	f856 3b04 	ldr.w	r3, [r6], #4
 8003d12:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003d14:	a805      	add	r0, sp, #20
 8003d16:	f7fe f93c 	bl	8001f92 <osThreadCreate>
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <main+0x290>)
 8003d1c:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, Thread_UART, osPriorityIdle, 0, 128);
 8003d1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003d20:	af0a      	add	r7, sp, #40	; 0x28
 8003d22:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d24:	6833      	ldr	r3, [r6, #0]
 8003d26:	603b      	str	r3, [r7, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8003d28:	4621      	mov	r1, r4
 8003d2a:	a80a      	add	r0, sp, #40	; 0x28
 8003d2c:	f7fe f931 	bl	8001f92 <osThreadCreate>
 8003d30:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <main+0x294>)
  osThreadDef(myTask03, Thread_GPIO, osPriorityIdle, 0, 128);
 8003d32:	f105 0718 	add.w	r7, r5, #24
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8003d36:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask03, Thread_GPIO, osPriorityIdle, 0, 128);
 8003d38:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003d3a:	ae0f      	add	r6, sp, #60	; 0x3c
 8003d3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6033      	str	r3, [r6, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8003d42:	4621      	mov	r1, r4
 8003d44:	a80f      	add	r0, sp, #60	; 0x3c
 8003d46:	f7fe f924 	bl	8001f92 <osThreadCreate>
 8003d4a:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <main+0x298>)
  osThreadDef(myTask04, Thread_ADC, osPriorityIdle, 0, 128);
 8003d4c:	f105 072c 	add.w	r7, r5, #44	; 0x2c
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8003d50:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask04, Thread_ADC, osPriorityIdle, 0, 128);
 8003d52:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003d54:	ae14      	add	r6, sp, #80	; 0x50
 8003d56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6033      	str	r3, [r6, #0]
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	a814      	add	r0, sp, #80	; 0x50
 8003d60:	f7fe f917 	bl	8001f92 <osThreadCreate>
 8003d64:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <main+0x29c>)
  osThreadDef(myTask05, Thread_Help, osPriorityIdle, 0, 128);
 8003d66:	f105 0740 	add.w	r7, r5, #64	; 0x40
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8003d6a:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask05, Thread_Help, osPriorityIdle, 0, 128);
 8003d6c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003d6e:	ae19      	add	r6, sp, #100	; 0x64
 8003d70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6033      	str	r3, [r6, #0]
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8003d76:	4621      	mov	r1, r4
 8003d78:	a819      	add	r0, sp, #100	; 0x64
 8003d7a:	f7fe f90a 	bl	8001f92 <osThreadCreate>
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <main+0x2a0>)
  osThreadDef(myTask06, Thread_GPIO_Trig, osPriorityIdle, 0, 128);
 8003d80:	f105 0754 	add.w	r7, r5, #84	; 0x54
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8003d84:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask06, Thread_GPIO_Trig, osPriorityIdle, 0, 128);
 8003d86:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003d88:	ae1e      	add	r6, sp, #120	; 0x78
 8003d8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	6033      	str	r3, [r6, #0]
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8003d90:	4621      	mov	r1, r4
 8003d92:	a81e      	add	r0, sp, #120	; 0x78
 8003d94:	f7fe f8fd 	bl	8001f92 <osThreadCreate>
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <main+0x2a4>)
  osThreadDef(myTask07, Thread_StartStats, osPriorityIdle, 0, 260);
 8003d9a:	3568      	adds	r5, #104	; 0x68
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8003d9c:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask07, Thread_StartStats, osPriorityIdle, 0, 260);
 8003d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da0:	ae23      	add	r6, sp, #140	; 0x8c
 8003da2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	6033      	str	r3, [r6, #0]
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 8003da8:	4621      	mov	r1, r4
 8003daa:	a823      	add	r0, sp, #140	; 0x8c
 8003dac:	f7fe f8f1 	bl	8001f92 <osThreadCreate>
 8003db0:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <main+0x2a8>)
 8003db2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003db4:	f7fe f8e8 	bl	8001f88 <osKernelStart>
 8003db8:	e7fe      	b.n	8003db8 <main+0x254>
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	20003e38 	.word	0x20003e38
 8003dc8:	10210000 	.word	0x10210000
 8003dcc:	40020800 	.word	0x40020800
 8003dd0:	20003e90 	.word	0x20003e90
 8003dd4:	40004400 	.word	0x40004400
 8003dd8:	40012000 	.word	0x40012000
 8003ddc:	0f000001 	.word	0x0f000001
 8003de0:	10000012 	.word	0x10000012
 8003de4:	20003df4 	.word	0x20003df4
 8003de8:	40000800 	.word	0x40000800
 8003dec:	08004a00 	.word	0x08004a00
 8003df0:	20003e8c 	.word	0x20003e8c
 8003df4:	20003df0 	.word	0x20003df0
 8003df8:	20003e80 	.word	0x20003e80
 8003dfc:	20003e84 	.word	0x20003e84
 8003e00:	20003e34 	.word	0x20003e34
 8003e04:	20003e30 	.word	0x20003e30
 8003e08:	20003ed0 	.word	0x20003ed0
 8003e0c:	20003e88 	.word	0x20003e88

08003e10 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003e10:	6802      	ldr	r2, [r0, #0]
 8003e12:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d101      	bne.n	8003e1c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003e18:	f7fc bbf4 	b.w	8000604 <HAL_IncTick>
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40001000 	.word	0x40001000

08003e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e24:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_MspInit+0x40>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	9200      	str	r2, [sp, #0]
 8003e2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e2e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003e32:	6459      	str	r1, [r3, #68]	; 0x44
 8003e34:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e36:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003e3a:	9100      	str	r1, [sp, #0]
 8003e3c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	9201      	str	r2, [sp, #4]
 8003e40:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e42:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003e46:	6419      	str	r1, [r3, #64]	; 0x40
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e50:	210f      	movs	r1, #15
 8003e52:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e56:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e58:	f7fc fe86 	bl	8000b68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e5c:	b003      	add	sp, #12
 8003e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800

08003e68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e68:	b507      	push	{r0, r1, r2, lr}

  if(hadc->Instance==ADC1)
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_ADC_MspInit+0x38>)
 8003e6c:	6802      	ldr	r2, [r0, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d113      	bne.n	8003e9a <HAL_ADC_MspInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e72:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003e76:	2200      	movs	r2, #0
 8003e78:	9201      	str	r2, [sp, #4]
 8003e7a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e7c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003e80:	6459      	str	r1, [r3, #68]	; 0x44
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	9301      	str	r3, [sp, #4]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003e8a:	2012      	movs	r0, #18
 8003e8c:	2105      	movs	r1, #5
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e8e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003e90:	f7fc fe6a 	bl	8000b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003e94:	2012      	movs	r0, #18
 8003e96:	f7fc fe9b 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e9a:	b003      	add	sp, #12
 8003e9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ea0:	40012000 	.word	0x40012000

08003ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eaa:	2214      	movs	r2, #20
 8003eac:	2100      	movs	r1, #0
 8003eae:	a803      	add	r0, sp, #12
 8003eb0:	f000 f969 	bl	8004186 <memset>
  if(huart->Instance==USART2)
 8003eb4:	6822      	ldr	r2, [r4, #0]
 8003eb6:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_UART_MspInit+0x78>)
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d12c      	bne.n	8003f16 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ebc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	9401      	str	r4, [sp, #4]
 8003ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec6:	4816      	ldr	r0, [pc, #88]	; (8003f20 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ec8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
 8003ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003ed4:	9201      	str	r2, [sp, #4]
 8003ed6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed8:	9402      	str	r4, [sp, #8]
 8003eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	9302      	str	r3, [sp, #8]
 8003eea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003eec:	230c      	movs	r3, #12
 8003eee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003efc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003efe:	2307      	movs	r3, #7
 8003f00:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f02:	f7fc fe83 	bl	8000c0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003f06:	2026      	movs	r0, #38	; 0x26
 8003f08:	4622      	mov	r2, r4
 8003f0a:	2105      	movs	r1, #5
 8003f0c:	f7fc fe2c 	bl	8000b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f10:	2026      	movs	r0, #38	; 0x26
 8003f12:	f7fc fe5d 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f16:	b008      	add	sp, #32
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40004400 	.word	0x40004400
 8003f20:	40020000 	.word	0x40020000

08003f24 <HAL_TIM_MspPostInit>:
* @param huart: UART handle pointer
* @retval None
*/

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f24:	b510      	push	{r4, lr}
 8003f26:	4604      	mov	r4, r0
 8003f28:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2a:	2214      	movs	r2, #20
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	a801      	add	r0, sp, #4
 8003f30:	f000 f929 	bl	8004186 <memset>
  if(htim->Instance==TIM4)
 8003f34:	6822      	ldr	r2, [r4, #0]
 8003f36:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <HAL_TIM_MspPostInit+0x48>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d114      	bne.n	8003f66 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f42:	480c      	ldr	r0, [pc, #48]	; (8003f74 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f46:	f042 0202 	orr.w	r2, r2, #2
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f56:	2340      	movs	r3, #64	; 0x40
 8003f58:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f60:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f62:	f7fc fe53 	bl	8000c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003f66:	b006      	add	sp, #24
 8003f68:	bd10      	pop	{r4, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020400 	.word	0x40020400

08003f78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f78:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003f7a:	4601      	mov	r1, r0
{
 8003f7c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2036      	movs	r0, #54	; 0x36
 8003f82:	f7fc fdf1 	bl	8000b68 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003f86:	2036      	movs	r0, #54	; 0x36
 8003f88:	f7fc fe22 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003f8c:	2500      	movs	r5, #0
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_InitTick+0x6c>)
 8003f90:	9502      	str	r5, [sp, #8]
 8003f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003f94:	4c14      	ldr	r4, [pc, #80]	; (8003fe8 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003f96:	f042 0210 	orr.w	r2, r2, #16
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fa4:	a901      	add	r1, sp, #4
 8003fa6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003fa8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003faa:	f7fc ffd3 	bl	8000f54 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003fae:	f7fc ffb1 	bl	8000f14 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HAL_InitTick+0x74>)
 8003fb4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003fb6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003fba:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003fbc:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <HAL_InitTick+0x78>)
 8003fc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003fc4:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8003fc6:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003fc8:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8003fca:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fcc:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003fce:	f7fd fc23 	bl	8001818 <HAL_TIM_Base_Init>
 8003fd2:	b920      	cbnz	r0, 8003fde <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f7fd fa4f 	bl	8001478 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003fda:	b009      	add	sp, #36	; 0x24
 8003fdc:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8003fde:	2001      	movs	r0, #1
 8003fe0:	e7fb      	b.n	8003fda <HAL_InitTick+0x62>
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	20003ed4 	.word	0x20003ed4
 8003fec:	40001000 	.word	0x40001000
 8003ff0:	000f4240 	.word	0x000f4240

08003ff4 <NMI_Handler>:
 8003ff4:	4770      	bx	lr

08003ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ff6:	e7fe      	b.n	8003ff6 <HardFault_Handler>

08003ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ff8:	e7fe      	b.n	8003ff8 <MemManage_Handler>

08003ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ffa:	e7fe      	b.n	8003ffa <BusFault_Handler>

08003ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ffc:	e7fe      	b.n	8003ffc <UsageFault_Handler>

08003ffe <SysTick_Handler>:
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}
void SysTick_Handler(void)
{
 8003ffe:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004000:	f7fc fb00 	bl	8000604 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8004008:	f7fd bfe6 	b.w	8001fd8 <osSystickHandler>

0800400c <DebugMon_Handler>:
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800400c:	4770      	bx	lr
	...

08004010 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8004010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */
	char temp_str[15];
	uint32_t temp;
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004012:	480e      	ldr	r0, [pc, #56]	; (800404c <ADC_IRQHandler+0x3c>)
 8004014:	f7fc fc68 	bl	80008e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  if (HAL_OK == HAL_ADC_PollForConversion(&hadc1, 0))
 8004018:	2100      	movs	r1, #0
 800401a:	480c      	ldr	r0, [pc, #48]	; (800404c <ADC_IRQHandler+0x3c>)
 800401c:	f7fc fba8 	bl	8000770 <HAL_ADC_PollForConversion>
 8004020:	b980      	cbnz	r0, 8004044 <ADC_IRQHandler+0x34>
    {
    		// ADC ready
    		temp = HAL_ADC_GetValue(&hadc1);
 8004022:	480a      	ldr	r0, [pc, #40]	; (800404c <ADC_IRQHandler+0x3c>)
 8004024:	f7fc fc5a 	bl	80008dc <HAL_ADC_GetValue>
    		sprintf(temp_str, "T=%d", (int)temp);
 8004028:	4909      	ldr	r1, [pc, #36]	; (8004050 <ADC_IRQHandler+0x40>)
 800402a:	4602      	mov	r2, r0
 800402c:	4668      	mov	r0, sp
 800402e:	f000 f8b3 	bl	8004198 <siprintf>
    		HAL_UART_Transmit(&huart2, (uint8_t*)temp_str, strlen(temp_str),5);
 8004032:	4668      	mov	r0, sp
 8004034:	f7fc f8ec 	bl	8000210 <strlen>
 8004038:	2305      	movs	r3, #5
 800403a:	b282      	uxth	r2, r0
 800403c:	4669      	mov	r1, sp
 800403e:	4805      	ldr	r0, [pc, #20]	; (8004054 <ADC_IRQHandler+0x44>)
 8004040:	f7fd fe1e 	bl	8001c80 <HAL_UART_Transmit>
    }
  /* USER CODE END ADC_IRQn 1 */
}
 8004044:	b005      	add	sp, #20
 8004046:	f85d fb04 	ldr.w	pc, [sp], #4
 800404a:	bf00      	nop
 800404c:	20003e38 	.word	0x20003e38
 8004050:	08004bc7 	.word	0x08004bc7
 8004054:	20003e90 	.word	0x20003e90

08004058 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <USART2_IRQHandler+0x8>)
 800405a:	f7fd beed 	b.w	8001e38 <HAL_UART_IRQHandler>
 800405e:	bf00      	nop
 8004060:	20003e90 	.word	0x20003e90

08004064 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <TIM6_DAC_IRQHandler+0x8>)
 8004066:	f7fd bad0 	b.w	800160a <HAL_TIM_IRQHandler>
 800406a:	bf00      	nop
 800406c:	20003ed4 	.word	0x20003ed4

08004070 <TIM4_IRQHandler>:
}

void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
	tim4_ov_counter++;
 8004070:	4a03      	ldr	r2, [pc, #12]	; (8004080 <TIM4_IRQHandler+0x10>)
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004072:	4804      	ldr	r0, [pc, #16]	; (8004084 <TIM4_IRQHandler+0x14>)
	tim4_ov_counter++;
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	6013      	str	r3, [r2, #0]
  HAL_TIM_IRQHandler(&htim4);
 800407a:	f7fd bac6 	b.w	800160a <HAL_TIM_IRQHandler>
 800407e:	bf00      	nop
 8004080:	20003ddc 	.word	0x20003ddc
 8004084:	20003df4 	.word	0x20003df4

08004088 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004088:	490f      	ldr	r1, [pc, #60]	; (80040c8 <SystemInit+0x40>)
 800408a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800408e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <SystemInit+0x44>)
 8004098:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800409a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80040a2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80040aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80040b0:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <SystemInit+0x48>)
 80040b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040bc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040c2:	608b      	str	r3, [r1, #8]
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	e000ed00 	.word	0xe000ed00
 80040cc:	40023800 	.word	0x40023800
 80040d0:	24003010 	.word	0x24003010

080040d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80040d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800410c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80040d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80040da:	e003      	b.n	80040e4 <LoopCopyDataInit>

080040dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80040de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80040e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80040e2:	3104      	adds	r1, #4

080040e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80040e4:	480b      	ldr	r0, [pc, #44]	; (8004114 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80040e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80040ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80040ec:	d3f6      	bcc.n	80040dc <CopyDataInit>
  ldr  r2, =_sbss
 80040ee:	4a0b      	ldr	r2, [pc, #44]	; (800411c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80040f0:	e002      	b.n	80040f8 <LoopFillZerobss>

080040f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80040f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80040f4:	f842 3b04 	str.w	r3, [r2], #4

080040f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80040fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80040fc:	d3f9      	bcc.n	80040f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80040fe:	f7ff ffc3 	bl	8004088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004102:	f000 f811 	bl	8004128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004106:	f7ff fd2d 	bl	8003b64 <main>
  bx  lr    
 800410a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800410c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004110:	08004c28 	.word	0x08004c28
  ldr  r0, =_sdata
 8004114:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004118:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800411c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004120:	20003f14 	.word	0x20003f14

08004124 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004124:	e7fe      	b.n	8004124 <CAN1_RX0_IRQHandler>
	...

08004128 <__libc_init_array>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4e0d      	ldr	r6, [pc, #52]	; (8004160 <__libc_init_array+0x38>)
 800412c:	4c0d      	ldr	r4, [pc, #52]	; (8004164 <__libc_init_array+0x3c>)
 800412e:	1ba4      	subs	r4, r4, r6
 8004130:	10a4      	asrs	r4, r4, #2
 8004132:	2500      	movs	r5, #0
 8004134:	42a5      	cmp	r5, r4
 8004136:	d109      	bne.n	800414c <__libc_init_array+0x24>
 8004138:	4e0b      	ldr	r6, [pc, #44]	; (8004168 <__libc_init_array+0x40>)
 800413a:	4c0c      	ldr	r4, [pc, #48]	; (800416c <__libc_init_array+0x44>)
 800413c:	f000 fc54 	bl	80049e8 <_init>
 8004140:	1ba4      	subs	r4, r4, r6
 8004142:	10a4      	asrs	r4, r4, #2
 8004144:	2500      	movs	r5, #0
 8004146:	42a5      	cmp	r5, r4
 8004148:	d105      	bne.n	8004156 <__libc_init_array+0x2e>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004150:	4798      	blx	r3
 8004152:	3501      	adds	r5, #1
 8004154:	e7ee      	b.n	8004134 <__libc_init_array+0xc>
 8004156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800415a:	4798      	blx	r3
 800415c:	3501      	adds	r5, #1
 800415e:	e7f2      	b.n	8004146 <__libc_init_array+0x1e>
 8004160:	08004c20 	.word	0x08004c20
 8004164:	08004c20 	.word	0x08004c20
 8004168:	08004c20 	.word	0x08004c20
 800416c:	08004c24 	.word	0x08004c24

08004170 <memcpy>:
 8004170:	b510      	push	{r4, lr}
 8004172:	1e43      	subs	r3, r0, #1
 8004174:	440a      	add	r2, r1
 8004176:	4291      	cmp	r1, r2
 8004178:	d100      	bne.n	800417c <memcpy+0xc>
 800417a:	bd10      	pop	{r4, pc}
 800417c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004184:	e7f7      	b.n	8004176 <memcpy+0x6>

08004186 <memset>:
 8004186:	4402      	add	r2, r0
 8004188:	4603      	mov	r3, r0
 800418a:	4293      	cmp	r3, r2
 800418c:	d100      	bne.n	8004190 <memset+0xa>
 800418e:	4770      	bx	lr
 8004190:	f803 1b01 	strb.w	r1, [r3], #1
 8004194:	e7f9      	b.n	800418a <memset+0x4>
	...

08004198 <siprintf>:
 8004198:	b40e      	push	{r1, r2, r3}
 800419a:	b500      	push	{lr}
 800419c:	b09c      	sub	sp, #112	; 0x70
 800419e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80041a2:	ab1d      	add	r3, sp, #116	; 0x74
 80041a4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80041a8:	9002      	str	r0, [sp, #8]
 80041aa:	9006      	str	r0, [sp, #24]
 80041ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041b0:	480a      	ldr	r0, [pc, #40]	; (80041dc <siprintf+0x44>)
 80041b2:	9104      	str	r1, [sp, #16]
 80041b4:	9107      	str	r1, [sp, #28]
 80041b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80041be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80041c2:	6800      	ldr	r0, [r0, #0]
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	a902      	add	r1, sp, #8
 80041c8:	f000 f86e 	bl	80042a8 <_svfiprintf_r>
 80041cc:	9b02      	ldr	r3, [sp, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	b01c      	add	sp, #112	; 0x70
 80041d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041d8:	b003      	add	sp, #12
 80041da:	4770      	bx	lr
 80041dc:	2000000c 	.word	0x2000000c

080041e0 <strcpy>:
 80041e0:	4603      	mov	r3, r0
 80041e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041e6:	f803 2b01 	strb.w	r2, [r3], #1
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	d1f9      	bne.n	80041e2 <strcpy+0x2>
 80041ee:	4770      	bx	lr

080041f0 <__ssputs_r>:
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	688e      	ldr	r6, [r1, #8]
 80041f6:	429e      	cmp	r6, r3
 80041f8:	4682      	mov	sl, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	4691      	mov	r9, r2
 80041fe:	4698      	mov	r8, r3
 8004200:	d835      	bhi.n	800426e <__ssputs_r+0x7e>
 8004202:	898a      	ldrh	r2, [r1, #12]
 8004204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004208:	d031      	beq.n	800426e <__ssputs_r+0x7e>
 800420a:	6825      	ldr	r5, [r4, #0]
 800420c:	6909      	ldr	r1, [r1, #16]
 800420e:	1a6f      	subs	r7, r5, r1
 8004210:	6965      	ldr	r5, [r4, #20]
 8004212:	2302      	movs	r3, #2
 8004214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004218:	fb95 f5f3 	sdiv	r5, r5, r3
 800421c:	f108 0301 	add.w	r3, r8, #1
 8004220:	443b      	add	r3, r7
 8004222:	429d      	cmp	r5, r3
 8004224:	bf38      	it	cc
 8004226:	461d      	movcc	r5, r3
 8004228:	0553      	lsls	r3, r2, #21
 800422a:	d531      	bpl.n	8004290 <__ssputs_r+0xa0>
 800422c:	4629      	mov	r1, r5
 800422e:	f000 fb2d 	bl	800488c <_malloc_r>
 8004232:	4606      	mov	r6, r0
 8004234:	b950      	cbnz	r0, 800424c <__ssputs_r+0x5c>
 8004236:	230c      	movs	r3, #12
 8004238:	f8ca 3000 	str.w	r3, [sl]
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424c:	463a      	mov	r2, r7
 800424e:	6921      	ldr	r1, [r4, #16]
 8004250:	f7ff ff8e 	bl	8004170 <memcpy>
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800425a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	6126      	str	r6, [r4, #16]
 8004262:	6165      	str	r5, [r4, #20]
 8004264:	443e      	add	r6, r7
 8004266:	1bed      	subs	r5, r5, r7
 8004268:	6026      	str	r6, [r4, #0]
 800426a:	60a5      	str	r5, [r4, #8]
 800426c:	4646      	mov	r6, r8
 800426e:	4546      	cmp	r6, r8
 8004270:	bf28      	it	cs
 8004272:	4646      	movcs	r6, r8
 8004274:	4632      	mov	r2, r6
 8004276:	4649      	mov	r1, r9
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	f000 fa9f 	bl	80047bc <memmove>
 800427e:	68a3      	ldr	r3, [r4, #8]
 8004280:	1b9b      	subs	r3, r3, r6
 8004282:	60a3      	str	r3, [r4, #8]
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	441e      	add	r6, r3
 8004288:	6026      	str	r6, [r4, #0]
 800428a:	2000      	movs	r0, #0
 800428c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004290:	462a      	mov	r2, r5
 8004292:	f000 fb59 	bl	8004948 <_realloc_r>
 8004296:	4606      	mov	r6, r0
 8004298:	2800      	cmp	r0, #0
 800429a:	d1e1      	bne.n	8004260 <__ssputs_r+0x70>
 800429c:	6921      	ldr	r1, [r4, #16]
 800429e:	4650      	mov	r0, sl
 80042a0:	f000 faa6 	bl	80047f0 <_free_r>
 80042a4:	e7c7      	b.n	8004236 <__ssputs_r+0x46>
	...

080042a8 <_svfiprintf_r>:
 80042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ac:	b09d      	sub	sp, #116	; 0x74
 80042ae:	4680      	mov	r8, r0
 80042b0:	9303      	str	r3, [sp, #12]
 80042b2:	898b      	ldrh	r3, [r1, #12]
 80042b4:	061c      	lsls	r4, r3, #24
 80042b6:	460d      	mov	r5, r1
 80042b8:	4616      	mov	r6, r2
 80042ba:	d50f      	bpl.n	80042dc <_svfiprintf_r+0x34>
 80042bc:	690b      	ldr	r3, [r1, #16]
 80042be:	b96b      	cbnz	r3, 80042dc <_svfiprintf_r+0x34>
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	f000 fae3 	bl	800488c <_malloc_r>
 80042c6:	6028      	str	r0, [r5, #0]
 80042c8:	6128      	str	r0, [r5, #16]
 80042ca:	b928      	cbnz	r0, 80042d8 <_svfiprintf_r+0x30>
 80042cc:	230c      	movs	r3, #12
 80042ce:	f8c8 3000 	str.w	r3, [r8]
 80042d2:	f04f 30ff 	mov.w	r0, #4294967295
 80042d6:	e0c5      	b.n	8004464 <_svfiprintf_r+0x1bc>
 80042d8:	2340      	movs	r3, #64	; 0x40
 80042da:	616b      	str	r3, [r5, #20]
 80042dc:	2300      	movs	r3, #0
 80042de:	9309      	str	r3, [sp, #36]	; 0x24
 80042e0:	2320      	movs	r3, #32
 80042e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042e6:	2330      	movs	r3, #48	; 0x30
 80042e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ec:	f04f 0b01 	mov.w	fp, #1
 80042f0:	4637      	mov	r7, r6
 80042f2:	463c      	mov	r4, r7
 80042f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d13c      	bne.n	8004376 <_svfiprintf_r+0xce>
 80042fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8004300:	d00b      	beq.n	800431a <_svfiprintf_r+0x72>
 8004302:	4653      	mov	r3, sl
 8004304:	4632      	mov	r2, r6
 8004306:	4629      	mov	r1, r5
 8004308:	4640      	mov	r0, r8
 800430a:	f7ff ff71 	bl	80041f0 <__ssputs_r>
 800430e:	3001      	adds	r0, #1
 8004310:	f000 80a3 	beq.w	800445a <_svfiprintf_r+0x1b2>
 8004314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004316:	4453      	add	r3, sl
 8004318:	9309      	str	r3, [sp, #36]	; 0x24
 800431a:	783b      	ldrb	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 809c 	beq.w	800445a <_svfiprintf_r+0x1b2>
 8004322:	2300      	movs	r3, #0
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	9307      	str	r3, [sp, #28]
 800432c:	9205      	str	r2, [sp, #20]
 800432e:	9306      	str	r3, [sp, #24]
 8004330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004334:	931a      	str	r3, [sp, #104]	; 0x68
 8004336:	2205      	movs	r2, #5
 8004338:	7821      	ldrb	r1, [r4, #0]
 800433a:	4850      	ldr	r0, [pc, #320]	; (800447c <_svfiprintf_r+0x1d4>)
 800433c:	f7fb ff70 	bl	8000220 <memchr>
 8004340:	1c67      	adds	r7, r4, #1
 8004342:	9b04      	ldr	r3, [sp, #16]
 8004344:	b9d8      	cbnz	r0, 800437e <_svfiprintf_r+0xd6>
 8004346:	06d9      	lsls	r1, r3, #27
 8004348:	bf44      	itt	mi
 800434a:	2220      	movmi	r2, #32
 800434c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004350:	071a      	lsls	r2, r3, #28
 8004352:	bf44      	itt	mi
 8004354:	222b      	movmi	r2, #43	; 0x2b
 8004356:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800435a:	7822      	ldrb	r2, [r4, #0]
 800435c:	2a2a      	cmp	r2, #42	; 0x2a
 800435e:	d016      	beq.n	800438e <_svfiprintf_r+0xe6>
 8004360:	9a07      	ldr	r2, [sp, #28]
 8004362:	2100      	movs	r1, #0
 8004364:	200a      	movs	r0, #10
 8004366:	4627      	mov	r7, r4
 8004368:	3401      	adds	r4, #1
 800436a:	783b      	ldrb	r3, [r7, #0]
 800436c:	3b30      	subs	r3, #48	; 0x30
 800436e:	2b09      	cmp	r3, #9
 8004370:	d951      	bls.n	8004416 <_svfiprintf_r+0x16e>
 8004372:	b1c9      	cbz	r1, 80043a8 <_svfiprintf_r+0x100>
 8004374:	e011      	b.n	800439a <_svfiprintf_r+0xf2>
 8004376:	2b25      	cmp	r3, #37	; 0x25
 8004378:	d0c0      	beq.n	80042fc <_svfiprintf_r+0x54>
 800437a:	4627      	mov	r7, r4
 800437c:	e7b9      	b.n	80042f2 <_svfiprintf_r+0x4a>
 800437e:	4a3f      	ldr	r2, [pc, #252]	; (800447c <_svfiprintf_r+0x1d4>)
 8004380:	1a80      	subs	r0, r0, r2
 8004382:	fa0b f000 	lsl.w	r0, fp, r0
 8004386:	4318      	orrs	r0, r3
 8004388:	9004      	str	r0, [sp, #16]
 800438a:	463c      	mov	r4, r7
 800438c:	e7d3      	b.n	8004336 <_svfiprintf_r+0x8e>
 800438e:	9a03      	ldr	r2, [sp, #12]
 8004390:	1d11      	adds	r1, r2, #4
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	9103      	str	r1, [sp, #12]
 8004396:	2a00      	cmp	r2, #0
 8004398:	db01      	blt.n	800439e <_svfiprintf_r+0xf6>
 800439a:	9207      	str	r2, [sp, #28]
 800439c:	e004      	b.n	80043a8 <_svfiprintf_r+0x100>
 800439e:	4252      	negs	r2, r2
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	9207      	str	r2, [sp, #28]
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	783b      	ldrb	r3, [r7, #0]
 80043aa:	2b2e      	cmp	r3, #46	; 0x2e
 80043ac:	d10e      	bne.n	80043cc <_svfiprintf_r+0x124>
 80043ae:	787b      	ldrb	r3, [r7, #1]
 80043b0:	2b2a      	cmp	r3, #42	; 0x2a
 80043b2:	f107 0101 	add.w	r1, r7, #1
 80043b6:	d132      	bne.n	800441e <_svfiprintf_r+0x176>
 80043b8:	9b03      	ldr	r3, [sp, #12]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	9203      	str	r2, [sp, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bfb8      	it	lt
 80043c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80043c8:	3702      	adds	r7, #2
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	4c2c      	ldr	r4, [pc, #176]	; (8004480 <_svfiprintf_r+0x1d8>)
 80043ce:	7839      	ldrb	r1, [r7, #0]
 80043d0:	2203      	movs	r2, #3
 80043d2:	4620      	mov	r0, r4
 80043d4:	f7fb ff24 	bl	8000220 <memchr>
 80043d8:	b138      	cbz	r0, 80043ea <_svfiprintf_r+0x142>
 80043da:	2340      	movs	r3, #64	; 0x40
 80043dc:	1b00      	subs	r0, r0, r4
 80043de:	fa03 f000 	lsl.w	r0, r3, r0
 80043e2:	9b04      	ldr	r3, [sp, #16]
 80043e4:	4303      	orrs	r3, r0
 80043e6:	9304      	str	r3, [sp, #16]
 80043e8:	3701      	adds	r7, #1
 80043ea:	7839      	ldrb	r1, [r7, #0]
 80043ec:	4825      	ldr	r0, [pc, #148]	; (8004484 <_svfiprintf_r+0x1dc>)
 80043ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043f2:	2206      	movs	r2, #6
 80043f4:	1c7e      	adds	r6, r7, #1
 80043f6:	f7fb ff13 	bl	8000220 <memchr>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d035      	beq.n	800446a <_svfiprintf_r+0x1c2>
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <_svfiprintf_r+0x1e0>)
 8004400:	b9fb      	cbnz	r3, 8004442 <_svfiprintf_r+0x19a>
 8004402:	9b03      	ldr	r3, [sp, #12]
 8004404:	3307      	adds	r3, #7
 8004406:	f023 0307 	bic.w	r3, r3, #7
 800440a:	3308      	adds	r3, #8
 800440c:	9303      	str	r3, [sp, #12]
 800440e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004410:	444b      	add	r3, r9
 8004412:	9309      	str	r3, [sp, #36]	; 0x24
 8004414:	e76c      	b.n	80042f0 <_svfiprintf_r+0x48>
 8004416:	fb00 3202 	mla	r2, r0, r2, r3
 800441a:	2101      	movs	r1, #1
 800441c:	e7a3      	b.n	8004366 <_svfiprintf_r+0xbe>
 800441e:	2300      	movs	r3, #0
 8004420:	9305      	str	r3, [sp, #20]
 8004422:	4618      	mov	r0, r3
 8004424:	240a      	movs	r4, #10
 8004426:	460f      	mov	r7, r1
 8004428:	3101      	adds	r1, #1
 800442a:	783a      	ldrb	r2, [r7, #0]
 800442c:	3a30      	subs	r2, #48	; 0x30
 800442e:	2a09      	cmp	r2, #9
 8004430:	d903      	bls.n	800443a <_svfiprintf_r+0x192>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ca      	beq.n	80043cc <_svfiprintf_r+0x124>
 8004436:	9005      	str	r0, [sp, #20]
 8004438:	e7c8      	b.n	80043cc <_svfiprintf_r+0x124>
 800443a:	fb04 2000 	mla	r0, r4, r0, r2
 800443e:	2301      	movs	r3, #1
 8004440:	e7f1      	b.n	8004426 <_svfiprintf_r+0x17e>
 8004442:	ab03      	add	r3, sp, #12
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	462a      	mov	r2, r5
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <_svfiprintf_r+0x1e4>)
 800444a:	a904      	add	r1, sp, #16
 800444c:	4640      	mov	r0, r8
 800444e:	f3af 8000 	nop.w
 8004452:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004456:	4681      	mov	r9, r0
 8004458:	d1d9      	bne.n	800440e <_svfiprintf_r+0x166>
 800445a:	89ab      	ldrh	r3, [r5, #12]
 800445c:	065b      	lsls	r3, r3, #25
 800445e:	f53f af38 	bmi.w	80042d2 <_svfiprintf_r+0x2a>
 8004462:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004464:	b01d      	add	sp, #116	; 0x74
 8004466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446a:	ab03      	add	r3, sp, #12
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	462a      	mov	r2, r5
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <_svfiprintf_r+0x1e4>)
 8004472:	a904      	add	r1, sp, #16
 8004474:	4640      	mov	r0, r8
 8004476:	f000 f881 	bl	800457c <_printf_i>
 800447a:	e7ea      	b.n	8004452 <_svfiprintf_r+0x1aa>
 800447c:	08004be4 	.word	0x08004be4
 8004480:	08004bea 	.word	0x08004bea
 8004484:	08004bee 	.word	0x08004bee
 8004488:	00000000 	.word	0x00000000
 800448c:	080041f1 	.word	0x080041f1

08004490 <_printf_common>:
 8004490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004494:	4691      	mov	r9, r2
 8004496:	461f      	mov	r7, r3
 8004498:	688a      	ldr	r2, [r1, #8]
 800449a:	690b      	ldr	r3, [r1, #16]
 800449c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044a0:	4293      	cmp	r3, r2
 80044a2:	bfb8      	it	lt
 80044a4:	4613      	movlt	r3, r2
 80044a6:	f8c9 3000 	str.w	r3, [r9]
 80044aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044ae:	4606      	mov	r6, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	b112      	cbz	r2, 80044ba <_printf_common+0x2a>
 80044b4:	3301      	adds	r3, #1
 80044b6:	f8c9 3000 	str.w	r3, [r9]
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	0699      	lsls	r1, r3, #26
 80044be:	bf42      	ittt	mi
 80044c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80044c4:	3302      	addmi	r3, #2
 80044c6:	f8c9 3000 	strmi.w	r3, [r9]
 80044ca:	6825      	ldr	r5, [r4, #0]
 80044cc:	f015 0506 	ands.w	r5, r5, #6
 80044d0:	d107      	bne.n	80044e2 <_printf_common+0x52>
 80044d2:	f104 0a19 	add.w	sl, r4, #25
 80044d6:	68e3      	ldr	r3, [r4, #12]
 80044d8:	f8d9 2000 	ldr.w	r2, [r9]
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	429d      	cmp	r5, r3
 80044e0:	db29      	blt.n	8004536 <_printf_common+0xa6>
 80044e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	3300      	adds	r3, #0
 80044ea:	bf18      	it	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	0692      	lsls	r2, r2, #26
 80044f0:	d42e      	bmi.n	8004550 <_printf_common+0xc0>
 80044f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044f6:	4639      	mov	r1, r7
 80044f8:	4630      	mov	r0, r6
 80044fa:	47c0      	blx	r8
 80044fc:	3001      	adds	r0, #1
 80044fe:	d021      	beq.n	8004544 <_printf_common+0xb4>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	68e5      	ldr	r5, [r4, #12]
 8004504:	f8d9 2000 	ldr.w	r2, [r9]
 8004508:	f003 0306 	and.w	r3, r3, #6
 800450c:	2b04      	cmp	r3, #4
 800450e:	bf08      	it	eq
 8004510:	1aad      	subeq	r5, r5, r2
 8004512:	68a3      	ldr	r3, [r4, #8]
 8004514:	6922      	ldr	r2, [r4, #16]
 8004516:	bf0c      	ite	eq
 8004518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800451c:	2500      	movne	r5, #0
 800451e:	4293      	cmp	r3, r2
 8004520:	bfc4      	itt	gt
 8004522:	1a9b      	subgt	r3, r3, r2
 8004524:	18ed      	addgt	r5, r5, r3
 8004526:	f04f 0900 	mov.w	r9, #0
 800452a:	341a      	adds	r4, #26
 800452c:	454d      	cmp	r5, r9
 800452e:	d11b      	bne.n	8004568 <_printf_common+0xd8>
 8004530:	2000      	movs	r0, #0
 8004532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004536:	2301      	movs	r3, #1
 8004538:	4652      	mov	r2, sl
 800453a:	4639      	mov	r1, r7
 800453c:	4630      	mov	r0, r6
 800453e:	47c0      	blx	r8
 8004540:	3001      	adds	r0, #1
 8004542:	d103      	bne.n	800454c <_printf_common+0xbc>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454c:	3501      	adds	r5, #1
 800454e:	e7c2      	b.n	80044d6 <_printf_common+0x46>
 8004550:	18e1      	adds	r1, r4, r3
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	2030      	movs	r0, #48	; 0x30
 8004556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800455a:	4422      	add	r2, r4
 800455c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004564:	3302      	adds	r3, #2
 8004566:	e7c4      	b.n	80044f2 <_printf_common+0x62>
 8004568:	2301      	movs	r3, #1
 800456a:	4622      	mov	r2, r4
 800456c:	4639      	mov	r1, r7
 800456e:	4630      	mov	r0, r6
 8004570:	47c0      	blx	r8
 8004572:	3001      	adds	r0, #1
 8004574:	d0e6      	beq.n	8004544 <_printf_common+0xb4>
 8004576:	f109 0901 	add.w	r9, r9, #1
 800457a:	e7d7      	b.n	800452c <_printf_common+0x9c>

0800457c <_printf_i>:
 800457c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004580:	4617      	mov	r7, r2
 8004582:	7e0a      	ldrb	r2, [r1, #24]
 8004584:	b085      	sub	sp, #20
 8004586:	2a6e      	cmp	r2, #110	; 0x6e
 8004588:	4698      	mov	r8, r3
 800458a:	4606      	mov	r6, r0
 800458c:	460c      	mov	r4, r1
 800458e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004590:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004594:	f000 80bc 	beq.w	8004710 <_printf_i+0x194>
 8004598:	d81a      	bhi.n	80045d0 <_printf_i+0x54>
 800459a:	2a63      	cmp	r2, #99	; 0x63
 800459c:	d02e      	beq.n	80045fc <_printf_i+0x80>
 800459e:	d80a      	bhi.n	80045b6 <_printf_i+0x3a>
 80045a0:	2a00      	cmp	r2, #0
 80045a2:	f000 80c8 	beq.w	8004736 <_printf_i+0x1ba>
 80045a6:	2a58      	cmp	r2, #88	; 0x58
 80045a8:	f000 808a 	beq.w	80046c0 <_printf_i+0x144>
 80045ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80045b4:	e02a      	b.n	800460c <_printf_i+0x90>
 80045b6:	2a64      	cmp	r2, #100	; 0x64
 80045b8:	d001      	beq.n	80045be <_printf_i+0x42>
 80045ba:	2a69      	cmp	r2, #105	; 0x69
 80045bc:	d1f6      	bne.n	80045ac <_printf_i+0x30>
 80045be:	6821      	ldr	r1, [r4, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80045c6:	d023      	beq.n	8004610 <_printf_i+0x94>
 80045c8:	1d11      	adds	r1, r2, #4
 80045ca:	6019      	str	r1, [r3, #0]
 80045cc:	6813      	ldr	r3, [r2, #0]
 80045ce:	e027      	b.n	8004620 <_printf_i+0xa4>
 80045d0:	2a73      	cmp	r2, #115	; 0x73
 80045d2:	f000 80b4 	beq.w	800473e <_printf_i+0x1c2>
 80045d6:	d808      	bhi.n	80045ea <_printf_i+0x6e>
 80045d8:	2a6f      	cmp	r2, #111	; 0x6f
 80045da:	d02a      	beq.n	8004632 <_printf_i+0xb6>
 80045dc:	2a70      	cmp	r2, #112	; 0x70
 80045de:	d1e5      	bne.n	80045ac <_printf_i+0x30>
 80045e0:	680a      	ldr	r2, [r1, #0]
 80045e2:	f042 0220 	orr.w	r2, r2, #32
 80045e6:	600a      	str	r2, [r1, #0]
 80045e8:	e003      	b.n	80045f2 <_printf_i+0x76>
 80045ea:	2a75      	cmp	r2, #117	; 0x75
 80045ec:	d021      	beq.n	8004632 <_printf_i+0xb6>
 80045ee:	2a78      	cmp	r2, #120	; 0x78
 80045f0:	d1dc      	bne.n	80045ac <_printf_i+0x30>
 80045f2:	2278      	movs	r2, #120	; 0x78
 80045f4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80045f8:	496e      	ldr	r1, [pc, #440]	; (80047b4 <_printf_i+0x238>)
 80045fa:	e064      	b.n	80046c6 <_printf_i+0x14a>
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004602:	1d11      	adds	r1, r2, #4
 8004604:	6019      	str	r1, [r3, #0]
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800460c:	2301      	movs	r3, #1
 800460e:	e0a3      	b.n	8004758 <_printf_i+0x1dc>
 8004610:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004614:	f102 0104 	add.w	r1, r2, #4
 8004618:	6019      	str	r1, [r3, #0]
 800461a:	d0d7      	beq.n	80045cc <_printf_i+0x50>
 800461c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004620:	2b00      	cmp	r3, #0
 8004622:	da03      	bge.n	800462c <_printf_i+0xb0>
 8004624:	222d      	movs	r2, #45	; 0x2d
 8004626:	425b      	negs	r3, r3
 8004628:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800462c:	4962      	ldr	r1, [pc, #392]	; (80047b8 <_printf_i+0x23c>)
 800462e:	220a      	movs	r2, #10
 8004630:	e017      	b.n	8004662 <_printf_i+0xe6>
 8004632:	6820      	ldr	r0, [r4, #0]
 8004634:	6819      	ldr	r1, [r3, #0]
 8004636:	f010 0f80 	tst.w	r0, #128	; 0x80
 800463a:	d003      	beq.n	8004644 <_printf_i+0xc8>
 800463c:	1d08      	adds	r0, r1, #4
 800463e:	6018      	str	r0, [r3, #0]
 8004640:	680b      	ldr	r3, [r1, #0]
 8004642:	e006      	b.n	8004652 <_printf_i+0xd6>
 8004644:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004648:	f101 0004 	add.w	r0, r1, #4
 800464c:	6018      	str	r0, [r3, #0]
 800464e:	d0f7      	beq.n	8004640 <_printf_i+0xc4>
 8004650:	880b      	ldrh	r3, [r1, #0]
 8004652:	4959      	ldr	r1, [pc, #356]	; (80047b8 <_printf_i+0x23c>)
 8004654:	2a6f      	cmp	r2, #111	; 0x6f
 8004656:	bf14      	ite	ne
 8004658:	220a      	movne	r2, #10
 800465a:	2208      	moveq	r2, #8
 800465c:	2000      	movs	r0, #0
 800465e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004662:	6865      	ldr	r5, [r4, #4]
 8004664:	60a5      	str	r5, [r4, #8]
 8004666:	2d00      	cmp	r5, #0
 8004668:	f2c0 809c 	blt.w	80047a4 <_printf_i+0x228>
 800466c:	6820      	ldr	r0, [r4, #0]
 800466e:	f020 0004 	bic.w	r0, r0, #4
 8004672:	6020      	str	r0, [r4, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d13f      	bne.n	80046f8 <_printf_i+0x17c>
 8004678:	2d00      	cmp	r5, #0
 800467a:	f040 8095 	bne.w	80047a8 <_printf_i+0x22c>
 800467e:	4675      	mov	r5, lr
 8004680:	2a08      	cmp	r2, #8
 8004682:	d10b      	bne.n	800469c <_printf_i+0x120>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	07da      	lsls	r2, r3, #31
 8004688:	d508      	bpl.n	800469c <_printf_i+0x120>
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	6862      	ldr	r2, [r4, #4]
 800468e:	429a      	cmp	r2, r3
 8004690:	bfde      	ittt	le
 8004692:	2330      	movle	r3, #48	; 0x30
 8004694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004698:	f105 35ff 	addle.w	r5, r5, #4294967295
 800469c:	ebae 0305 	sub.w	r3, lr, r5
 80046a0:	6123      	str	r3, [r4, #16]
 80046a2:	f8cd 8000 	str.w	r8, [sp]
 80046a6:	463b      	mov	r3, r7
 80046a8:	aa03      	add	r2, sp, #12
 80046aa:	4621      	mov	r1, r4
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7ff feef 	bl	8004490 <_printf_common>
 80046b2:	3001      	adds	r0, #1
 80046b4:	d155      	bne.n	8004762 <_printf_i+0x1e6>
 80046b6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ba:	b005      	add	sp, #20
 80046bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046c0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80046c4:	493c      	ldr	r1, [pc, #240]	; (80047b8 <_printf_i+0x23c>)
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 80046ce:	f100 0504 	add.w	r5, r0, #4
 80046d2:	601d      	str	r5, [r3, #0]
 80046d4:	d001      	beq.n	80046da <_printf_i+0x15e>
 80046d6:	6803      	ldr	r3, [r0, #0]
 80046d8:	e002      	b.n	80046e0 <_printf_i+0x164>
 80046da:	0655      	lsls	r5, r2, #25
 80046dc:	d5fb      	bpl.n	80046d6 <_printf_i+0x15a>
 80046de:	8803      	ldrh	r3, [r0, #0]
 80046e0:	07d0      	lsls	r0, r2, #31
 80046e2:	bf44      	itt	mi
 80046e4:	f042 0220 	orrmi.w	r2, r2, #32
 80046e8:	6022      	strmi	r2, [r4, #0]
 80046ea:	b91b      	cbnz	r3, 80046f4 <_printf_i+0x178>
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	f022 0220 	bic.w	r2, r2, #32
 80046f2:	6022      	str	r2, [r4, #0]
 80046f4:	2210      	movs	r2, #16
 80046f6:	e7b1      	b.n	800465c <_printf_i+0xe0>
 80046f8:	4675      	mov	r5, lr
 80046fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80046fe:	fb02 3310 	mls	r3, r2, r0, r3
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004708:	4603      	mov	r3, r0
 800470a:	2800      	cmp	r0, #0
 800470c:	d1f5      	bne.n	80046fa <_printf_i+0x17e>
 800470e:	e7b7      	b.n	8004680 <_printf_i+0x104>
 8004710:	6808      	ldr	r0, [r1, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	6949      	ldr	r1, [r1, #20]
 8004716:	f010 0f80 	tst.w	r0, #128	; 0x80
 800471a:	d004      	beq.n	8004726 <_printf_i+0x1aa>
 800471c:	1d10      	adds	r0, r2, #4
 800471e:	6018      	str	r0, [r3, #0]
 8004720:	6813      	ldr	r3, [r2, #0]
 8004722:	6019      	str	r1, [r3, #0]
 8004724:	e007      	b.n	8004736 <_printf_i+0x1ba>
 8004726:	f010 0f40 	tst.w	r0, #64	; 0x40
 800472a:	f102 0004 	add.w	r0, r2, #4
 800472e:	6018      	str	r0, [r3, #0]
 8004730:	6813      	ldr	r3, [r2, #0]
 8004732:	d0f6      	beq.n	8004722 <_printf_i+0x1a6>
 8004734:	8019      	strh	r1, [r3, #0]
 8004736:	2300      	movs	r3, #0
 8004738:	6123      	str	r3, [r4, #16]
 800473a:	4675      	mov	r5, lr
 800473c:	e7b1      	b.n	80046a2 <_printf_i+0x126>
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	1d11      	adds	r1, r2, #4
 8004742:	6019      	str	r1, [r3, #0]
 8004744:	6815      	ldr	r5, [r2, #0]
 8004746:	6862      	ldr	r2, [r4, #4]
 8004748:	2100      	movs	r1, #0
 800474a:	4628      	mov	r0, r5
 800474c:	f7fb fd68 	bl	8000220 <memchr>
 8004750:	b108      	cbz	r0, 8004756 <_printf_i+0x1da>
 8004752:	1b40      	subs	r0, r0, r5
 8004754:	6060      	str	r0, [r4, #4]
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	6123      	str	r3, [r4, #16]
 800475a:	2300      	movs	r3, #0
 800475c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004760:	e79f      	b.n	80046a2 <_printf_i+0x126>
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	462a      	mov	r2, r5
 8004766:	4639      	mov	r1, r7
 8004768:	4630      	mov	r0, r6
 800476a:	47c0      	blx	r8
 800476c:	3001      	adds	r0, #1
 800476e:	d0a2      	beq.n	80046b6 <_printf_i+0x13a>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	079b      	lsls	r3, r3, #30
 8004774:	d507      	bpl.n	8004786 <_printf_i+0x20a>
 8004776:	2500      	movs	r5, #0
 8004778:	f104 0919 	add.w	r9, r4, #25
 800477c:	68e3      	ldr	r3, [r4, #12]
 800477e:	9a03      	ldr	r2, [sp, #12]
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	429d      	cmp	r5, r3
 8004784:	db05      	blt.n	8004792 <_printf_i+0x216>
 8004786:	68e0      	ldr	r0, [r4, #12]
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	4298      	cmp	r0, r3
 800478c:	bfb8      	it	lt
 800478e:	4618      	movlt	r0, r3
 8004790:	e793      	b.n	80046ba <_printf_i+0x13e>
 8004792:	2301      	movs	r3, #1
 8004794:	464a      	mov	r2, r9
 8004796:	4639      	mov	r1, r7
 8004798:	4630      	mov	r0, r6
 800479a:	47c0      	blx	r8
 800479c:	3001      	adds	r0, #1
 800479e:	d08a      	beq.n	80046b6 <_printf_i+0x13a>
 80047a0:	3501      	adds	r5, #1
 80047a2:	e7eb      	b.n	800477c <_printf_i+0x200>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1a7      	bne.n	80046f8 <_printf_i+0x17c>
 80047a8:	780b      	ldrb	r3, [r1, #0]
 80047aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b2:	e765      	b.n	8004680 <_printf_i+0x104>
 80047b4:	08004c06 	.word	0x08004c06
 80047b8:	08004bf5 	.word	0x08004bf5

080047bc <memmove>:
 80047bc:	4288      	cmp	r0, r1
 80047be:	b510      	push	{r4, lr}
 80047c0:	eb01 0302 	add.w	r3, r1, r2
 80047c4:	d803      	bhi.n	80047ce <memmove+0x12>
 80047c6:	1e42      	subs	r2, r0, #1
 80047c8:	4299      	cmp	r1, r3
 80047ca:	d10c      	bne.n	80047e6 <memmove+0x2a>
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	4298      	cmp	r0, r3
 80047d0:	d2f9      	bcs.n	80047c6 <memmove+0xa>
 80047d2:	1881      	adds	r1, r0, r2
 80047d4:	1ad2      	subs	r2, r2, r3
 80047d6:	42d3      	cmn	r3, r2
 80047d8:	d100      	bne.n	80047dc <memmove+0x20>
 80047da:	bd10      	pop	{r4, pc}
 80047dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80047e4:	e7f7      	b.n	80047d6 <memmove+0x1a>
 80047e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80047ee:	e7eb      	b.n	80047c8 <memmove+0xc>

080047f0 <_free_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4605      	mov	r5, r0
 80047f4:	2900      	cmp	r1, #0
 80047f6:	d045      	beq.n	8004884 <_free_r+0x94>
 80047f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047fc:	1f0c      	subs	r4, r1, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	18e4      	addlt	r4, r4, r3
 8004804:	f000 f8d6 	bl	80049b4 <__malloc_lock>
 8004808:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <_free_r+0x98>)
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	4610      	mov	r0, r2
 800480e:	b933      	cbnz	r3, 800481e <_free_r+0x2e>
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	6014      	str	r4, [r2, #0]
 8004814:	4628      	mov	r0, r5
 8004816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800481a:	f000 b8cc 	b.w	80049b6 <__malloc_unlock>
 800481e:	42a3      	cmp	r3, r4
 8004820:	d90c      	bls.n	800483c <_free_r+0x4c>
 8004822:	6821      	ldr	r1, [r4, #0]
 8004824:	1862      	adds	r2, r4, r1
 8004826:	4293      	cmp	r3, r2
 8004828:	bf04      	itt	eq
 800482a:	681a      	ldreq	r2, [r3, #0]
 800482c:	685b      	ldreq	r3, [r3, #4]
 800482e:	6063      	str	r3, [r4, #4]
 8004830:	bf04      	itt	eq
 8004832:	1852      	addeq	r2, r2, r1
 8004834:	6022      	streq	r2, [r4, #0]
 8004836:	6004      	str	r4, [r0, #0]
 8004838:	e7ec      	b.n	8004814 <_free_r+0x24>
 800483a:	4613      	mov	r3, r2
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	b10a      	cbz	r2, 8004844 <_free_r+0x54>
 8004840:	42a2      	cmp	r2, r4
 8004842:	d9fa      	bls.n	800483a <_free_r+0x4a>
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	1858      	adds	r0, r3, r1
 8004848:	42a0      	cmp	r0, r4
 800484a:	d10b      	bne.n	8004864 <_free_r+0x74>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	4401      	add	r1, r0
 8004850:	1858      	adds	r0, r3, r1
 8004852:	4282      	cmp	r2, r0
 8004854:	6019      	str	r1, [r3, #0]
 8004856:	d1dd      	bne.n	8004814 <_free_r+0x24>
 8004858:	6810      	ldr	r0, [r2, #0]
 800485a:	6852      	ldr	r2, [r2, #4]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	4401      	add	r1, r0
 8004860:	6019      	str	r1, [r3, #0]
 8004862:	e7d7      	b.n	8004814 <_free_r+0x24>
 8004864:	d902      	bls.n	800486c <_free_r+0x7c>
 8004866:	230c      	movs	r3, #12
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	e7d3      	b.n	8004814 <_free_r+0x24>
 800486c:	6820      	ldr	r0, [r4, #0]
 800486e:	1821      	adds	r1, r4, r0
 8004870:	428a      	cmp	r2, r1
 8004872:	bf04      	itt	eq
 8004874:	6811      	ldreq	r1, [r2, #0]
 8004876:	6852      	ldreq	r2, [r2, #4]
 8004878:	6062      	str	r2, [r4, #4]
 800487a:	bf04      	itt	eq
 800487c:	1809      	addeq	r1, r1, r0
 800487e:	6021      	streq	r1, [r4, #0]
 8004880:	605c      	str	r4, [r3, #4]
 8004882:	e7c7      	b.n	8004814 <_free_r+0x24>
 8004884:	bd38      	pop	{r3, r4, r5, pc}
 8004886:	bf00      	nop
 8004888:	20003de0 	.word	0x20003de0

0800488c <_malloc_r>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	1ccd      	adds	r5, r1, #3
 8004890:	f025 0503 	bic.w	r5, r5, #3
 8004894:	3508      	adds	r5, #8
 8004896:	2d0c      	cmp	r5, #12
 8004898:	bf38      	it	cc
 800489a:	250c      	movcc	r5, #12
 800489c:	2d00      	cmp	r5, #0
 800489e:	4606      	mov	r6, r0
 80048a0:	db01      	blt.n	80048a6 <_malloc_r+0x1a>
 80048a2:	42a9      	cmp	r1, r5
 80048a4:	d903      	bls.n	80048ae <_malloc_r+0x22>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	2000      	movs	r0, #0
 80048ac:	bd70      	pop	{r4, r5, r6, pc}
 80048ae:	f000 f881 	bl	80049b4 <__malloc_lock>
 80048b2:	4a23      	ldr	r2, [pc, #140]	; (8004940 <_malloc_r+0xb4>)
 80048b4:	6814      	ldr	r4, [r2, #0]
 80048b6:	4621      	mov	r1, r4
 80048b8:	b991      	cbnz	r1, 80048e0 <_malloc_r+0x54>
 80048ba:	4c22      	ldr	r4, [pc, #136]	; (8004944 <_malloc_r+0xb8>)
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	b91b      	cbnz	r3, 80048c8 <_malloc_r+0x3c>
 80048c0:	4630      	mov	r0, r6
 80048c2:	f000 f867 	bl	8004994 <_sbrk_r>
 80048c6:	6020      	str	r0, [r4, #0]
 80048c8:	4629      	mov	r1, r5
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 f862 	bl	8004994 <_sbrk_r>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d126      	bne.n	8004922 <_malloc_r+0x96>
 80048d4:	230c      	movs	r3, #12
 80048d6:	6033      	str	r3, [r6, #0]
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 f86c 	bl	80049b6 <__malloc_unlock>
 80048de:	e7e4      	b.n	80048aa <_malloc_r+0x1e>
 80048e0:	680b      	ldr	r3, [r1, #0]
 80048e2:	1b5b      	subs	r3, r3, r5
 80048e4:	d41a      	bmi.n	800491c <_malloc_r+0x90>
 80048e6:	2b0b      	cmp	r3, #11
 80048e8:	d90f      	bls.n	800490a <_malloc_r+0x7e>
 80048ea:	600b      	str	r3, [r1, #0]
 80048ec:	50cd      	str	r5, [r1, r3]
 80048ee:	18cc      	adds	r4, r1, r3
 80048f0:	4630      	mov	r0, r6
 80048f2:	f000 f860 	bl	80049b6 <__malloc_unlock>
 80048f6:	f104 000b 	add.w	r0, r4, #11
 80048fa:	1d23      	adds	r3, r4, #4
 80048fc:	f020 0007 	bic.w	r0, r0, #7
 8004900:	1ac3      	subs	r3, r0, r3
 8004902:	d01b      	beq.n	800493c <_malloc_r+0xb0>
 8004904:	425a      	negs	r2, r3
 8004906:	50e2      	str	r2, [r4, r3]
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	428c      	cmp	r4, r1
 800490c:	bf0d      	iteet	eq
 800490e:	6863      	ldreq	r3, [r4, #4]
 8004910:	684b      	ldrne	r3, [r1, #4]
 8004912:	6063      	strne	r3, [r4, #4]
 8004914:	6013      	streq	r3, [r2, #0]
 8004916:	bf18      	it	ne
 8004918:	460c      	movne	r4, r1
 800491a:	e7e9      	b.n	80048f0 <_malloc_r+0x64>
 800491c:	460c      	mov	r4, r1
 800491e:	6849      	ldr	r1, [r1, #4]
 8004920:	e7ca      	b.n	80048b8 <_malloc_r+0x2c>
 8004922:	1cc4      	adds	r4, r0, #3
 8004924:	f024 0403 	bic.w	r4, r4, #3
 8004928:	42a0      	cmp	r0, r4
 800492a:	d005      	beq.n	8004938 <_malloc_r+0xac>
 800492c:	1a21      	subs	r1, r4, r0
 800492e:	4630      	mov	r0, r6
 8004930:	f000 f830 	bl	8004994 <_sbrk_r>
 8004934:	3001      	adds	r0, #1
 8004936:	d0cd      	beq.n	80048d4 <_malloc_r+0x48>
 8004938:	6025      	str	r5, [r4, #0]
 800493a:	e7d9      	b.n	80048f0 <_malloc_r+0x64>
 800493c:	bd70      	pop	{r4, r5, r6, pc}
 800493e:	bf00      	nop
 8004940:	20003de0 	.word	0x20003de0
 8004944:	20003de4 	.word	0x20003de4

08004948 <_realloc_r>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	4607      	mov	r7, r0
 800494c:	4614      	mov	r4, r2
 800494e:	460e      	mov	r6, r1
 8004950:	b921      	cbnz	r1, 800495c <_realloc_r+0x14>
 8004952:	4611      	mov	r1, r2
 8004954:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004958:	f7ff bf98 	b.w	800488c <_malloc_r>
 800495c:	b922      	cbnz	r2, 8004968 <_realloc_r+0x20>
 800495e:	f7ff ff47 	bl	80047f0 <_free_r>
 8004962:	4625      	mov	r5, r4
 8004964:	4628      	mov	r0, r5
 8004966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004968:	f000 f826 	bl	80049b8 <_malloc_usable_size_r>
 800496c:	4284      	cmp	r4, r0
 800496e:	d90f      	bls.n	8004990 <_realloc_r+0x48>
 8004970:	4621      	mov	r1, r4
 8004972:	4638      	mov	r0, r7
 8004974:	f7ff ff8a 	bl	800488c <_malloc_r>
 8004978:	4605      	mov	r5, r0
 800497a:	2800      	cmp	r0, #0
 800497c:	d0f2      	beq.n	8004964 <_realloc_r+0x1c>
 800497e:	4631      	mov	r1, r6
 8004980:	4622      	mov	r2, r4
 8004982:	f7ff fbf5 	bl	8004170 <memcpy>
 8004986:	4631      	mov	r1, r6
 8004988:	4638      	mov	r0, r7
 800498a:	f7ff ff31 	bl	80047f0 <_free_r>
 800498e:	e7e9      	b.n	8004964 <_realloc_r+0x1c>
 8004990:	4635      	mov	r5, r6
 8004992:	e7e7      	b.n	8004964 <_realloc_r+0x1c>

08004994 <_sbrk_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4c06      	ldr	r4, [pc, #24]	; (80049b0 <_sbrk_r+0x1c>)
 8004998:	2300      	movs	r3, #0
 800499a:	4605      	mov	r5, r0
 800499c:	4608      	mov	r0, r1
 800499e:	6023      	str	r3, [r4, #0]
 80049a0:	f000 f814 	bl	80049cc <_sbrk>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_sbrk_r+0x1a>
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_sbrk_r+0x1a>
 80049ac:	602b      	str	r3, [r5, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	20003f10 	.word	0x20003f10

080049b4 <__malloc_lock>:
 80049b4:	4770      	bx	lr

080049b6 <__malloc_unlock>:
 80049b6:	4770      	bx	lr

080049b8 <_malloc_usable_size_r>:
 80049b8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80049bc:	2800      	cmp	r0, #0
 80049be:	f1a0 0004 	sub.w	r0, r0, #4
 80049c2:	bfbc      	itt	lt
 80049c4:	580b      	ldrlt	r3, [r1, r0]
 80049c6:	18c0      	addlt	r0, r0, r3
 80049c8:	4770      	bx	lr
	...

080049cc <_sbrk>:
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <_sbrk+0x14>)
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	4602      	mov	r2, r0
 80049d2:	b909      	cbnz	r1, 80049d8 <_sbrk+0xc>
 80049d4:	4903      	ldr	r1, [pc, #12]	; (80049e4 <_sbrk+0x18>)
 80049d6:	6019      	str	r1, [r3, #0]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	4402      	add	r2, r0
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	4770      	bx	lr
 80049e0:	20003de8 	.word	0x20003de8
 80049e4:	20003f14 	.word	0x20003f14

080049e8 <_init>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	bf00      	nop
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr

080049f4 <_fini>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr
